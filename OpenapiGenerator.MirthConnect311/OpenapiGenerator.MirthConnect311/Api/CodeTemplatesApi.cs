/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICodeTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a single code template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <returns>CodeTemplate</returns>
        CodeTemplate GetCodeTemplate(string codeTemplateId);

        /// <summary>
        /// Retrieves a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <returns>ApiResponse of CodeTemplate</returns>
        ApiResponse<CodeTemplate> GetCodeTemplateWithHttpInfo(string codeTemplateId);
        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>List&lt;CodeTemplateLibrary&gt;</returns>
        List<CodeTemplateLibrary> GetCodeTemplateLibraries(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?));

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateLibrary&gt;</returns>
        ApiResponse<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesWithHttpInfo(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?));
        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplateLibrary&gt;</returns>
        List<CodeTemplateLibrary> GetCodeTemplateLibrariesPost(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>));

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateLibrary&gt;</returns>
        ApiResponse<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesPostWithHttpInfo(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>));
        /// <summary>
        /// Retrieves a single code template library.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>CodeTemplateLibrary</returns>
        CodeTemplateLibrary GetCodeTemplateLibrary(string libraryId, bool? includeCodeTemplates = default(bool?));

        /// <summary>
        /// Retrieves a single code template library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>ApiResponse of CodeTemplateLibrary</returns>
        ApiResponse<CodeTemplateLibrary> GetCodeTemplateLibraryWithHttpInfo(string libraryId, bool? includeCodeTemplates = default(bool?));
        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <returns>List&lt;CodeTemplateSummary&gt;</returns>
        List<CodeTemplateSummary> GetCodeTemplateSummary(Dictionary<string, int> requestBody);

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateSummary&gt;</returns>
        ApiResponse<List<CodeTemplateSummary>> GetCodeTemplateSummaryWithHttpInfo(Dictionary<string, int> requestBody);
        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplate&gt;</returns>
        List<CodeTemplate> GetCodeTemplates(List<string> codeTemplateId = default(List<string>));

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplate&gt;</returns>
        ApiResponse<List<CodeTemplate>> GetCodeTemplatesWithHttpInfo(List<string> codeTemplateId = default(List<string>));
        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplate&gt;</returns>
        List<CodeTemplate> GetCodeTemplatesPost(List<string> requestBody = default(List<string>));

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplate&gt;</returns>
        ApiResponse<List<CodeTemplate>> GetCodeTemplatesPostWithHttpInfo(List<string> requestBody = default(List<string>));
        /// <summary>
        /// Removes a single code template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <returns></returns>
        void RemoveCodeTemplate(string codeTemplateId);

        /// <summary>
        /// Removes a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCodeTemplateWithHttpInfo(string codeTemplateId);
        /// <summary>
        /// Updates a single code template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        bool UpdateCodeTemplate(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?));

        /// <summary>
        /// Updates a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateCodeTemplateWithHttpInfo(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?));
        /// <summary>
        /// Replaces all code template libraries.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        bool UpdateCodeTemplateLibraries(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?));

        /// <summary>
        /// Replaces all code template libraries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateCodeTemplateLibrariesWithHttpInfo(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?));
        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <returns>CodeTemplateLibrarySaveResult</returns>
        CodeTemplateLibrarySaveResult UpdateLibrariesAndTemplates(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>));

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <returns>ApiResponse of CodeTemplateLibrarySaveResult</returns>
        ApiResponse<CodeTemplateLibrarySaveResult> UpdateLibrariesAndTemplatesWithHttpInfo(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICodeTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplate</returns>
        System.Threading.Tasks.Task<CodeTemplate> GetCodeTemplateAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CodeTemplate>> GetCodeTemplateWithHttpInfoAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateLibrary&gt;</returns>
        System.Threading.Tasks.Task<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesAsync(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateLibrary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CodeTemplateLibrary>>> GetCodeTemplateLibrariesWithHttpInfoAsync(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateLibrary&gt;</returns>
        System.Threading.Tasks.Task<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesPostAsync(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateLibrary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CodeTemplateLibrary>>> GetCodeTemplateLibrariesPostWithHttpInfoAsync(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a single code template library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplateLibrary</returns>
        System.Threading.Tasks.Task<CodeTemplateLibrary> GetCodeTemplateLibraryAsync(string libraryId, bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single code template library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplateLibrary)</returns>
        System.Threading.Tasks.Task<ApiResponse<CodeTemplateLibrary>> GetCodeTemplateLibraryWithHttpInfoAsync(string libraryId, bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateSummary&gt;</returns>
        System.Threading.Tasks.Task<List<CodeTemplateSummary>> GetCodeTemplateSummaryAsync(Dictionary<string, int> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CodeTemplateSummary>>> GetCodeTemplateSummaryWithHttpInfoAsync(Dictionary<string, int> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<CodeTemplate>> GetCodeTemplatesAsync(List<string> codeTemplateId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CodeTemplate>>> GetCodeTemplatesWithHttpInfoAsync(List<string> codeTemplateId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<CodeTemplate>> GetCodeTemplatesPostAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CodeTemplate>>> GetCodeTemplatesPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCodeTemplateAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCodeTemplateWithHttpInfoAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateCodeTemplateAsync(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a single code template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateCodeTemplateWithHttpInfoAsync(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replaces all code template libraries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateCodeTemplateLibrariesAsync(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replaces all code template libraries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateCodeTemplateLibrariesWithHttpInfoAsync(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplateLibrarySaveResult</returns>
        System.Threading.Tasks.Task<CodeTemplateLibrarySaveResult> UpdateLibrariesAndTemplatesAsync(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplateLibrarySaveResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CodeTemplateLibrarySaveResult>> UpdateLibrariesAndTemplatesWithHttpInfoAsync(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICodeTemplatesApi : ICodeTemplatesApiSync, ICodeTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CodeTemplatesApi : ICodeTemplatesApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CodeTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CodeTemplatesApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CodeTemplatesApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CodeTemplatesApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <returns>CodeTemplate</returns>
        public CodeTemplate GetCodeTemplate(string codeTemplateId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplate> localVarResponse = GetCodeTemplateWithHttpInfo(codeTemplateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <returns>ApiResponse of CodeTemplate</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplate> GetCodeTemplateWithHttpInfo(string codeTemplateId)
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->GetCodeTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CodeTemplate>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplate</returns>
        public async System.Threading.Tasks.Task<CodeTemplate> GetCodeTemplateAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplate> localVarResponse = await GetCodeTemplateWithHttpInfoAsync(codeTemplateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplate)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplate>> GetCodeTemplateWithHttpInfoAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->GetCodeTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CodeTemplate>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>List&lt;CodeTemplateLibrary&gt;</returns>
        public List<CodeTemplateLibrary> GetCodeTemplateLibraries(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> localVarResponse = GetCodeTemplateLibrariesWithHttpInfo(libraryId, includeCodeTemplates);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateLibrary&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesWithHttpInfo(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "libraryId", libraryId));
            }
            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CodeTemplateLibrary>>("/codeTemplateLibraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateLibrary&gt;</returns>
        public async System.Threading.Tasks.Task<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesAsync(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> localVarResponse = await GetCodeTemplateLibrariesWithHttpInfoAsync(libraryId, includeCodeTemplates, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateLibrary&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>>> GetCodeTemplateLibrariesWithHttpInfoAsync(List<string> libraryId = default(List<string>), bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "libraryId", libraryId));
            }
            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CodeTemplateLibrary>>("/codeTemplateLibraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplateLibrary&gt;</returns>
        public List<CodeTemplateLibrary> GetCodeTemplateLibrariesPost(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> localVarResponse = GetCodeTemplateLibrariesPostWithHttpInfo(includeCodeTemplates, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateLibrary&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesPostWithHttpInfo(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CodeTemplateLibrary>>("/codeTemplateLibraries/_getCodeTemplateLibraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibrariesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateLibrary&gt;</returns>
        public async System.Threading.Tasks.Task<List<CodeTemplateLibrary>> GetCodeTemplateLibrariesPostAsync(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>> localVarResponse = await GetCodeTemplateLibrariesPostWithHttpInfoAsync(includeCodeTemplates, requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="requestBody">The ID of the library(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateLibrary&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateLibrary>>> GetCodeTemplateLibrariesPostWithHttpInfoAsync(bool? includeCodeTemplates = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CodeTemplateLibrary>>("/codeTemplateLibraries/_getCodeTemplateLibraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibrariesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single code template library. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>CodeTemplateLibrary</returns>
        public CodeTemplateLibrary GetCodeTemplateLibrary(string libraryId, bool? includeCodeTemplates = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrary> localVarResponse = GetCodeTemplateLibraryWithHttpInfo(libraryId, includeCodeTemplates);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single code template library. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <returns>ApiResponse of CodeTemplateLibrary</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrary> GetCodeTemplateLibraryWithHttpInfo(string libraryId, bool? includeCodeTemplates = default(bool?))
        {
            // verify the required parameter 'libraryId' is set
            if (libraryId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'libraryId' when calling CodeTemplatesApi->GetCodeTemplateLibrary");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("libraryId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(libraryId)); // path parameter
            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CodeTemplateLibrary>("/codeTemplateLibraries/{libraryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single code template library. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplateLibrary</returns>
        public async System.Threading.Tasks.Task<CodeTemplateLibrary> GetCodeTemplateLibraryAsync(string libraryId, bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrary> localVarResponse = await GetCodeTemplateLibraryWithHttpInfoAsync(libraryId, includeCodeTemplates, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single code template library. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="libraryId">The ID of the library to retrieve.</param>
        /// <param name="includeCodeTemplates">If true, full code templates will be included inside each library. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplateLibrary)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrary>> GetCodeTemplateLibraryWithHttpInfoAsync(string libraryId, bool? includeCodeTemplates = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'libraryId' is set
            if (libraryId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'libraryId' when calling CodeTemplatesApi->GetCodeTemplateLibrary");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("libraryId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(libraryId)); // path parameter
            if (includeCodeTemplates != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplates", includeCodeTemplates));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CodeTemplateLibrary>("/codeTemplateLibraries/{libraryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <returns>List&lt;CodeTemplateSummary&gt;</returns>
        public List<CodeTemplateSummary> GetCodeTemplateSummary(Dictionary<string, int> requestBody)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateSummary>> localVarResponse = GetCodeTemplateSummaryWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <returns>ApiResponse of List&lt;CodeTemplateSummary&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateSummary>> GetCodeTemplateSummaryWithHttpInfo(Dictionary<string, int> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling CodeTemplatesApi->GetCodeTemplateSummary");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CodeTemplateSummary>>("/codeTemplates/_getSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplateSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<CodeTemplateSummary>> GetCodeTemplateSummaryAsync(Dictionary<string, int> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateSummary>> localVarResponse = await GetCodeTemplateSummaryWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">A map of revisions telling the server the state of the client-side code template cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplateSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplateSummary>>> GetCodeTemplateSummaryWithHttpInfoAsync(Dictionary<string, int> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling CodeTemplatesApi->GetCodeTemplateSummary");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CodeTemplateSummary>>("/codeTemplates/_getSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplateSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplate&gt;</returns>
        public List<CodeTemplate> GetCodeTemplates(List<string> codeTemplateId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> localVarResponse = GetCodeTemplatesWithHttpInfo(codeTemplateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplate&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> GetCodeTemplatesWithHttpInfo(List<string> codeTemplateId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "codeTemplateId", codeTemplateId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CodeTemplate>>("/codeTemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CodeTemplate>> GetCodeTemplatesAsync(List<string> codeTemplateId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> localVarResponse = await GetCodeTemplatesWithHttpInfoAsync(codeTemplateId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>>> GetCodeTemplatesWithHttpInfoAsync(List<string> codeTemplateId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "codeTemplateId", codeTemplateId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CodeTemplate>>("/codeTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>List&lt;CodeTemplate&gt;</returns>
        public List<CodeTemplate> GetCodeTemplatesPost(List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> localVarResponse = GetCodeTemplatesPostWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <returns>ApiResponse of List&lt;CodeTemplate&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> GetCodeTemplatesPostWithHttpInfo(List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CodeTemplate>>("/codeTemplates/_getCodeTemplates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CodeTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<CodeTemplate>> GetCodeTemplatesPostAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>> localVarResponse = await GetCodeTemplatesPostWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The ID of the code template(s) to retrieve. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CodeTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<CodeTemplate>>> GetCodeTemplatesPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CodeTemplate>>("/codeTemplates/_getCodeTemplates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCodeTemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <returns></returns>
        public void RemoveCodeTemplate(string codeTemplateId)
        {
            RemoveCodeTemplateWithHttpInfo(codeTemplateId);
        }

        /// <summary>
        /// Removes a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> RemoveCodeTemplateWithHttpInfo(string codeTemplateId)
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->RemoveCodeTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCodeTemplateAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveCodeTemplateWithHttpInfoAsync(codeTemplateId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> RemoveCodeTemplateWithHttpInfoAsync(string codeTemplateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->RemoveCodeTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        public bool UpdateCodeTemplate(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = UpdateCodeTemplateWithHttpInfo(codeTemplateId, codeTemplate, _override);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> UpdateCodeTemplateWithHttpInfo(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?))
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->UpdateCodeTemplate");
            }

            // verify the required parameter 'codeTemplate' is set
            if (codeTemplate == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplate' when calling CodeTemplatesApi->UpdateCodeTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter
            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = codeTemplate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateCodeTemplateAsync(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await UpdateCodeTemplateWithHttpInfoAsync(codeTemplateId, codeTemplate, _override, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single code template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateId">The ID of the code template.</param>
        /// <param name="codeTemplate">The CodeTemplate object to update with.</param>
        /// <param name="_override">If true, the code template will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> UpdateCodeTemplateWithHttpInfoAsync(string codeTemplateId, CodeTemplate codeTemplate, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'codeTemplateId' is set
            if (codeTemplateId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateId' when calling CodeTemplatesApi->UpdateCodeTemplate");
            }

            // verify the required parameter 'codeTemplate' is set
            if (codeTemplate == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplate' when calling CodeTemplatesApi->UpdateCodeTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("codeTemplateId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(codeTemplateId)); // path parameter
            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = codeTemplate;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/codeTemplates/{codeTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCodeTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replaces all code template libraries. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        public bool UpdateCodeTemplateLibraries(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = UpdateCodeTemplateLibrariesWithHttpInfo(codeTemplateLibrary, _override);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces all code template libraries. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> UpdateCodeTemplateLibrariesWithHttpInfo(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?))
        {
            // verify the required parameter 'codeTemplateLibrary' is set
            if (codeTemplateLibrary == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateLibrary' when calling CodeTemplatesApi->UpdateCodeTemplateLibraries");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = codeTemplateLibrary;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/codeTemplateLibraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCodeTemplateLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replaces all code template libraries. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateCodeTemplateLibrariesAsync(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await UpdateCodeTemplateLibrariesWithHttpInfoAsync(codeTemplateLibrary, _override, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces all code template libraries. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeTemplateLibrary">The list of code template libraries to replace with.</param>
        /// <param name="_override">If true, the code template library will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> UpdateCodeTemplateLibrariesWithHttpInfoAsync(List<CodeTemplateLibrary> codeTemplateLibrary, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'codeTemplateLibrary' is set
            if (codeTemplateLibrary == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'codeTemplateLibrary' when calling CodeTemplatesApi->UpdateCodeTemplateLibraries");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = codeTemplateLibrary;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/codeTemplateLibraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCodeTemplateLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <returns>CodeTemplateLibrarySaveResult</returns>
        public CodeTemplateLibrarySaveResult UpdateLibrariesAndTemplates(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrarySaveResult> localVarResponse = UpdateLibrariesAndTemplatesWithHttpInfo(_override, libraries, removedLibraryIds, updatedCodeTemplates, removedCodeTemplateIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <returns>ApiResponse of CodeTemplateLibrarySaveResult</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrarySaveResult> UpdateLibrariesAndTemplatesWithHttpInfo(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            if (libraries != null)
            {
                localVarRequestOptions.FormParameters.Add("libraries", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(libraries)); // form parameter
            }
            if (removedLibraryIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedLibraryIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedLibraryIds)); // form parameter
            }
            if (updatedCodeTemplates != null)
            {
                localVarRequestOptions.FormParameters.Add("updatedCodeTemplates", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(updatedCodeTemplates)); // form parameter
            }
            if (removedCodeTemplateIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedCodeTemplateIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedCodeTemplateIds)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CodeTemplateLibrarySaveResult>("/codeTemplateLibraries/_bulkUpdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLibrariesAndTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CodeTemplateLibrarySaveResult</returns>
        public async System.Threading.Tasks.Task<CodeTemplateLibrarySaveResult> UpdateLibrariesAndTemplatesAsync(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrarySaveResult> localVarResponse = await UpdateLibrariesAndTemplatesWithHttpInfoAsync(_override, libraries, removedLibraryIds, updatedCodeTemplates, removedCodeTemplateIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates all libraries and updates/removes selected code templates in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the libraries and code templates will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="libraries">The set of code template libraries to replace with. (optional)</param>
        /// <param name="removedLibraryIds">All library IDs known to be removed. (optional)</param>
        /// <param name="updatedCodeTemplates">The set of code templates to update. (optional)</param>
        /// <param name="removedCodeTemplateIds">All code template IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CodeTemplateLibrarySaveResult)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<CodeTemplateLibrarySaveResult>> UpdateLibrariesAndTemplatesWithHttpInfoAsync(bool? _override = default(bool?), List<CodeTemplateLibrary> libraries = default(List<CodeTemplateLibrary>), List<string> removedLibraryIds = default(List<string>), List<CodeTemplate> updatedCodeTemplates = default(List<CodeTemplate>), List<string> removedCodeTemplateIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            if (libraries != null)
            {
                localVarRequestOptions.FormParameters.Add("libraries", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(libraries)); // form parameter
            }
            if (removedLibraryIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedLibraryIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedLibraryIds)); // form parameter
            }
            if (updatedCodeTemplates != null)
            {
                localVarRequestOptions.FormParameters.Add("updatedCodeTemplates", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(updatedCodeTemplates)); // form parameter
            }
            if (removedCodeTemplateIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedCodeTemplateIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedCodeTemplateIds)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CodeTemplateLibrarySaveResult>("/codeTemplateLibraries/_bulkUpdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLibrariesAndTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
