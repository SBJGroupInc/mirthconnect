/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ServerLogItem
    /// </summary>
    [DataContract(Name = "ServerLogItem")]
    public partial class ServerLogItem : IEquatable<ServerLogItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerLogItem" /> class.
        /// </summary>
        /// <param name="serverId">serverId.</param>
        /// <param name="id">id.</param>
        /// <param name="level">level.</param>
        /// <param name="date">date.</param>
        /// <param name="threadName">threadName.</param>
        /// <param name="category">category.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="message">message.</param>
        /// <param name="throwableInformation">throwableInformation.</param>
        public ServerLogItem(string serverId = default(string), long id = default(long), string level = default(string), DateTime date = default(DateTime), string threadName = default(string), string category = default(string), string lineNumber = default(string), string message = default(string), string throwableInformation = default(string))
        {
            this.ServerId = serverId;
            this.Id = id;
            this.Level = level;
            this.Date = date;
            this.ThreadName = threadName;
            this.Category = category;
            this.LineNumber = lineNumber;
            this.Message = message;
            this.ThrowableInformation = throwableInformation;
        }

        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name = "serverId", EmitDefaultValue = false)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets ThreadName
        /// </summary>
        [DataMember(Name = "threadName", EmitDefaultValue = false)]
        public string ThreadName { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name = "lineNumber", EmitDefaultValue = false)]
        public string LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ThrowableInformation
        /// </summary>
        [DataMember(Name = "throwableInformation", EmitDefaultValue = false)]
        public string ThrowableInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerLogItem {\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ThreadName: ").Append(ThreadName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ThrowableInformation: ").Append(ThrowableInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerLogItem);
        }

        /// <summary>
        /// Returns true if ServerLogItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerLogItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerLogItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.ThreadName == input.ThreadName ||
                    (this.ThreadName != null &&
                    this.ThreadName.Equals(input.ThreadName))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ThrowableInformation == input.ThrowableInformation ||
                    (this.ThrowableInformation != null &&
                    this.ThrowableInformation.Equals(input.ThrowableInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServerId != null)
                {
                    hashCode = (hashCode * 59) + this.ServerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Level != null)
                {
                    hashCode = (hashCode * 59) + this.Level.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.ThreadName != null)
                {
                    hashCode = (hashCode * 59) + this.ThreadName.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.LineNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LineNumber.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.ThrowableInformation != null)
                {
                    hashCode = (hashCode * 59) + this.ThrowableInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
