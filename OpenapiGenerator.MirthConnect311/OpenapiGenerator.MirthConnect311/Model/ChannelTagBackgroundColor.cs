/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ChannelTagBackgroundColor
    /// </summary>
    [DataContract(Name = "ChannelTag_backgroundColor")]
    public partial class ChannelTagBackgroundColor : IEquatable<ChannelTagBackgroundColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelTagBackgroundColor" /> class.
        /// </summary>
        /// <param name="red">red.</param>
        /// <param name="green">green.</param>
        /// <param name="blue">blue.</param>
        /// <param name="alpha">alpha.</param>
        /// <param name="rgb">rgb.</param>
        /// <param name="colorSpace">colorSpace.</param>
        /// <param name="transparency">transparency.</param>
        public ChannelTagBackgroundColor(int red = default(int), int green = default(int), int blue = default(int), int alpha = default(int), int rgb = default(int), ChannelTagBackgroundColorColorSpace colorSpace = default(ChannelTagBackgroundColorColorSpace), int transparency = default(int))
        {
            this.Red = red;
            this.Green = green;
            this.Blue = blue;
            this.Alpha = alpha;
            this.Rgb = rgb;
            this.ColorSpace = colorSpace;
            this.Transparency = transparency;
        }

        /// <summary>
        /// Gets or Sets Red
        /// </summary>
        [DataMember(Name = "red", EmitDefaultValue = false)]
        public int Red { get; set; }

        /// <summary>
        /// Gets or Sets Green
        /// </summary>
        [DataMember(Name = "green", EmitDefaultValue = false)]
        public int Green { get; set; }

        /// <summary>
        /// Gets or Sets Blue
        /// </summary>
        [DataMember(Name = "blue", EmitDefaultValue = false)]
        public int Blue { get; set; }

        /// <summary>
        /// Gets or Sets Alpha
        /// </summary>
        [DataMember(Name = "alpha", EmitDefaultValue = false)]
        public int Alpha { get; set; }

        /// <summary>
        /// Gets or Sets Rgb
        /// </summary>
        [DataMember(Name = "rgb", EmitDefaultValue = false)]
        public int Rgb { get; set; }

        /// <summary>
        /// Gets or Sets ColorSpace
        /// </summary>
        [DataMember(Name = "colorSpace", EmitDefaultValue = false)]
        public ChannelTagBackgroundColorColorSpace ColorSpace { get; set; }

        /// <summary>
        /// Gets or Sets Transparency
        /// </summary>
        [DataMember(Name = "transparency", EmitDefaultValue = false)]
        public int Transparency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelTagBackgroundColor {\n");
            sb.Append("  Red: ").Append(Red).Append("\n");
            sb.Append("  Green: ").Append(Green).Append("\n");
            sb.Append("  Blue: ").Append(Blue).Append("\n");
            sb.Append("  Alpha: ").Append(Alpha).Append("\n");
            sb.Append("  Rgb: ").Append(Rgb).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  Transparency: ").Append(Transparency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelTagBackgroundColor);
        }

        /// <summary>
        /// Returns true if ChannelTagBackgroundColor instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelTagBackgroundColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelTagBackgroundColor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Red == input.Red ||
                    this.Red.Equals(input.Red)
                ) && 
                (
                    this.Green == input.Green ||
                    this.Green.Equals(input.Green)
                ) && 
                (
                    this.Blue == input.Blue ||
                    this.Blue.Equals(input.Blue)
                ) && 
                (
                    this.Alpha == input.Alpha ||
                    this.Alpha.Equals(input.Alpha)
                ) && 
                (
                    this.Rgb == input.Rgb ||
                    this.Rgb.Equals(input.Rgb)
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.Transparency == input.Transparency ||
                    this.Transparency.Equals(input.Transparency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Red.GetHashCode();
                hashCode = (hashCode * 59) + this.Green.GetHashCode();
                hashCode = (hashCode * 59) + this.Blue.GetHashCode();
                hashCode = (hashCode * 59) + this.Alpha.GetHashCode();
                hashCode = (hashCode * 59) + this.Rgb.GetHashCode();
                if (this.ColorSpace != null)
                {
                    hashCode = (hashCode * 59) + this.ColorSpace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Transparency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
