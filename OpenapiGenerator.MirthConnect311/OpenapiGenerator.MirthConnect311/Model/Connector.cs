/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// Connector
    /// </summary>
    [DataContract(Name = "Connector")]
    public partial class Connector : IEquatable<Connector>, IValidatableObject
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum SOURCE for value: SOURCE
            /// </summary>
            [EnumMember(Value = "SOURCE")]
            SOURCE = 1,

            /// <summary>
            /// Enum DESTINATION for value: DESTINATION
            /// </summary>
            [EnumMember(Value = "DESTINATION")]
            DESTINATION = 2

        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Connector" /> class.
        /// </summary>
        /// <param name="metaDataId">metaDataId.</param>
        /// <param name="name">name.</param>
        /// <param name="properties">properties.</param>
        /// <param name="transformer">transformer.</param>
        /// <param name="responseTransformer">responseTransformer.</param>
        /// <param name="filter">filter.</param>
        /// <param name="transportName">transportName.</param>
        /// <param name="mode">mode.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="waitForPrevious">waitForPrevious.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public Connector(int metaDataId = default(int), string name = default(string), ConnectorProperties properties = default(ConnectorProperties), Transformer transformer = default(Transformer), Transformer responseTransformer = default(Transformer), Filter filter = default(Filter), string transportName = default(string), ModeEnum? mode = default(ModeEnum?), bool enabled = default(bool), bool waitForPrevious = default(bool), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.MetaDataId = metaDataId;
            this.Name = name;
            this.Properties = properties;
            this.Transformer = transformer;
            this.ResponseTransformer = responseTransformer;
            this.Filter = filter;
            this.TransportName = transportName;
            this.Mode = mode;
            this.Enabled = enabled;
            this.WaitForPrevious = waitForPrevious;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets MetaDataId
        /// </summary>
        [DataMember(Name = "metaDataId", EmitDefaultValue = false)]
        public int MetaDataId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public ConnectorProperties Properties { get; set; }

        /// <summary>
        /// Gets or Sets Transformer
        /// </summary>
        [DataMember(Name = "transformer", EmitDefaultValue = false)]
        public Transformer Transformer { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTransformer
        /// </summary>
        [DataMember(Name = "responseTransformer", EmitDefaultValue = false)]
        public Transformer ResponseTransformer { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public Filter Filter { get; set; }

        /// <summary>
        /// Gets or Sets TransportName
        /// </summary>
        [DataMember(Name = "transportName", EmitDefaultValue = false)]
        public string TransportName { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets WaitForPrevious
        /// </summary>
        [DataMember(Name = "waitForPrevious", EmitDefaultValue = true)]
        public bool WaitForPrevious { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Connector {\n");
            sb.Append("  MetaDataId: ").Append(MetaDataId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Transformer: ").Append(Transformer).Append("\n");
            sb.Append("  ResponseTransformer: ").Append(ResponseTransformer).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  TransportName: ").Append(TransportName).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  WaitForPrevious: ").Append(WaitForPrevious).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Connector);
        }

        /// <summary>
        /// Returns true if Connector instances are equal
        /// </summary>
        /// <param name="input">Instance of Connector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Connector input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MetaDataId == input.MetaDataId ||
                    this.MetaDataId.Equals(input.MetaDataId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.Transformer == input.Transformer ||
                    (this.Transformer != null &&
                    this.Transformer.Equals(input.Transformer))
                ) && 
                (
                    this.ResponseTransformer == input.ResponseTransformer ||
                    (this.ResponseTransformer != null &&
                    this.ResponseTransformer.Equals(input.ResponseTransformer))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.TransportName == input.TransportName ||
                    (this.TransportName != null &&
                    this.TransportName.Equals(input.TransportName))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.WaitForPrevious == input.WaitForPrevious ||
                    this.WaitForPrevious.Equals(input.WaitForPrevious)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MetaDataId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Transformer != null)
                {
                    hashCode = (hashCode * 59) + this.Transformer.GetHashCode();
                }
                if (this.ResponseTransformer != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTransformer.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.TransportName != null)
                {
                    hashCode = (hashCode * 59) + this.TransportName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitForPrevious.GetHashCode();
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
