/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ChannelTagBackgroundColorColorSpace
    /// </summary>
    [DataContract(Name = "ChannelTag_backgroundColor_colorSpace")]
    public partial class ChannelTagBackgroundColorColorSpace : IEquatable<ChannelTagBackgroundColorColorSpace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelTagBackgroundColorColorSpace" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="numComponents">numComponents.</param>
        /// <param name="csSRGB">csSRGB.</param>
        public ChannelTagBackgroundColorColorSpace(int type = default(int), int numComponents = default(int), bool csSRGB = default(bool))
        {
            this.Type = type;
            this.NumComponents = numComponents;
            this.CsSRGB = csSRGB;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets NumComponents
        /// </summary>
        [DataMember(Name = "numComponents", EmitDefaultValue = false)]
        public int NumComponents { get; set; }

        /// <summary>
        /// Gets or Sets CsSRGB
        /// </summary>
        [DataMember(Name = "cs_sRGB", EmitDefaultValue = true)]
        public bool CsSRGB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelTagBackgroundColorColorSpace {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NumComponents: ").Append(NumComponents).Append("\n");
            sb.Append("  CsSRGB: ").Append(CsSRGB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelTagBackgroundColorColorSpace);
        }

        /// <summary>
        /// Returns true if ChannelTagBackgroundColorColorSpace instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelTagBackgroundColorColorSpace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelTagBackgroundColorColorSpace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.NumComponents == input.NumComponents ||
                    this.NumComponents.Equals(input.NumComponents)
                ) && 
                (
                    this.CsSRGB == input.CsSRGB ||
                    this.CsSRGB.Equals(input.CsSRGB)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.NumComponents.GetHashCode();
                hashCode = (hashCode * 59) + this.CsSRGB.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
