/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ServerSettings
    /// </summary>
    [DataContract(Name = "ServerSettings")]
    public partial class ServerSettings : IEquatable<ServerSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSettings" /> class.
        /// </summary>
        /// <param name="environmentName">environmentName.</param>
        /// <param name="serverName">serverName.</param>
        /// <param name="clearGlobalMap">clearGlobalMap.</param>
        /// <param name="queueBufferSize">queueBufferSize.</param>
        /// <param name="defaultMetaDataColumns">defaultMetaDataColumns.</param>
        /// <param name="defaultAdministratorBackgroundColor">defaultAdministratorBackgroundColor.</param>
        /// <param name="smtpHost">smtpHost.</param>
        /// <param name="smtpPort">smtpPort.</param>
        /// <param name="smtpTimeout">smtpTimeout.</param>
        /// <param name="smtpFrom">smtpFrom.</param>
        /// <param name="smtpSecure">smtpSecure.</param>
        /// <param name="smtpAuth">smtpAuth.</param>
        /// <param name="smtpUsername">smtpUsername.</param>
        /// <param name="smtpPassword">smtpPassword.</param>
        /// <param name="properties">properties.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public ServerSettings(string environmentName = default(string), string serverName = default(string), bool clearGlobalMap = default(bool), int queueBufferSize = default(int), List<MetaDataColumn> defaultMetaDataColumns = default(List<MetaDataColumn>), ChannelTagBackgroundColor defaultAdministratorBackgroundColor = default(ChannelTagBackgroundColor), string smtpHost = default(string), string smtpPort = default(string), string smtpTimeout = default(string), string smtpFrom = default(string), string smtpSecure = default(string), bool smtpAuth = default(bool), string smtpUsername = default(string), string smtpPassword = default(string), Dictionary<string, string> properties = default(Dictionary<string, string>), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.EnvironmentName = environmentName;
            this.ServerName = serverName;
            this.ClearGlobalMap = clearGlobalMap;
            this.QueueBufferSize = queueBufferSize;
            this.DefaultMetaDataColumns = defaultMetaDataColumns;
            this.DefaultAdministratorBackgroundColor = defaultAdministratorBackgroundColor;
            this.SmtpHost = smtpHost;
            this.SmtpPort = smtpPort;
            this.SmtpTimeout = smtpTimeout;
            this.SmtpFrom = smtpFrom;
            this.SmtpSecure = smtpSecure;
            this.SmtpAuth = smtpAuth;
            this.SmtpUsername = smtpUsername;
            this.SmtpPassword = smtpPassword;
            this.Properties = properties;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets EnvironmentName
        /// </summary>
        [DataMember(Name = "environmentName", EmitDefaultValue = false)]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// Gets or Sets ServerName
        /// </summary>
        [DataMember(Name = "serverName", EmitDefaultValue = false)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or Sets ClearGlobalMap
        /// </summary>
        [DataMember(Name = "clearGlobalMap", EmitDefaultValue = true)]
        public bool ClearGlobalMap { get; set; }

        /// <summary>
        /// Gets or Sets QueueBufferSize
        /// </summary>
        [DataMember(Name = "queueBufferSize", EmitDefaultValue = false)]
        public int QueueBufferSize { get; set; }

        /// <summary>
        /// Gets or Sets DefaultMetaDataColumns
        /// </summary>
        [DataMember(Name = "defaultMetaDataColumns", EmitDefaultValue = false)]
        public List<MetaDataColumn> DefaultMetaDataColumns { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAdministratorBackgroundColor
        /// </summary>
        [DataMember(Name = "defaultAdministratorBackgroundColor", EmitDefaultValue = false)]
        public ChannelTagBackgroundColor DefaultAdministratorBackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [DataMember(Name = "smtpHost", EmitDefaultValue = false)]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name = "smtpPort", EmitDefaultValue = false)]
        public string SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpTimeout
        /// </summary>
        [DataMember(Name = "smtpTimeout", EmitDefaultValue = false)]
        public string SmtpTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SmtpFrom
        /// </summary>
        [DataMember(Name = "smtpFrom", EmitDefaultValue = false)]
        public string SmtpFrom { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSecure
        /// </summary>
        [DataMember(Name = "smtpSecure", EmitDefaultValue = false)]
        public string SmtpSecure { get; set; }

        /// <summary>
        /// Gets or Sets SmtpAuth
        /// </summary>
        [DataMember(Name = "smtpAuth", EmitDefaultValue = true)]
        public bool SmtpAuth { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name = "smtpUsername", EmitDefaultValue = false)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name = "smtpPassword", EmitDefaultValue = false)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerSettings {\n");
            sb.Append("  EnvironmentName: ").Append(EnvironmentName).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  ClearGlobalMap: ").Append(ClearGlobalMap).Append("\n");
            sb.Append("  QueueBufferSize: ").Append(QueueBufferSize).Append("\n");
            sb.Append("  DefaultMetaDataColumns: ").Append(DefaultMetaDataColumns).Append("\n");
            sb.Append("  DefaultAdministratorBackgroundColor: ").Append(DefaultAdministratorBackgroundColor).Append("\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpTimeout: ").Append(SmtpTimeout).Append("\n");
            sb.Append("  SmtpFrom: ").Append(SmtpFrom).Append("\n");
            sb.Append("  SmtpSecure: ").Append(SmtpSecure).Append("\n");
            sb.Append("  SmtpAuth: ").Append(SmtpAuth).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerSettings);
        }

        /// <summary>
        /// Returns true if ServerSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnvironmentName == input.EnvironmentName ||
                    (this.EnvironmentName != null &&
                    this.EnvironmentName.Equals(input.EnvironmentName))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.ClearGlobalMap == input.ClearGlobalMap ||
                    this.ClearGlobalMap.Equals(input.ClearGlobalMap)
                ) && 
                (
                    this.QueueBufferSize == input.QueueBufferSize ||
                    this.QueueBufferSize.Equals(input.QueueBufferSize)
                ) && 
                (
                    this.DefaultMetaDataColumns == input.DefaultMetaDataColumns ||
                    this.DefaultMetaDataColumns != null &&
                    input.DefaultMetaDataColumns != null &&
                    this.DefaultMetaDataColumns.SequenceEqual(input.DefaultMetaDataColumns)
                ) && 
                (
                    this.DefaultAdministratorBackgroundColor == input.DefaultAdministratorBackgroundColor ||
                    (this.DefaultAdministratorBackgroundColor != null &&
                    this.DefaultAdministratorBackgroundColor.Equals(input.DefaultAdministratorBackgroundColor))
                ) && 
                (
                    this.SmtpHost == input.SmtpHost ||
                    (this.SmtpHost != null &&
                    this.SmtpHost.Equals(input.SmtpHost))
                ) && 
                (
                    this.SmtpPort == input.SmtpPort ||
                    (this.SmtpPort != null &&
                    this.SmtpPort.Equals(input.SmtpPort))
                ) && 
                (
                    this.SmtpTimeout == input.SmtpTimeout ||
                    (this.SmtpTimeout != null &&
                    this.SmtpTimeout.Equals(input.SmtpTimeout))
                ) && 
                (
                    this.SmtpFrom == input.SmtpFrom ||
                    (this.SmtpFrom != null &&
                    this.SmtpFrom.Equals(input.SmtpFrom))
                ) && 
                (
                    this.SmtpSecure == input.SmtpSecure ||
                    (this.SmtpSecure != null &&
                    this.SmtpSecure.Equals(input.SmtpSecure))
                ) && 
                (
                    this.SmtpAuth == input.SmtpAuth ||
                    this.SmtpAuth.Equals(input.SmtpAuth)
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnvironmentName != null)
                {
                    hashCode = (hashCode * 59) + this.EnvironmentName.GetHashCode();
                }
                if (this.ServerName != null)
                {
                    hashCode = (hashCode * 59) + this.ServerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClearGlobalMap.GetHashCode();
                hashCode = (hashCode * 59) + this.QueueBufferSize.GetHashCode();
                if (this.DefaultMetaDataColumns != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultMetaDataColumns.GetHashCode();
                }
                if (this.DefaultAdministratorBackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAdministratorBackgroundColor.GetHashCode();
                }
                if (this.SmtpHost != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpHost.GetHashCode();
                }
                if (this.SmtpPort != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpPort.GetHashCode();
                }
                if (this.SmtpTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpTimeout.GetHashCode();
                }
                if (this.SmtpFrom != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpFrom.GetHashCode();
                }
                if (this.SmtpSecure != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpSecure.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmtpAuth.GetHashCode();
                if (this.SmtpUsername != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpUsername.GetHashCode();
                }
                if (this.SmtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpPassword.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
