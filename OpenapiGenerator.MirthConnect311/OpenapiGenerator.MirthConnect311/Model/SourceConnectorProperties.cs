/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// SourceConnectorProperties
    /// </summary>
    [DataContract(Name = "SourceConnectorProperties")]
    public partial class SourceConnectorProperties : IEquatable<SourceConnectorProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceConnectorProperties" /> class.
        /// </summary>
        /// <param name="responseVariable">responseVariable.</param>
        /// <param name="respondAfterProcessing">respondAfterProcessing.</param>
        /// <param name="processBatch">processBatch.</param>
        /// <param name="firstResponse">firstResponse.</param>
        /// <param name="processingThreads">processingThreads.</param>
        /// <param name="resourceIds">resourceIds.</param>
        /// <param name="queueBufferSize">queueBufferSize.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public SourceConnectorProperties(string responseVariable = default(string), bool respondAfterProcessing = default(bool), bool processBatch = default(bool), bool firstResponse = default(bool), int processingThreads = default(int), Dictionary<string, string> resourceIds = default(Dictionary<string, string>), int queueBufferSize = default(int), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.ResponseVariable = responseVariable;
            this.RespondAfterProcessing = respondAfterProcessing;
            this.ProcessBatch = processBatch;
            this.FirstResponse = firstResponse;
            this.ProcessingThreads = processingThreads;
            this.ResourceIds = resourceIds;
            this.QueueBufferSize = queueBufferSize;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets ResponseVariable
        /// </summary>
        [DataMember(Name = "responseVariable", EmitDefaultValue = false)]
        public string ResponseVariable { get; set; }

        /// <summary>
        /// Gets or Sets RespondAfterProcessing
        /// </summary>
        [DataMember(Name = "respondAfterProcessing", EmitDefaultValue = true)]
        public bool RespondAfterProcessing { get; set; }

        /// <summary>
        /// Gets or Sets ProcessBatch
        /// </summary>
        [DataMember(Name = "processBatch", EmitDefaultValue = true)]
        public bool ProcessBatch { get; set; }

        /// <summary>
        /// Gets or Sets FirstResponse
        /// </summary>
        [DataMember(Name = "firstResponse", EmitDefaultValue = true)]
        public bool FirstResponse { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingThreads
        /// </summary>
        [DataMember(Name = "processingThreads", EmitDefaultValue = false)]
        public int ProcessingThreads { get; set; }

        /// <summary>
        /// Gets or Sets ResourceIds
        /// </summary>
        [DataMember(Name = "resourceIds", EmitDefaultValue = false)]
        public Dictionary<string, string> ResourceIds { get; set; }

        /// <summary>
        /// Gets or Sets QueueBufferSize
        /// </summary>
        [DataMember(Name = "queueBufferSize", EmitDefaultValue = false)]
        public int QueueBufferSize { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceConnectorProperties {\n");
            sb.Append("  ResponseVariable: ").Append(ResponseVariable).Append("\n");
            sb.Append("  RespondAfterProcessing: ").Append(RespondAfterProcessing).Append("\n");
            sb.Append("  ProcessBatch: ").Append(ProcessBatch).Append("\n");
            sb.Append("  FirstResponse: ").Append(FirstResponse).Append("\n");
            sb.Append("  ProcessingThreads: ").Append(ProcessingThreads).Append("\n");
            sb.Append("  ResourceIds: ").Append(ResourceIds).Append("\n");
            sb.Append("  QueueBufferSize: ").Append(QueueBufferSize).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceConnectorProperties);
        }

        /// <summary>
        /// Returns true if SourceConnectorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceConnectorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceConnectorProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResponseVariable == input.ResponseVariable ||
                    (this.ResponseVariable != null &&
                    this.ResponseVariable.Equals(input.ResponseVariable))
                ) && 
                (
                    this.RespondAfterProcessing == input.RespondAfterProcessing ||
                    this.RespondAfterProcessing.Equals(input.RespondAfterProcessing)
                ) && 
                (
                    this.ProcessBatch == input.ProcessBatch ||
                    this.ProcessBatch.Equals(input.ProcessBatch)
                ) && 
                (
                    this.FirstResponse == input.FirstResponse ||
                    this.FirstResponse.Equals(input.FirstResponse)
                ) && 
                (
                    this.ProcessingThreads == input.ProcessingThreads ||
                    this.ProcessingThreads.Equals(input.ProcessingThreads)
                ) && 
                (
                    this.ResourceIds == input.ResourceIds ||
                    this.ResourceIds != null &&
                    input.ResourceIds != null &&
                    this.ResourceIds.SequenceEqual(input.ResourceIds)
                ) && 
                (
                    this.QueueBufferSize == input.QueueBufferSize ||
                    this.QueueBufferSize.Equals(input.QueueBufferSize)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseVariable != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseVariable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RespondAfterProcessing.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessBatch.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstResponse.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessingThreads.GetHashCode();
                if (this.ResourceIds != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueBufferSize.GetHashCode();
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
