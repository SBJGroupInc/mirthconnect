/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Checks the password against the configured password policies.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> CheckUserPassword(string body);

        /// <summary>
        /// Checks the password against the configured password policies.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CheckUserPasswordWithHttpInfo(string body);
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <returns></returns>
        void CreateUser(User user);

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUserWithHttpInfo(User user);
        /// <summary>
        /// Returns a List of all users.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetAllUsers();

        /// <summary>
        /// Returns a List of all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetAllUsersWithHttpInfo();
        /// <summary>
        /// Returns the current logged in user.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetCurrentUser();

        /// <summary>
        /// Returns the current logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetCurrentUserWithHttpInfo();
        /// <summary>
        /// Returns a specific user by ID or username.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <returns>User</returns>
        User GetUser(string userIdOrName);

        /// <summary>
        /// Returns a specific user by ID or username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(string userIdOrName);
        /// <summary>
        /// Returns a specific user preference.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <returns>string</returns>
        string GetUserPreference(int userId, string name);

        /// <summary>
        /// Returns a specific user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetUserPreferenceWithHttpInfo(int userId, string name);
        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <returns>string</returns>
        string GetUserPreferences(int userId, List<string> name = default(List<string>));

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetUserPreferencesWithHttpInfo(int userId, List<string> name = default(List<string>));
        /// <summary>
        /// Returns a true if the specified user is logged in to the server.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <returns>bool</returns>
        bool IsUserLoggedIn(int userId);

        /// <summary>
        /// Returns a true if the specified user is logged in to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> IsUserLoggedInWithHttpInfo(int userId);
        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>LoginStatus</returns>
        LoginStatus Login(string username, string password);

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of LoginStatus</returns>
        ApiResponse<LoginStatus> LoginWithHttpInfo(string username, string password);
        /// <summary>
        /// Logs out of the server.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Logout();

        /// <summary>
        /// Logs out of the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo();
        /// <summary>
        /// Removes a specific user.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <returns></returns>
        void RemoveUser(int userId);

        /// <summary>
        /// Removes a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserWithHttpInfo(int userId);
        /// <summary>
        /// Updates a user preference.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <returns></returns>
        void SetUserPreference(int userId, string name, string body);

        /// <summary>
        /// Updates a user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserPreferenceWithHttpInfo(int userId, string name, string body);
        /// <summary>
        /// Updates multiple user preferences.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <returns></returns>
        void SetUserPreferences(int userId, string body);

        /// <summary>
        /// Updates multiple user preferences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserPreferencesWithHttpInfo(int userId, string body);
        /// <summary>
        /// Updates a specified user.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <returns></returns>
        void UpdateUser(int userId, User user);

        /// <summary>
        /// Updates a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserWithHttpInfo(int userId, User user);
        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UpdateUserPassword(int userId, string body);

        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UpdateUserPasswordWithHttpInfo(int userId, string body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Checks the password against the configured password policies.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CheckUserPasswordAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checks the password against the configured password policies.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CheckUserPasswordWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserWithHttpInfoAsync(User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a List of all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetAllUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a List of all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetAllUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a specific user by ID or username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(string userIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a specific user by ID or username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(string userIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a specific user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetUserPreferenceAsync(int userId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a specific user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetUserPreferenceWithHttpInfoAsync(int userId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetUserPreferencesAsync(int userId, List<string> name = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetUserPreferencesWithHttpInfoAsync(int userId, List<string> name = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a true if the specified user is logged in to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> IsUserLoggedInAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a true if the specified user is logged in to the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> IsUserLoggedInWithHttpInfoAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginStatus</returns>
        System.Threading.Tasks.Task<LoginStatus> LoginAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginStatus>> LoginWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs out of the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs out of the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a specific user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserWithHttpInfoAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetUserPreferenceAsync(int userId, string name, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a user preference.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetUserPreferenceWithHttpInfoAsync(int userId, string name, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates multiple user preferences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetUserPreferencesAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates multiple user preferences.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetUserPreferencesWithHttpInfoAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserAsync(int userId, User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserWithHttpInfoAsync(int userId, User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UpdateUserPasswordAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UpdateUserPasswordWithHttpInfoAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Checks the password against the configured password policies. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> CheckUserPassword(string body)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = CheckUserPasswordWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks the password against the configured password policies. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> CheckUserPasswordWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->CheckUserPassword");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<string>>("/users/_checkPassword", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUserPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checks the password against the configured password policies. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CheckUserPasswordAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = await CheckUserPasswordWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Checks the password against the configured password policies. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The plaintext password to check.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>>> CheckUserPasswordWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->CheckUserPassword");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/users/_checkPassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckUserPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <returns></returns>
        public void CreateUser(User user)
        {
            CreateUserWithHttpInfo(user);
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> CreateUserWithHttpInfo(User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->CreateUser");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = user;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateUserWithHttpInfoAsync(user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a new user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">The User object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> CreateUserWithHttpInfoAsync(User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->CreateUser");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = user;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a List of all users. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetAllUsers()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<User>> localVarResponse = GetAllUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a List of all users. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<User>> GetAllUsersWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a List of all users. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetAllUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<User>> localVarResponse = await GetAllUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a List of all users. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<User>>> GetAllUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current logged in user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetCurrentUser()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> localVarResponse = GetCurrentUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current logged in user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> GetCurrentUserWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current logged in user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetCurrentUserAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> localVarResponse = await GetCurrentUserWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current logged in user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<User>> GetCurrentUserWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a specific user by ID or username. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <returns>User</returns>
        public User GetUser(string userIdOrName)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userIdOrName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific user by ID or username. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <returns>ApiResponse of User</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> GetUserWithHttpInfo(string userIdOrName)
        {
            // verify the required parameter 'userIdOrName' is set
            if (userIdOrName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'userIdOrName' when calling UsersApi->GetUser");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userIdOrName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userIdOrName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{userIdOrName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a specific user by ID or username. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(string userIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(userIdOrName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific user by ID or username. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIdOrName">The unique ID or username of the user to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(string userIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userIdOrName' is set
            if (userIdOrName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'userIdOrName' when calling UsersApi->GetUser");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userIdOrName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userIdOrName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{userIdOrName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a specific user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <returns>string</returns>
        public string GetUserPreference(int userId, string name)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = GetUserPreferenceWithHttpInfo(userId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> GetUserPreferenceWithHttpInfo(int userId, string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserPreference");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/users/{userId}/preferences/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a specific user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetUserPreferenceAsync(int userId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await GetUserPreferenceWithHttpInfoAsync(userId, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> GetUserPreferenceWithHttpInfoAsync(int userId, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserPreference");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/users/{userId}/preferences/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <returns>string</returns>
        public string GetUserPreferences(int userId, List<string> name = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = GetUserPreferencesWithHttpInfo(userId, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> GetUserPreferencesWithHttpInfo(int userId, List<string> name = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/users/{userId}/preferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetUserPreferencesAsync(int userId, List<string> name = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await GetUserPreferencesWithHttpInfoAsync(userId, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a Map of user preferences, optionally filtered by a set of property names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">An optional set of property names to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> GetUserPreferencesWithHttpInfoAsync(int userId, List<string> name = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/users/{userId}/preferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a true if the specified user is logged in to the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <returns>bool</returns>
        public bool IsUserLoggedIn(int userId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = IsUserLoggedInWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a true if the specified user is logged in to the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> IsUserLoggedInWithHttpInfo(int userId)
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/users/{userId}/loggedIn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserLoggedIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a true if the specified user is logged in to the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> IsUserLoggedInAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await IsUserLoggedInWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a true if the specified user is logged in to the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> IsUserLoggedInWithHttpInfoAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/users/{userId}/loggedIn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserLoggedIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>LoginStatus</returns>
        public LoginStatus Login(string username, string password)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<LoginStatus> localVarResponse = LoginWithHttpInfo(username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of LoginStatus</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<LoginStatus> LoginWithHttpInfo(string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->Login");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'password' when calling UsersApi->Login");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginStatus>("/users/_login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginStatus</returns>
        public async System.Threading.Tasks.Task<LoginStatus> LoginAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<LoginStatus> localVarResponse = await LoginWithHttpInfoAsync(username, password, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs in to the Mirth Connect server using the specified name and password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginStatus)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<LoginStatus>> LoginWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'username' when calling UsersApi->Login");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'password' when calling UsersApi->Login");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginStatus>("/users/_login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs out of the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Logout()
        {
            LogoutWithHttpInfo();
        }

        /// <summary>
        /// Logs out of the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> LogoutWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users/_logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs out of the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LogoutWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Logs out of the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> LogoutWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users/_logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a specific user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <returns></returns>
        public void RemoveUser(int userId)
        {
            RemoveUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Removes a specific user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> RemoveUserWithHttpInfo(int userId)
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a specific user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes a specific user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> RemoveUserWithHttpInfoAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <returns></returns>
        public void SetUserPreference(int userId, string name, string body)
        {
            SetUserPreferenceWithHttpInfo(userId, name, body);
        }

        /// <summary>
        /// Updates a user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetUserPreferenceWithHttpInfo(int userId, string name, string body)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->SetUserPreference");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->SetUserPreference");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{userId}/preferences/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetUserPreferenceAsync(int userId, string name, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetUserPreferenceWithHttpInfoAsync(userId, name, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a user preference. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="name">The name of the user property to update.</param>
        /// <param name="body">The value to update the property with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetUserPreferenceWithHttpInfoAsync(int userId, string name, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->SetUserPreference");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->SetUserPreference");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{userId}/preferences/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPreference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates multiple user preferences. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <returns></returns>
        public void SetUserPreferences(int userId, string body)
        {
            SetUserPreferencesWithHttpInfo(userId, body);
        }

        /// <summary>
        /// Updates multiple user preferences. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetUserPreferencesWithHttpInfo(int userId, string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->SetUserPreferences");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{userId}/preferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates multiple user preferences. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetUserPreferencesAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetUserPreferencesWithHttpInfoAsync(userId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates multiple user preferences. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user.</param>
        /// <param name="body">The properties to update for the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetUserPreferencesWithHttpInfoAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->SetUserPreferences");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{userId}/preferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specified user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <returns></returns>
        public void UpdateUser(int userId, User user)
        {
            UpdateUserWithHttpInfo(userId, user);
        }

        /// <summary>
        /// Updates a specified user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> UpdateUserWithHttpInfo(int userId, User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->UpdateUser");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specified user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserAsync(int userId, User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateUserWithHttpInfoAsync(userId, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a specified user. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update.</param>
        /// <param name="user">The User object to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> UpdateUserWithHttpInfoAsync(int userId, User user, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->UpdateUser");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UpdateUserPassword(int userId, string body)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = UpdateUserPasswordWithHttpInfo(userId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> UpdateUserPasswordWithHttpInfo(int userId, string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->UpdateUserPassword");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<string>>("/users/{userId}/password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UpdateUserPasswordAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = await UpdateUserPasswordWithHttpInfoAsync(userId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user&#39;s password. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The unique ID of the user to update the password for.</param>
        /// <param name="body">The plaintext password to update with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>>> UpdateUserPasswordWithHttpInfoAsync(int userId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling UsersApi->UpdateUserPassword");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<string>>("/users/{userId}/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
