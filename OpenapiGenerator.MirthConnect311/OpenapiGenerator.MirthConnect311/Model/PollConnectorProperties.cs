/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// PollConnectorProperties
    /// </summary>
    [DataContract(Name = "PollConnectorProperties")]
    public partial class PollConnectorProperties : IEquatable<PollConnectorProperties>, IValidatableObject
    {
        /// <summary>
        /// Defines PollingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PollingTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVAL = 1,

            /// <summary>
            /// Enum TIME for value: TIME
            /// </summary>
            [EnumMember(Value = "TIME")]
            TIME = 2,

            /// <summary>
            /// Enum CRON for value: CRON
            /// </summary>
            [EnumMember(Value = "CRON")]
            CRON = 3

        }


        /// <summary>
        /// Gets or Sets PollingType
        /// </summary>
        [DataMember(Name = "pollingType", EmitDefaultValue = false)]
        public PollingTypeEnum? PollingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PollConnectorProperties" /> class.
        /// </summary>
        /// <param name="pollingType">pollingType.</param>
        /// <param name="pollOnStart">pollOnStart.</param>
        /// <param name="pollingFrequency">pollingFrequency.</param>
        /// <param name="pollingHour">pollingHour.</param>
        /// <param name="pollingMinute">pollingMinute.</param>
        /// <param name="cronJobs">cronJobs.</param>
        /// <param name="pollConnectorPropertiesAdvanced">pollConnectorPropertiesAdvanced.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public PollConnectorProperties(PollingTypeEnum? pollingType = default(PollingTypeEnum?), bool pollOnStart = default(bool), int pollingFrequency = default(int), int pollingHour = default(int), int pollingMinute = default(int), List<CronProperty> cronJobs = default(List<CronProperty>), PollConnectorPropertiesAdvanced pollConnectorPropertiesAdvanced = default(PollConnectorPropertiesAdvanced), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.PollingType = pollingType;
            this.PollOnStart = pollOnStart;
            this.PollingFrequency = pollingFrequency;
            this.PollingHour = pollingHour;
            this.PollingMinute = pollingMinute;
            this.CronJobs = cronJobs;
            this.PollConnectorPropertiesAdvanced = pollConnectorPropertiesAdvanced;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets PollOnStart
        /// </summary>
        [DataMember(Name = "pollOnStart", EmitDefaultValue = true)]
        public bool PollOnStart { get; set; }

        /// <summary>
        /// Gets or Sets PollingFrequency
        /// </summary>
        [DataMember(Name = "pollingFrequency", EmitDefaultValue = false)]
        public int PollingFrequency { get; set; }

        /// <summary>
        /// Gets or Sets PollingHour
        /// </summary>
        [DataMember(Name = "pollingHour", EmitDefaultValue = false)]
        public int PollingHour { get; set; }

        /// <summary>
        /// Gets or Sets PollingMinute
        /// </summary>
        [DataMember(Name = "pollingMinute", EmitDefaultValue = false)]
        public int PollingMinute { get; set; }

        /// <summary>
        /// Gets or Sets CronJobs
        /// </summary>
        [DataMember(Name = "cronJobs", EmitDefaultValue = false)]
        public List<CronProperty> CronJobs { get; set; }

        /// <summary>
        /// Gets or Sets PollConnectorPropertiesAdvanced
        /// </summary>
        [DataMember(Name = "pollConnectorPropertiesAdvanced", EmitDefaultValue = false)]
        public PollConnectorPropertiesAdvanced PollConnectorPropertiesAdvanced { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PollConnectorProperties {\n");
            sb.Append("  PollingType: ").Append(PollingType).Append("\n");
            sb.Append("  PollOnStart: ").Append(PollOnStart).Append("\n");
            sb.Append("  PollingFrequency: ").Append(PollingFrequency).Append("\n");
            sb.Append("  PollingHour: ").Append(PollingHour).Append("\n");
            sb.Append("  PollingMinute: ").Append(PollingMinute).Append("\n");
            sb.Append("  CronJobs: ").Append(CronJobs).Append("\n");
            sb.Append("  PollConnectorPropertiesAdvanced: ").Append(PollConnectorPropertiesAdvanced).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PollConnectorProperties);
        }

        /// <summary>
        /// Returns true if PollConnectorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of PollConnectorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PollConnectorProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PollingType == input.PollingType ||
                    this.PollingType.Equals(input.PollingType)
                ) && 
                (
                    this.PollOnStart == input.PollOnStart ||
                    this.PollOnStart.Equals(input.PollOnStart)
                ) && 
                (
                    this.PollingFrequency == input.PollingFrequency ||
                    this.PollingFrequency.Equals(input.PollingFrequency)
                ) && 
                (
                    this.PollingHour == input.PollingHour ||
                    this.PollingHour.Equals(input.PollingHour)
                ) && 
                (
                    this.PollingMinute == input.PollingMinute ||
                    this.PollingMinute.Equals(input.PollingMinute)
                ) && 
                (
                    this.CronJobs == input.CronJobs ||
                    this.CronJobs != null &&
                    input.CronJobs != null &&
                    this.CronJobs.SequenceEqual(input.CronJobs)
                ) && 
                (
                    this.PollConnectorPropertiesAdvanced == input.PollConnectorPropertiesAdvanced ||
                    (this.PollConnectorPropertiesAdvanced != null &&
                    this.PollConnectorPropertiesAdvanced.Equals(input.PollConnectorPropertiesAdvanced))
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PollingType.GetHashCode();
                hashCode = (hashCode * 59) + this.PollOnStart.GetHashCode();
                hashCode = (hashCode * 59) + this.PollingFrequency.GetHashCode();
                hashCode = (hashCode * 59) + this.PollingHour.GetHashCode();
                hashCode = (hashCode * 59) + this.PollingMinute.GetHashCode();
                if (this.CronJobs != null)
                {
                    hashCode = (hashCode * 59) + this.CronJobs.GetHashCode();
                }
                if (this.PollConnectorPropertiesAdvanced != null)
                {
                    hashCode = (hashCode * 59) + this.PollConnectorPropertiesAdvanced.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
