/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// WebServiceDispatcherProperties
    /// </summary>
    [DataContract(Name = "WebServiceDispatcherProperties")]
    public partial class WebServiceDispatcherProperties : IEquatable<WebServiceDispatcherProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebServiceDispatcherProperties" /> class.
        /// </summary>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="destinationConnectorProperties">destinationConnectorProperties.</param>
        /// <param name="wsdlUrl">wsdlUrl.</param>
        /// <param name="service">service.</param>
        /// <param name="port">port.</param>
        /// <param name="operation">operation.</param>
        /// <param name="locationURI">locationURI.</param>
        /// <param name="socketTimeout">socketTimeout.</param>
        /// <param name="useAuthentication">useAuthentication.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="envelope">envelope.</param>
        /// <param name="oneWay">oneWay.</param>
        /// <param name="headersVariable">headersVariable.</param>
        /// <param name="useMtom">useMtom.</param>
        /// <param name="attachmentNames">attachmentNames.</param>
        /// <param name="attachmentContents">attachmentContents.</param>
        /// <param name="attachmentTypes">attachmentTypes.</param>
        /// <param name="attachmentsVariable">attachmentsVariable.</param>
        /// <param name="soapAction">soapAction.</param>
        /// <param name="wsdlDefinitionMap">wsdlDefinitionMap.</param>
        /// <param name="name">name.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        /// <param name="useHeadersVariable">useHeadersVariable.</param>
        /// <param name="useAttachmentsVariable">useAttachmentsVariable.</param>
        /// <param name="headersMap">headersMap.</param>
        public WebServiceDispatcherProperties(List<ConnectorPluginProperties> pluginProperties = default(List<ConnectorPluginProperties>), DestinationConnectorProperties destinationConnectorProperties = default(DestinationConnectorProperties), string wsdlUrl = default(string), string service = default(string), string port = default(string), string operation = default(string), string locationURI = default(string), string socketTimeout = default(string), bool useAuthentication = default(bool), string username = default(string), string password = default(string), string envelope = default(string), bool oneWay = default(bool), string headersVariable = default(string), bool useMtom = default(bool), List<string> attachmentNames = default(List<string>), List<string> attachmentContents = default(List<string>), List<string> attachmentTypes = default(List<string>), string attachmentsVariable = default(string), string soapAction = default(string), DefinitionServiceMap wsdlDefinitionMap = default(DefinitionServiceMap), string name = default(string), string protocol = default(string), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>), bool useHeadersVariable = default(bool), bool useAttachmentsVariable = default(bool), Dictionary<string, List<string>> headersMap = default(Dictionary<string, List<string>>))
        {
            this.PluginProperties = pluginProperties;
            this.DestinationConnectorProperties = destinationConnectorProperties;
            this.WsdlUrl = wsdlUrl;
            this.Service = service;
            this.Port = port;
            this.Operation = operation;
            this.LocationURI = locationURI;
            this.SocketTimeout = socketTimeout;
            this.UseAuthentication = useAuthentication;
            this.Username = username;
            this.Password = password;
            this.Envelope = envelope;
            this.OneWay = oneWay;
            this.HeadersVariable = headersVariable;
            this.UseMtom = useMtom;
            this.AttachmentNames = attachmentNames;
            this.AttachmentContents = attachmentContents;
            this.AttachmentTypes = attachmentTypes;
            this.AttachmentsVariable = attachmentsVariable;
            this.SoapAction = soapAction;
            this.WsdlDefinitionMap = wsdlDefinitionMap;
            this.Name = name;
            this.Protocol = protocol;
            this.PurgedProperties = purgedProperties;
            this.UseHeadersVariable = useHeadersVariable;
            this.UseAttachmentsVariable = useAttachmentsVariable;
            this.HeadersMap = headersMap;
        }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public List<ConnectorPluginProperties> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets DestinationConnectorProperties
        /// </summary>
        [DataMember(Name = "destinationConnectorProperties", EmitDefaultValue = false)]
        public DestinationConnectorProperties DestinationConnectorProperties { get; set; }

        /// <summary>
        /// Gets or Sets WsdlUrl
        /// </summary>
        [DataMember(Name = "wsdlUrl", EmitDefaultValue = false)]
        public string WsdlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name = "operation", EmitDefaultValue = false)]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets LocationURI
        /// </summary>
        [DataMember(Name = "locationURI", EmitDefaultValue = false)]
        public string LocationURI { get; set; }

        /// <summary>
        /// Gets or Sets SocketTimeout
        /// </summary>
        [DataMember(Name = "socketTimeout", EmitDefaultValue = false)]
        public string SocketTimeout { get; set; }

        /// <summary>
        /// Gets or Sets UseAuthentication
        /// </summary>
        [DataMember(Name = "useAuthentication", EmitDefaultValue = true)]
        public bool UseAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Envelope
        /// </summary>
        [DataMember(Name = "envelope", EmitDefaultValue = false)]
        public string Envelope { get; set; }

        /// <summary>
        /// Gets or Sets OneWay
        /// </summary>
        [DataMember(Name = "oneWay", EmitDefaultValue = true)]
        public bool OneWay { get; set; }

        /// <summary>
        /// Gets or Sets HeadersVariable
        /// </summary>
        [DataMember(Name = "headersVariable", EmitDefaultValue = false)]
        public string HeadersVariable { get; set; }

        /// <summary>
        /// Gets or Sets UseMtom
        /// </summary>
        [DataMember(Name = "useMtom", EmitDefaultValue = true)]
        public bool UseMtom { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentNames
        /// </summary>
        [DataMember(Name = "attachmentNames", EmitDefaultValue = false)]
        public List<string> AttachmentNames { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentContents
        /// </summary>
        [DataMember(Name = "attachmentContents", EmitDefaultValue = false)]
        public List<string> AttachmentContents { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentTypes
        /// </summary>
        [DataMember(Name = "attachmentTypes", EmitDefaultValue = false)]
        public List<string> AttachmentTypes { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentsVariable
        /// </summary>
        [DataMember(Name = "attachmentsVariable", EmitDefaultValue = false)]
        public string AttachmentsVariable { get; set; }

        /// <summary>
        /// Gets or Sets SoapAction
        /// </summary>
        [DataMember(Name = "soapAction", EmitDefaultValue = false)]
        public string SoapAction { get; set; }

        /// <summary>
        /// Gets or Sets WsdlDefinitionMap
        /// </summary>
        [DataMember(Name = "wsdlDefinitionMap", EmitDefaultValue = false)]
        public DefinitionServiceMap WsdlDefinitionMap { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Gets or Sets UseHeadersVariable
        /// </summary>
        [DataMember(Name = "useHeadersVariable", EmitDefaultValue = true)]
        public bool UseHeadersVariable { get; set; }

        /// <summary>
        /// Gets or Sets UseAttachmentsVariable
        /// </summary>
        [DataMember(Name = "useAttachmentsVariable", EmitDefaultValue = true)]
        public bool UseAttachmentsVariable { get; set; }

        /// <summary>
        /// Gets or Sets HeadersMap
        /// </summary>
        [DataMember(Name = "headersMap", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> HeadersMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebServiceDispatcherProperties {\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  DestinationConnectorProperties: ").Append(DestinationConnectorProperties).Append("\n");
            sb.Append("  WsdlUrl: ").Append(WsdlUrl).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  LocationURI: ").Append(LocationURI).Append("\n");
            sb.Append("  SocketTimeout: ").Append(SocketTimeout).Append("\n");
            sb.Append("  UseAuthentication: ").Append(UseAuthentication).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Envelope: ").Append(Envelope).Append("\n");
            sb.Append("  OneWay: ").Append(OneWay).Append("\n");
            sb.Append("  HeadersVariable: ").Append(HeadersVariable).Append("\n");
            sb.Append("  UseMtom: ").Append(UseMtom).Append("\n");
            sb.Append("  AttachmentNames: ").Append(AttachmentNames).Append("\n");
            sb.Append("  AttachmentContents: ").Append(AttachmentContents).Append("\n");
            sb.Append("  AttachmentTypes: ").Append(AttachmentTypes).Append("\n");
            sb.Append("  AttachmentsVariable: ").Append(AttachmentsVariable).Append("\n");
            sb.Append("  SoapAction: ").Append(SoapAction).Append("\n");
            sb.Append("  WsdlDefinitionMap: ").Append(WsdlDefinitionMap).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("  UseHeadersVariable: ").Append(UseHeadersVariable).Append("\n");
            sb.Append("  UseAttachmentsVariable: ").Append(UseAttachmentsVariable).Append("\n");
            sb.Append("  HeadersMap: ").Append(HeadersMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebServiceDispatcherProperties);
        }

        /// <summary>
        /// Returns true if WebServiceDispatcherProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of WebServiceDispatcherProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebServiceDispatcherProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.DestinationConnectorProperties == input.DestinationConnectorProperties ||
                    (this.DestinationConnectorProperties != null &&
                    this.DestinationConnectorProperties.Equals(input.DestinationConnectorProperties))
                ) && 
                (
                    this.WsdlUrl == input.WsdlUrl ||
                    (this.WsdlUrl != null &&
                    this.WsdlUrl.Equals(input.WsdlUrl))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.LocationURI == input.LocationURI ||
                    (this.LocationURI != null &&
                    this.LocationURI.Equals(input.LocationURI))
                ) && 
                (
                    this.SocketTimeout == input.SocketTimeout ||
                    (this.SocketTimeout != null &&
                    this.SocketTimeout.Equals(input.SocketTimeout))
                ) && 
                (
                    this.UseAuthentication == input.UseAuthentication ||
                    this.UseAuthentication.Equals(input.UseAuthentication)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Envelope == input.Envelope ||
                    (this.Envelope != null &&
                    this.Envelope.Equals(input.Envelope))
                ) && 
                (
                    this.OneWay == input.OneWay ||
                    this.OneWay.Equals(input.OneWay)
                ) && 
                (
                    this.HeadersVariable == input.HeadersVariable ||
                    (this.HeadersVariable != null &&
                    this.HeadersVariable.Equals(input.HeadersVariable))
                ) && 
                (
                    this.UseMtom == input.UseMtom ||
                    this.UseMtom.Equals(input.UseMtom)
                ) && 
                (
                    this.AttachmentNames == input.AttachmentNames ||
                    this.AttachmentNames != null &&
                    input.AttachmentNames != null &&
                    this.AttachmentNames.SequenceEqual(input.AttachmentNames)
                ) && 
                (
                    this.AttachmentContents == input.AttachmentContents ||
                    this.AttachmentContents != null &&
                    input.AttachmentContents != null &&
                    this.AttachmentContents.SequenceEqual(input.AttachmentContents)
                ) && 
                (
                    this.AttachmentTypes == input.AttachmentTypes ||
                    this.AttachmentTypes != null &&
                    input.AttachmentTypes != null &&
                    this.AttachmentTypes.SequenceEqual(input.AttachmentTypes)
                ) && 
                (
                    this.AttachmentsVariable == input.AttachmentsVariable ||
                    (this.AttachmentsVariable != null &&
                    this.AttachmentsVariable.Equals(input.AttachmentsVariable))
                ) && 
                (
                    this.SoapAction == input.SoapAction ||
                    (this.SoapAction != null &&
                    this.SoapAction.Equals(input.SoapAction))
                ) && 
                (
                    this.WsdlDefinitionMap == input.WsdlDefinitionMap ||
                    (this.WsdlDefinitionMap != null &&
                    this.WsdlDefinitionMap.Equals(input.WsdlDefinitionMap))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                ) && 
                (
                    this.UseHeadersVariable == input.UseHeadersVariable ||
                    this.UseHeadersVariable.Equals(input.UseHeadersVariable)
                ) && 
                (
                    this.UseAttachmentsVariable == input.UseAttachmentsVariable ||
                    this.UseAttachmentsVariable.Equals(input.UseAttachmentsVariable)
                ) && 
                (
                    this.HeadersMap == input.HeadersMap ||
                    this.HeadersMap != null &&
                    input.HeadersMap != null &&
                    this.HeadersMap.SequenceEqual(input.HeadersMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                if (this.DestinationConnectorProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationConnectorProperties.GetHashCode();
                }
                if (this.WsdlUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WsdlUrl.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                if (this.Operation != null)
                {
                    hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                }
                if (this.LocationURI != null)
                {
                    hashCode = (hashCode * 59) + this.LocationURI.GetHashCode();
                }
                if (this.SocketTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.SocketTimeout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseAuthentication.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Envelope != null)
                {
                    hashCode = (hashCode * 59) + this.Envelope.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OneWay.GetHashCode();
                if (this.HeadersVariable != null)
                {
                    hashCode = (hashCode * 59) + this.HeadersVariable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseMtom.GetHashCode();
                if (this.AttachmentNames != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentNames.GetHashCode();
                }
                if (this.AttachmentContents != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentContents.GetHashCode();
                }
                if (this.AttachmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentTypes.GetHashCode();
                }
                if (this.AttachmentsVariable != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentsVariable.GetHashCode();
                }
                if (this.SoapAction != null)
                {
                    hashCode = (hashCode * 59) + this.SoapAction.GetHashCode();
                }
                if (this.WsdlDefinitionMap != null)
                {
                    hashCode = (hashCode * 59) + this.WsdlDefinitionMap.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseHeadersVariable.GetHashCode();
                hashCode = (hashCode * 59) + this.UseAttachmentsVariable.GetHashCode();
                if (this.HeadersMap != null)
                {
                    hashCode = (hashCode * 59) + this.HeadersMap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
