/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>List&lt;ChannelGroup&gt;</returns>
        List<ChannelGroup> GetChannelGroups(List<string> channelGroupId = default(List<string>));

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelGroup&gt;</returns>
        ApiResponse<List<ChannelGroup>> GetChannelGroupsWithHttpInfo(List<string> channelGroupId = default(List<string>));
        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>List&lt;ChannelGroup&gt;</returns>
        List<ChannelGroup> GetChannelGroupsPost(List<string> requestBody = default(List<string>));

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelGroup&gt;</returns>
        ApiResponse<List<ChannelGroup>> GetChannelGroupsPostWithHttpInfo(List<string> requestBody = default(List<string>));
        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <returns>bool</returns>
        bool UpdateChannelGroups(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>));

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateChannelGroupsWithHttpInfo(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelGroup>> GetChannelGroupsAsync(List<string> channelGroupId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelGroup>>> GetChannelGroupsWithHttpInfoAsync(List<string> channelGroupId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelGroup>> GetChannelGroupsPostAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelGroup>>> GetChannelGroupsPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateChannelGroupsAsync(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateChannelGroupsWithHttpInfoAsync(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelGroupsApi : IChannelGroupsApiSync, IChannelGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelGroupsApi : IChannelGroupsApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelGroupsApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelGroupsApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelGroupsApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>List&lt;ChannelGroup&gt;</returns>
        public List<ChannelGroup> GetChannelGroups(List<string> channelGroupId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> localVarResponse = GetChannelGroupsWithHttpInfo(channelGroupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelGroup&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> GetChannelGroupsWithHttpInfo(List<string> channelGroupId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelGroupId", channelGroupId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChannelGroup>>("/channelgroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelGroup>> GetChannelGroupsAsync(List<string> channelGroupId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> localVarResponse = await GetChannelGroupsWithHttpInfoAsync(channelGroupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelGroupId">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>>> GetChannelGroupsWithHttpInfoAsync(List<string> channelGroupId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelGroupId", channelGroupId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChannelGroup>>("/channelgroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>List&lt;ChannelGroup&gt;</returns>
        public List<ChannelGroup> GetChannelGroupsPost(List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> localVarResponse = GetChannelGroupsPostWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelGroup&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> GetChannelGroupsPostWithHttpInfo(List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ChannelGroup>>("/channelgroups/_getChannelGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelGroup>> GetChannelGroupsPostAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>> localVarResponse = await GetChannelGroupsPostWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channel groups to retrieve. If absent, all groups will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelGroup>>> GetChannelGroupsPostWithHttpInfoAsync(List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ChannelGroup>>("/channelgroups/_getChannelGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <returns>bool</returns>
        public bool UpdateChannelGroups(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = UpdateChannelGroupsWithHttpInfo(_override, channelGroups, removedChannelGroupIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> UpdateChannelGroupsWithHttpInfo(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            if (channelGroups != null)
            {
                localVarRequestOptions.FormParameters.Add("channelGroups", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelGroups)); // form parameter
            }
            if (removedChannelGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedChannelGroupIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedChannelGroupIds)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/channelgroups/_bulkUpdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChannelGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateChannelGroupsAsync(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await UpdateChannelGroupsWithHttpInfoAsync(_override, channelGroups, removedChannelGroupIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates all channel groups in one request. (\&quot;Try it out\&quot; doesn&#39;t work for this endpoint, but the descriptions are valid. Please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_override">If true, the channel groups will be updated even if different revisions exist on the server. (optional, default to false)</param>
        /// <param name="channelGroups">The channel group object to update or create. (optional)</param>
        /// <param name="removedChannelGroupIds">All channel group IDs known to be removed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> UpdateChannelGroupsWithHttpInfoAsync(bool? _override = default(bool?), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<string> removedChannelGroupIds = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            if (channelGroups != null)
            {
                localVarRequestOptions.FormParameters.Add("channelGroups", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelGroups)); // form parameter
            }
            if (removedChannelGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("removedChannelGroupIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(removedChannelGroupIds)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/channelgroups/_bulkUpdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChannelGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
