/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// JmsConnectorProperties
    /// </summary>
    [DataContract(Name = "JmsConnectorProperties")]
    public partial class JmsConnectorProperties : IEquatable<JmsConnectorProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JmsConnectorProperties" /> class.
        /// </summary>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="useJndi">useJndi.</param>
        /// <param name="jndiProviderUrl">jndiProviderUrl.</param>
        /// <param name="jndiInitialContextFactory">jndiInitialContextFactory.</param>
        /// <param name="jndiConnectionFactoryName">jndiConnectionFactoryName.</param>
        /// <param name="connectionFactoryClass">connectionFactoryClass.</param>
        /// <param name="connectionProperties">connectionProperties.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="destinationName">destinationName.</param>
        /// <param name="topic">topic.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="name">name.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public JmsConnectorProperties(List<ConnectorPluginProperties> pluginProperties = default(List<ConnectorPluginProperties>), bool useJndi = default(bool), string jndiProviderUrl = default(string), string jndiInitialContextFactory = default(string), string jndiConnectionFactoryName = default(string), string connectionFactoryClass = default(string), Dictionary<string, string> connectionProperties = default(Dictionary<string, string>), string username = default(string), string password = default(string), string destinationName = default(string), bool topic = default(bool), string clientId = default(string), string name = default(string), string protocol = default(string), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.PluginProperties = pluginProperties;
            this.UseJndi = useJndi;
            this.JndiProviderUrl = jndiProviderUrl;
            this.JndiInitialContextFactory = jndiInitialContextFactory;
            this.JndiConnectionFactoryName = jndiConnectionFactoryName;
            this.ConnectionFactoryClass = connectionFactoryClass;
            this.ConnectionProperties = connectionProperties;
            this.Username = username;
            this.Password = password;
            this.DestinationName = destinationName;
            this.Topic = topic;
            this.ClientId = clientId;
            this.Name = name;
            this.Protocol = protocol;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public List<ConnectorPluginProperties> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets UseJndi
        /// </summary>
        [DataMember(Name = "useJndi", EmitDefaultValue = true)]
        public bool UseJndi { get; set; }

        /// <summary>
        /// Gets or Sets JndiProviderUrl
        /// </summary>
        [DataMember(Name = "jndiProviderUrl", EmitDefaultValue = false)]
        public string JndiProviderUrl { get; set; }

        /// <summary>
        /// Gets or Sets JndiInitialContextFactory
        /// </summary>
        [DataMember(Name = "jndiInitialContextFactory", EmitDefaultValue = false)]
        public string JndiInitialContextFactory { get; set; }

        /// <summary>
        /// Gets or Sets JndiConnectionFactoryName
        /// </summary>
        [DataMember(Name = "jndiConnectionFactoryName", EmitDefaultValue = false)]
        public string JndiConnectionFactoryName { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionFactoryClass
        /// </summary>
        [DataMember(Name = "connectionFactoryClass", EmitDefaultValue = false)]
        public string ConnectionFactoryClass { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>
        [DataMember(Name = "connectionProperties", EmitDefaultValue = false)]
        public Dictionary<string, string> ConnectionProperties { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets DestinationName
        /// </summary>
        [DataMember(Name = "destinationName", EmitDefaultValue = false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = true)]
        public bool Topic { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JmsConnectorProperties {\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  UseJndi: ").Append(UseJndi).Append("\n");
            sb.Append("  JndiProviderUrl: ").Append(JndiProviderUrl).Append("\n");
            sb.Append("  JndiInitialContextFactory: ").Append(JndiInitialContextFactory).Append("\n");
            sb.Append("  JndiConnectionFactoryName: ").Append(JndiConnectionFactoryName).Append("\n");
            sb.Append("  ConnectionFactoryClass: ").Append(ConnectionFactoryClass).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JmsConnectorProperties);
        }

        /// <summary>
        /// Returns true if JmsConnectorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of JmsConnectorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JmsConnectorProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.UseJndi == input.UseJndi ||
                    this.UseJndi.Equals(input.UseJndi)
                ) && 
                (
                    this.JndiProviderUrl == input.JndiProviderUrl ||
                    (this.JndiProviderUrl != null &&
                    this.JndiProviderUrl.Equals(input.JndiProviderUrl))
                ) && 
                (
                    this.JndiInitialContextFactory == input.JndiInitialContextFactory ||
                    (this.JndiInitialContextFactory != null &&
                    this.JndiInitialContextFactory.Equals(input.JndiInitialContextFactory))
                ) && 
                (
                    this.JndiConnectionFactoryName == input.JndiConnectionFactoryName ||
                    (this.JndiConnectionFactoryName != null &&
                    this.JndiConnectionFactoryName.Equals(input.JndiConnectionFactoryName))
                ) && 
                (
                    this.ConnectionFactoryClass == input.ConnectionFactoryClass ||
                    (this.ConnectionFactoryClass != null &&
                    this.ConnectionFactoryClass.Equals(input.ConnectionFactoryClass))
                ) && 
                (
                    this.ConnectionProperties == input.ConnectionProperties ||
                    this.ConnectionProperties != null &&
                    input.ConnectionProperties != null &&
                    this.ConnectionProperties.SequenceEqual(input.ConnectionProperties)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.Topic == input.Topic ||
                    this.Topic.Equals(input.Topic)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseJndi.GetHashCode();
                if (this.JndiProviderUrl != null)
                {
                    hashCode = (hashCode * 59) + this.JndiProviderUrl.GetHashCode();
                }
                if (this.JndiInitialContextFactory != null)
                {
                    hashCode = (hashCode * 59) + this.JndiInitialContextFactory.GetHashCode();
                }
                if (this.JndiConnectionFactoryName != null)
                {
                    hashCode = (hashCode * 59) + this.JndiConnectionFactoryName.GetHashCode();
                }
                if (this.ConnectionFactoryClass != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionFactoryClass.GetHashCode();
                }
                if (this.ConnectionProperties != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionProperties.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.DestinationName != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
