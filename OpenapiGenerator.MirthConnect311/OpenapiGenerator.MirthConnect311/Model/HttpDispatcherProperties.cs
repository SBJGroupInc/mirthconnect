/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// HttpDispatcherProperties
    /// </summary>
    [DataContract(Name = "HttpDispatcherProperties")]
    public partial class HttpDispatcherProperties : IEquatable<HttpDispatcherProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpDispatcherProperties" /> class.
        /// </summary>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="destinationConnectorProperties">destinationConnectorProperties.</param>
        /// <param name="host">host.</param>
        /// <param name="useProxyServer">useProxyServer.</param>
        /// <param name="proxyAddress">proxyAddress.</param>
        /// <param name="proxyPort">proxyPort.</param>
        /// <param name="method">method.</param>
        /// <param name="useHeadersVariable">useHeadersVariable.</param>
        /// <param name="headersVariable">headersVariable.</param>
        /// <param name="useParametersVariable">useParametersVariable.</param>
        /// <param name="parametersVariable">parametersVariable.</param>
        /// <param name="responseXmlBody">responseXmlBody.</param>
        /// <param name="responseParseMultipart">responseParseMultipart.</param>
        /// <param name="responseIncludeMetadata">responseIncludeMetadata.</param>
        /// <param name="responseBinaryMimeTypes">responseBinaryMimeTypes.</param>
        /// <param name="responseBinaryMimeTypesRegex">responseBinaryMimeTypesRegex.</param>
        /// <param name="multipart">multipart.</param>
        /// <param name="useAuthentication">useAuthentication.</param>
        /// <param name="authenticationType">authenticationType.</param>
        /// <param name="usePreemptiveAuthentication">usePreemptiveAuthentication.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="content">content.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="dataTypeBinary">dataTypeBinary.</param>
        /// <param name="charset">charset.</param>
        /// <param name="socketTimeout">socketTimeout.</param>
        /// <param name="name">name.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        /// <param name="headersMap">headersMap.</param>
        /// <param name="parametersMap">parametersMap.</param>
        public HttpDispatcherProperties(List<ConnectorPluginProperties> pluginProperties = default(List<ConnectorPluginProperties>), DestinationConnectorProperties destinationConnectorProperties = default(DestinationConnectorProperties), string host = default(string), bool useProxyServer = default(bool), string proxyAddress = default(string), string proxyPort = default(string), string method = default(string), bool useHeadersVariable = default(bool), string headersVariable = default(string), bool useParametersVariable = default(bool), string parametersVariable = default(string), bool responseXmlBody = default(bool), bool responseParseMultipart = default(bool), bool responseIncludeMetadata = default(bool), string responseBinaryMimeTypes = default(string), bool responseBinaryMimeTypesRegex = default(bool), bool multipart = default(bool), bool useAuthentication = default(bool), string authenticationType = default(string), bool usePreemptiveAuthentication = default(bool), string username = default(string), string password = default(string), string content = default(string), string contentType = default(string), bool dataTypeBinary = default(bool), string charset = default(string), string socketTimeout = default(string), string name = default(string), string protocol = default(string), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>), Dictionary<string, List<string>> headersMap = default(Dictionary<string, List<string>>), Dictionary<string, List<string>> parametersMap = default(Dictionary<string, List<string>>))
        {
            this.PluginProperties = pluginProperties;
            this.DestinationConnectorProperties = destinationConnectorProperties;
            this.Host = host;
            this.UseProxyServer = useProxyServer;
            this.ProxyAddress = proxyAddress;
            this.ProxyPort = proxyPort;
            this.Method = method;
            this.UseHeadersVariable = useHeadersVariable;
            this.HeadersVariable = headersVariable;
            this.UseParametersVariable = useParametersVariable;
            this.ParametersVariable = parametersVariable;
            this.ResponseXmlBody = responseXmlBody;
            this.ResponseParseMultipart = responseParseMultipart;
            this.ResponseIncludeMetadata = responseIncludeMetadata;
            this.ResponseBinaryMimeTypes = responseBinaryMimeTypes;
            this.ResponseBinaryMimeTypesRegex = responseBinaryMimeTypesRegex;
            this.Multipart = multipart;
            this.UseAuthentication = useAuthentication;
            this.AuthenticationType = authenticationType;
            this.UsePreemptiveAuthentication = usePreemptiveAuthentication;
            this.Username = username;
            this.Password = password;
            this.Content = content;
            this.ContentType = contentType;
            this.DataTypeBinary = dataTypeBinary;
            this.Charset = charset;
            this.SocketTimeout = socketTimeout;
            this.Name = name;
            this.Protocol = protocol;
            this.PurgedProperties = purgedProperties;
            this.HeadersMap = headersMap;
            this.ParametersMap = parametersMap;
        }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public List<ConnectorPluginProperties> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets DestinationConnectorProperties
        /// </summary>
        [DataMember(Name = "destinationConnectorProperties", EmitDefaultValue = false)]
        public DestinationConnectorProperties DestinationConnectorProperties { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets UseProxyServer
        /// </summary>
        [DataMember(Name = "useProxyServer", EmitDefaultValue = true)]
        public bool UseProxyServer { get; set; }

        /// <summary>
        /// Gets or Sets ProxyAddress
        /// </summary>
        [DataMember(Name = "proxyAddress", EmitDefaultValue = false)]
        public string ProxyAddress { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [DataMember(Name = "proxyPort", EmitDefaultValue = false)]
        public string ProxyPort { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets UseHeadersVariable
        /// </summary>
        [DataMember(Name = "useHeadersVariable", EmitDefaultValue = true)]
        public bool UseHeadersVariable { get; set; }

        /// <summary>
        /// Gets or Sets HeadersVariable
        /// </summary>
        [DataMember(Name = "headersVariable", EmitDefaultValue = false)]
        public string HeadersVariable { get; set; }

        /// <summary>
        /// Gets or Sets UseParametersVariable
        /// </summary>
        [DataMember(Name = "useParametersVariable", EmitDefaultValue = true)]
        public bool UseParametersVariable { get; set; }

        /// <summary>
        /// Gets or Sets ParametersVariable
        /// </summary>
        [DataMember(Name = "parametersVariable", EmitDefaultValue = false)]
        public string ParametersVariable { get; set; }

        /// <summary>
        /// Gets or Sets ResponseXmlBody
        /// </summary>
        [DataMember(Name = "responseXmlBody", EmitDefaultValue = true)]
        public bool ResponseXmlBody { get; set; }

        /// <summary>
        /// Gets or Sets ResponseParseMultipart
        /// </summary>
        [DataMember(Name = "responseParseMultipart", EmitDefaultValue = true)]
        public bool ResponseParseMultipart { get; set; }

        /// <summary>
        /// Gets or Sets ResponseIncludeMetadata
        /// </summary>
        [DataMember(Name = "responseIncludeMetadata", EmitDefaultValue = true)]
        public bool ResponseIncludeMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBinaryMimeTypes
        /// </summary>
        [DataMember(Name = "responseBinaryMimeTypes", EmitDefaultValue = false)]
        public string ResponseBinaryMimeTypes { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBinaryMimeTypesRegex
        /// </summary>
        [DataMember(Name = "responseBinaryMimeTypesRegex", EmitDefaultValue = true)]
        public bool ResponseBinaryMimeTypesRegex { get; set; }

        /// <summary>
        /// Gets or Sets Multipart
        /// </summary>
        [DataMember(Name = "multipart", EmitDefaultValue = true)]
        public bool Multipart { get; set; }

        /// <summary>
        /// Gets or Sets UseAuthentication
        /// </summary>
        [DataMember(Name = "useAuthentication", EmitDefaultValue = true)]
        public bool UseAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [DataMember(Name = "authenticationType", EmitDefaultValue = false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or Sets UsePreemptiveAuthentication
        /// </summary>
        [DataMember(Name = "usePreemptiveAuthentication", EmitDefaultValue = true)]
        public bool UsePreemptiveAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeBinary
        /// </summary>
        [DataMember(Name = "dataTypeBinary", EmitDefaultValue = true)]
        public bool DataTypeBinary { get; set; }

        /// <summary>
        /// Gets or Sets Charset
        /// </summary>
        [DataMember(Name = "charset", EmitDefaultValue = false)]
        public string Charset { get; set; }

        /// <summary>
        /// Gets or Sets SocketTimeout
        /// </summary>
        [DataMember(Name = "socketTimeout", EmitDefaultValue = false)]
        public string SocketTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Gets or Sets HeadersMap
        /// </summary>
        [DataMember(Name = "headersMap", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> HeadersMap { get; set; }

        /// <summary>
        /// Gets or Sets ParametersMap
        /// </summary>
        [DataMember(Name = "parametersMap", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> ParametersMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HttpDispatcherProperties {\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  DestinationConnectorProperties: ").Append(DestinationConnectorProperties).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  UseProxyServer: ").Append(UseProxyServer).Append("\n");
            sb.Append("  ProxyAddress: ").Append(ProxyAddress).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  UseHeadersVariable: ").Append(UseHeadersVariable).Append("\n");
            sb.Append("  HeadersVariable: ").Append(HeadersVariable).Append("\n");
            sb.Append("  UseParametersVariable: ").Append(UseParametersVariable).Append("\n");
            sb.Append("  ParametersVariable: ").Append(ParametersVariable).Append("\n");
            sb.Append("  ResponseXmlBody: ").Append(ResponseXmlBody).Append("\n");
            sb.Append("  ResponseParseMultipart: ").Append(ResponseParseMultipart).Append("\n");
            sb.Append("  ResponseIncludeMetadata: ").Append(ResponseIncludeMetadata).Append("\n");
            sb.Append("  ResponseBinaryMimeTypes: ").Append(ResponseBinaryMimeTypes).Append("\n");
            sb.Append("  ResponseBinaryMimeTypesRegex: ").Append(ResponseBinaryMimeTypesRegex).Append("\n");
            sb.Append("  Multipart: ").Append(Multipart).Append("\n");
            sb.Append("  UseAuthentication: ").Append(UseAuthentication).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  UsePreemptiveAuthentication: ").Append(UsePreemptiveAuthentication).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DataTypeBinary: ").Append(DataTypeBinary).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  SocketTimeout: ").Append(SocketTimeout).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("  HeadersMap: ").Append(HeadersMap).Append("\n");
            sb.Append("  ParametersMap: ").Append(ParametersMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HttpDispatcherProperties);
        }

        /// <summary>
        /// Returns true if HttpDispatcherProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of HttpDispatcherProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpDispatcherProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.DestinationConnectorProperties == input.DestinationConnectorProperties ||
                    (this.DestinationConnectorProperties != null &&
                    this.DestinationConnectorProperties.Equals(input.DestinationConnectorProperties))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.UseProxyServer == input.UseProxyServer ||
                    this.UseProxyServer.Equals(input.UseProxyServer)
                ) && 
                (
                    this.ProxyAddress == input.ProxyAddress ||
                    (this.ProxyAddress != null &&
                    this.ProxyAddress.Equals(input.ProxyAddress))
                ) && 
                (
                    this.ProxyPort == input.ProxyPort ||
                    (this.ProxyPort != null &&
                    this.ProxyPort.Equals(input.ProxyPort))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.UseHeadersVariable == input.UseHeadersVariable ||
                    this.UseHeadersVariable.Equals(input.UseHeadersVariable)
                ) && 
                (
                    this.HeadersVariable == input.HeadersVariable ||
                    (this.HeadersVariable != null &&
                    this.HeadersVariable.Equals(input.HeadersVariable))
                ) && 
                (
                    this.UseParametersVariable == input.UseParametersVariable ||
                    this.UseParametersVariable.Equals(input.UseParametersVariable)
                ) && 
                (
                    this.ParametersVariable == input.ParametersVariable ||
                    (this.ParametersVariable != null &&
                    this.ParametersVariable.Equals(input.ParametersVariable))
                ) && 
                (
                    this.ResponseXmlBody == input.ResponseXmlBody ||
                    this.ResponseXmlBody.Equals(input.ResponseXmlBody)
                ) && 
                (
                    this.ResponseParseMultipart == input.ResponseParseMultipart ||
                    this.ResponseParseMultipart.Equals(input.ResponseParseMultipart)
                ) && 
                (
                    this.ResponseIncludeMetadata == input.ResponseIncludeMetadata ||
                    this.ResponseIncludeMetadata.Equals(input.ResponseIncludeMetadata)
                ) && 
                (
                    this.ResponseBinaryMimeTypes == input.ResponseBinaryMimeTypes ||
                    (this.ResponseBinaryMimeTypes != null &&
                    this.ResponseBinaryMimeTypes.Equals(input.ResponseBinaryMimeTypes))
                ) && 
                (
                    this.ResponseBinaryMimeTypesRegex == input.ResponseBinaryMimeTypesRegex ||
                    this.ResponseBinaryMimeTypesRegex.Equals(input.ResponseBinaryMimeTypesRegex)
                ) && 
                (
                    this.Multipart == input.Multipart ||
                    this.Multipart.Equals(input.Multipart)
                ) && 
                (
                    this.UseAuthentication == input.UseAuthentication ||
                    this.UseAuthentication.Equals(input.UseAuthentication)
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.UsePreemptiveAuthentication == input.UsePreemptiveAuthentication ||
                    this.UsePreemptiveAuthentication.Equals(input.UsePreemptiveAuthentication)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.DataTypeBinary == input.DataTypeBinary ||
                    this.DataTypeBinary.Equals(input.DataTypeBinary)
                ) && 
                (
                    this.Charset == input.Charset ||
                    (this.Charset != null &&
                    this.Charset.Equals(input.Charset))
                ) && 
                (
                    this.SocketTimeout == input.SocketTimeout ||
                    (this.SocketTimeout != null &&
                    this.SocketTimeout.Equals(input.SocketTimeout))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                ) && 
                (
                    this.HeadersMap == input.HeadersMap ||
                    this.HeadersMap != null &&
                    input.HeadersMap != null &&
                    this.HeadersMap.SequenceEqual(input.HeadersMap)
                ) && 
                (
                    this.ParametersMap == input.ParametersMap ||
                    this.ParametersMap != null &&
                    input.ParametersMap != null &&
                    this.ParametersMap.SequenceEqual(input.ParametersMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                if (this.DestinationConnectorProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationConnectorProperties.GetHashCode();
                }
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseProxyServer.GetHashCode();
                if (this.ProxyAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyAddress.GetHashCode();
                }
                if (this.ProxyPort != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyPort.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseHeadersVariable.GetHashCode();
                if (this.HeadersVariable != null)
                {
                    hashCode = (hashCode * 59) + this.HeadersVariable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseParametersVariable.GetHashCode();
                if (this.ParametersVariable != null)
                {
                    hashCode = (hashCode * 59) + this.ParametersVariable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResponseXmlBody.GetHashCode();
                hashCode = (hashCode * 59) + this.ResponseParseMultipart.GetHashCode();
                hashCode = (hashCode * 59) + this.ResponseIncludeMetadata.GetHashCode();
                if (this.ResponseBinaryMimeTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseBinaryMimeTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResponseBinaryMimeTypesRegex.GetHashCode();
                hashCode = (hashCode * 59) + this.Multipart.GetHashCode();
                hashCode = (hashCode * 59) + this.UseAuthentication.GetHashCode();
                if (this.AuthenticationType != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsePreemptiveAuthentication.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataTypeBinary.GetHashCode();
                if (this.Charset != null)
                {
                    hashCode = (hashCode * 59) + this.Charset.GetHashCode();
                }
                if (this.SocketTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.SocketTimeout.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                if (this.HeadersMap != null)
                {
                    hashCode = (hashCode * 59) + this.HeadersMap.GetHashCode();
                }
                if (this.ParametersMap != null)
                {
                    hashCode = (hashCode * 59) + this.ParametersMap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
