/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// DashboardChannelInfo
    /// </summary>
    [DataContract(Name = "DashboardChannelInfo")]
    public partial class DashboardChannelInfo : IEquatable<DashboardChannelInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardChannelInfo" /> class.
        /// </summary>
        /// <param name="dashboardStatuses">dashboardStatuses.</param>
        /// <param name="remainingChannelIds">remainingChannelIds.</param>
        /// <param name="deployedChannelCount">deployedChannelCount.</param>
        /// <param name="deployedChannelNames">deployedChannelNames.</param>
        public DashboardChannelInfo(List<DashboardStatus> dashboardStatuses = default(List<DashboardStatus>), List<string> remainingChannelIds = default(List<string>), int deployedChannelCount = default(int), int deployedChannelNames = default(int))
        {
            this.DashboardStatuses = dashboardStatuses;
            this.RemainingChannelIds = remainingChannelIds;
            this.DeployedChannelCount = deployedChannelCount;
            this.DeployedChannelNames = deployedChannelNames;
        }

        /// <summary>
        /// Gets or Sets DashboardStatuses
        /// </summary>
        [DataMember(Name = "dashboardStatuses", EmitDefaultValue = false)]
        public List<DashboardStatus> DashboardStatuses { get; set; }

        /// <summary>
        /// Gets or Sets RemainingChannelIds
        /// </summary>
        [DataMember(Name = "remainingChannelIds", EmitDefaultValue = false)]
        public List<string> RemainingChannelIds { get; set; }

        /// <summary>
        /// Gets or Sets DeployedChannelCount
        /// </summary>
        [DataMember(Name = "deployedChannelCount", EmitDefaultValue = false)]
        public int DeployedChannelCount { get; set; }

        /// <summary>
        /// Gets or Sets DeployedChannelNames
        /// </summary>
        [DataMember(Name = "deployedChannelNames", EmitDefaultValue = false)]
        public int DeployedChannelNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DashboardChannelInfo {\n");
            sb.Append("  DashboardStatuses: ").Append(DashboardStatuses).Append("\n");
            sb.Append("  RemainingChannelIds: ").Append(RemainingChannelIds).Append("\n");
            sb.Append("  DeployedChannelCount: ").Append(DeployedChannelCount).Append("\n");
            sb.Append("  DeployedChannelNames: ").Append(DeployedChannelNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardChannelInfo);
        }

        /// <summary>
        /// Returns true if DashboardChannelInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardChannelInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardChannelInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DashboardStatuses == input.DashboardStatuses ||
                    this.DashboardStatuses != null &&
                    input.DashboardStatuses != null &&
                    this.DashboardStatuses.SequenceEqual(input.DashboardStatuses)
                ) && 
                (
                    this.RemainingChannelIds == input.RemainingChannelIds ||
                    this.RemainingChannelIds != null &&
                    input.RemainingChannelIds != null &&
                    this.RemainingChannelIds.SequenceEqual(input.RemainingChannelIds)
                ) && 
                (
                    this.DeployedChannelCount == input.DeployedChannelCount ||
                    this.DeployedChannelCount.Equals(input.DeployedChannelCount)
                ) && 
                (
                    this.DeployedChannelNames == input.DeployedChannelNames ||
                    this.DeployedChannelNames.Equals(input.DeployedChannelNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DashboardStatuses != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardStatuses.GetHashCode();
                }
                if (this.RemainingChannelIds != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingChannelIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeployedChannelCount.GetHashCode();
                hashCode = (hashCode * 59) + this.DeployedChannelNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
