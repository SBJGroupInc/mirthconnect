/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// DriverInfo
    /// </summary>
    [DataContract(Name = "DriverInfo")]
    public partial class DriverInfo : IEquatable<DriverInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DriverInfo" /> class.
        /// </summary>
        /// <param name="className">className.</param>
        /// <param name="name">name.</param>
        /// <param name="template">template.</param>
        /// <param name="selectLimit">selectLimit.</param>
        /// <param name="alternativeClassNames">alternativeClassNames.</param>
        public DriverInfo(string className = default(string), string name = default(string), string template = default(string), string selectLimit = default(string), List<string> alternativeClassNames = default(List<string>))
        {
            this.ClassName = className;
            this.Name = name;
            this.Template = template;
            this.SelectLimit = selectLimit;
            this.AlternativeClassNames = alternativeClassNames;
        }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name = "className", EmitDefaultValue = false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets SelectLimit
        /// </summary>
        [DataMember(Name = "selectLimit", EmitDefaultValue = false)]
        public string SelectLimit { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeClassNames
        /// </summary>
        [DataMember(Name = "alternativeClassNames", EmitDefaultValue = false)]
        public List<string> AlternativeClassNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DriverInfo {\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  SelectLimit: ").Append(SelectLimit).Append("\n");
            sb.Append("  AlternativeClassNames: ").Append(AlternativeClassNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DriverInfo);
        }

        /// <summary>
        /// Returns true if DriverInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DriverInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DriverInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.SelectLimit == input.SelectLimit ||
                    (this.SelectLimit != null &&
                    this.SelectLimit.Equals(input.SelectLimit))
                ) && 
                (
                    this.AlternativeClassNames == input.AlternativeClassNames ||
                    this.AlternativeClassNames != null &&
                    input.AlternativeClassNames != null &&
                    this.AlternativeClassNames.SequenceEqual(input.AlternativeClassNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassName != null)
                {
                    hashCode = (hashCode * 59) + this.ClassName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                if (this.SelectLimit != null)
                {
                    hashCode = (hashCode * 59) + this.SelectLimit.GetHashCode();
                }
                if (this.AlternativeClassNames != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeClassNames.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
