/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// DestinationConnectorProperties
    /// </summary>
    [DataContract(Name = "DestinationConnectorProperties")]
    public partial class DestinationConnectorProperties : IEquatable<DestinationConnectorProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationConnectorProperties" /> class.
        /// </summary>
        /// <param name="queueEnabled">queueEnabled.</param>
        /// <param name="sendFirst">sendFirst.</param>
        /// <param name="retryIntervalMillis">retryIntervalMillis.</param>
        /// <param name="regenerateTemplate">regenerateTemplate.</param>
        /// <param name="retryCount">retryCount.</param>
        /// <param name="rotate">rotate.</param>
        /// <param name="includeFilterTransformer">includeFilterTransformer.</param>
        /// <param name="threadCount">threadCount.</param>
        /// <param name="threadAssignmentVariable">threadAssignmentVariable.</param>
        /// <param name="validateResponse">validateResponse.</param>
        /// <param name="resourceIds">resourceIds.</param>
        /// <param name="queueBufferSize">queueBufferSize.</param>
        /// <param name="reattachAttachments">reattachAttachments.</param>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public DestinationConnectorProperties(bool queueEnabled = default(bool), bool sendFirst = default(bool), int retryIntervalMillis = default(int), bool regenerateTemplate = default(bool), int retryCount = default(int), bool rotate = default(bool), bool includeFilterTransformer = default(bool), int threadCount = default(int), string threadAssignmentVariable = default(string), bool validateResponse = default(bool), Dictionary<string, string> resourceIds = default(Dictionary<string, string>), int queueBufferSize = default(int), bool reattachAttachments = default(bool), List<ConnectorPluginProperties> pluginProperties = default(List<ConnectorPluginProperties>), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.QueueEnabled = queueEnabled;
            this.SendFirst = sendFirst;
            this.RetryIntervalMillis = retryIntervalMillis;
            this.RegenerateTemplate = regenerateTemplate;
            this.RetryCount = retryCount;
            this.Rotate = rotate;
            this.IncludeFilterTransformer = includeFilterTransformer;
            this.ThreadCount = threadCount;
            this.ThreadAssignmentVariable = threadAssignmentVariable;
            this.ValidateResponse = validateResponse;
            this.ResourceIds = resourceIds;
            this.QueueBufferSize = queueBufferSize;
            this.ReattachAttachments = reattachAttachments;
            this.PluginProperties = pluginProperties;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets QueueEnabled
        /// </summary>
        [DataMember(Name = "queueEnabled", EmitDefaultValue = true)]
        public bool QueueEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SendFirst
        /// </summary>
        [DataMember(Name = "sendFirst", EmitDefaultValue = true)]
        public bool SendFirst { get; set; }

        /// <summary>
        /// Gets or Sets RetryIntervalMillis
        /// </summary>
        [DataMember(Name = "retryIntervalMillis", EmitDefaultValue = false)]
        public int RetryIntervalMillis { get; set; }

        /// <summary>
        /// Gets or Sets RegenerateTemplate
        /// </summary>
        [DataMember(Name = "regenerateTemplate", EmitDefaultValue = true)]
        public bool RegenerateTemplate { get; set; }

        /// <summary>
        /// Gets or Sets RetryCount
        /// </summary>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// Gets or Sets Rotate
        /// </summary>
        [DataMember(Name = "rotate", EmitDefaultValue = true)]
        public bool Rotate { get; set; }

        /// <summary>
        /// Gets or Sets IncludeFilterTransformer
        /// </summary>
        [DataMember(Name = "includeFilterTransformer", EmitDefaultValue = true)]
        public bool IncludeFilterTransformer { get; set; }

        /// <summary>
        /// Gets or Sets ThreadCount
        /// </summary>
        [DataMember(Name = "threadCount", EmitDefaultValue = false)]
        public int ThreadCount { get; set; }

        /// <summary>
        /// Gets or Sets ThreadAssignmentVariable
        /// </summary>
        [DataMember(Name = "threadAssignmentVariable", EmitDefaultValue = false)]
        public string ThreadAssignmentVariable { get; set; }

        /// <summary>
        /// Gets or Sets ValidateResponse
        /// </summary>
        [DataMember(Name = "validateResponse", EmitDefaultValue = true)]
        public bool ValidateResponse { get; set; }

        /// <summary>
        /// Gets or Sets ResourceIds
        /// </summary>
        [DataMember(Name = "resourceIds", EmitDefaultValue = false)]
        public Dictionary<string, string> ResourceIds { get; set; }

        /// <summary>
        /// Gets or Sets QueueBufferSize
        /// </summary>
        [DataMember(Name = "queueBufferSize", EmitDefaultValue = false)]
        public int QueueBufferSize { get; set; }

        /// <summary>
        /// Gets or Sets ReattachAttachments
        /// </summary>
        [DataMember(Name = "reattachAttachments", EmitDefaultValue = true)]
        public bool ReattachAttachments { get; set; }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public List<ConnectorPluginProperties> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinationConnectorProperties {\n");
            sb.Append("  QueueEnabled: ").Append(QueueEnabled).Append("\n");
            sb.Append("  SendFirst: ").Append(SendFirst).Append("\n");
            sb.Append("  RetryIntervalMillis: ").Append(RetryIntervalMillis).Append("\n");
            sb.Append("  RegenerateTemplate: ").Append(RegenerateTemplate).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  Rotate: ").Append(Rotate).Append("\n");
            sb.Append("  IncludeFilterTransformer: ").Append(IncludeFilterTransformer).Append("\n");
            sb.Append("  ThreadCount: ").Append(ThreadCount).Append("\n");
            sb.Append("  ThreadAssignmentVariable: ").Append(ThreadAssignmentVariable).Append("\n");
            sb.Append("  ValidateResponse: ").Append(ValidateResponse).Append("\n");
            sb.Append("  ResourceIds: ").Append(ResourceIds).Append("\n");
            sb.Append("  QueueBufferSize: ").Append(QueueBufferSize).Append("\n");
            sb.Append("  ReattachAttachments: ").Append(ReattachAttachments).Append("\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinationConnectorProperties);
        }

        /// <summary>
        /// Returns true if DestinationConnectorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinationConnectorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationConnectorProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueueEnabled == input.QueueEnabled ||
                    this.QueueEnabled.Equals(input.QueueEnabled)
                ) && 
                (
                    this.SendFirst == input.SendFirst ||
                    this.SendFirst.Equals(input.SendFirst)
                ) && 
                (
                    this.RetryIntervalMillis == input.RetryIntervalMillis ||
                    this.RetryIntervalMillis.Equals(input.RetryIntervalMillis)
                ) && 
                (
                    this.RegenerateTemplate == input.RegenerateTemplate ||
                    this.RegenerateTemplate.Equals(input.RegenerateTemplate)
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    this.RetryCount.Equals(input.RetryCount)
                ) && 
                (
                    this.Rotate == input.Rotate ||
                    this.Rotate.Equals(input.Rotate)
                ) && 
                (
                    this.IncludeFilterTransformer == input.IncludeFilterTransformer ||
                    this.IncludeFilterTransformer.Equals(input.IncludeFilterTransformer)
                ) && 
                (
                    this.ThreadCount == input.ThreadCount ||
                    this.ThreadCount.Equals(input.ThreadCount)
                ) && 
                (
                    this.ThreadAssignmentVariable == input.ThreadAssignmentVariable ||
                    (this.ThreadAssignmentVariable != null &&
                    this.ThreadAssignmentVariable.Equals(input.ThreadAssignmentVariable))
                ) && 
                (
                    this.ValidateResponse == input.ValidateResponse ||
                    this.ValidateResponse.Equals(input.ValidateResponse)
                ) && 
                (
                    this.ResourceIds == input.ResourceIds ||
                    this.ResourceIds != null &&
                    input.ResourceIds != null &&
                    this.ResourceIds.SequenceEqual(input.ResourceIds)
                ) && 
                (
                    this.QueueBufferSize == input.QueueBufferSize ||
                    this.QueueBufferSize.Equals(input.QueueBufferSize)
                ) && 
                (
                    this.ReattachAttachments == input.ReattachAttachments ||
                    this.ReattachAttachments.Equals(input.ReattachAttachments)
                ) && 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.QueueEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SendFirst.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryIntervalMillis.GetHashCode();
                hashCode = (hashCode * 59) + this.RegenerateTemplate.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Rotate.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeFilterTransformer.GetHashCode();
                hashCode = (hashCode * 59) + this.ThreadCount.GetHashCode();
                if (this.ThreadAssignmentVariable != null)
                {
                    hashCode = (hashCode * 59) + this.ThreadAssignmentVariable.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ValidateResponse.GetHashCode();
                if (this.ResourceIds != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueBufferSize.GetHashCode();
                hashCode = (hashCode * 59) + this.ReattachAttachments.GetHashCode();
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
