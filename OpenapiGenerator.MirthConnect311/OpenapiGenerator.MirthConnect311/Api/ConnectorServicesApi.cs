/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>Object</returns>
        Object CacheWsdlFromUrl(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties);

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CacheWsdlFromUrlWithHttpInfo(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties);
        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DeleteTemplate(string templateName);

        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DeleteTemplateWithHttpInfo(string templateName);
        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <returns>string</returns>
        string GenerateEnvelope(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?));

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GenerateEnvelopeWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?));
        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>DefinitionServiceMap</returns>
        DefinitionServiceMap GetDefinition(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string));

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>ApiResponse of DefinitionServiceMap</returns>
        ApiResponse<DefinitionServiceMap> GetDefinitionWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string));
        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <returns>string</returns>
        string GetSoapAction(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string));

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSoapActionWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string));
        /// <summary>
        /// Executes a query to retrieve database table metadata.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <returns>List&lt;Table&gt;</returns>
        List<Table> GetTables(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>));

        /// <summary>
        /// Executes a query to retrieve database table metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        ApiResponse<List<Table>> GetTablesWithHttpInfo(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>));
        /// <summary>
        /// Retrieves a single JMS connector settings template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>JmsConnectorProperties</returns>
        JmsConnectorProperties GetTemplate(string templateName);

        /// <summary>
        /// Retrieves a single JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>ApiResponse of JmsConnectorProperties</returns>
        ApiResponse<JmsConnectorProperties> GetTemplateWithHttpInfo(string templateName);
        /// <summary>
        /// Retrieves JMS connector settings templates.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        Dictionary<string, JmsConnectorProperties> GetTemplates();

        /// <summary>
        /// Retrieves JMS connector settings templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        ApiResponse<Dictionary<string, JmsConnectorProperties>> GetTemplatesWithHttpInfo();
        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>bool</returns>
        bool IsWsdlCached(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string));

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> IsWsdlCachedWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string));
        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> SaveTemplate(string templateName, JmsConnectorProperties jmsConnectorProperties);

        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> SaveTemplateWithHttpInfo(string templateName, JmsConnectorProperties jmsConnectorProperties);
        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse SendTestEmail(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties);

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> SendTestEmailWithHttpInfo(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties);
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestConnection(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties);

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestConnectionWithHttpInfo(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties);
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestConnection1(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties);

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestConnection1WithHttpInfo(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties);
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestConnection2(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties);

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestConnection2WithHttpInfo(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties);
        /// <summary>
        /// Tests whether a file can be read from the specified directory.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestRead(string channelId, string channelName, FileReceiverProperties fileReceiverProperties);

        /// <summary>
        /// Tests whether a file can be read from the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestReadWithHttpInfo(string channelId, string channelName, FileReceiverProperties fileReceiverProperties);
        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestWrite(string channelId, string channelName, string body);

        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestWriteWithHttpInfo(string channelId, string channelName, string body);
        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        ConnectionTestResponse TestWrite1(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties);

        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        ApiResponse<ConnectionTestResponse> TestWrite1WithHttpInfo(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CacheWsdlFromUrlAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CacheWsdlFromUrlWithHttpInfoAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DeleteTemplateAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DeleteTemplateWithHttpInfoAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GenerateEnvelopeAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GenerateEnvelopeWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefinitionServiceMap</returns>
        System.Threading.Tasks.Task<DefinitionServiceMap> GetDefinitionAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefinitionServiceMap)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefinitionServiceMap>> GetDefinitionWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSoapActionAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSoapActionWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a query to retrieve database table metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        System.Threading.Tasks.Task<List<Table>> GetTablesAsync(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Executes a query to retrieve database table metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Table>>> GetTablesWithHttpInfoAsync(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a single JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JmsConnectorProperties</returns>
        System.Threading.Tasks.Task<JmsConnectorProperties> GetTemplateAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JmsConnectorProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<JmsConnectorProperties>> GetTemplateWithHttpInfoAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves JMS connector settings templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, JmsConnectorProperties>> GetTemplatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves JMS connector settings templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, JmsConnectorProperties&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, JmsConnectorProperties>>> GetTemplatesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> IsWsdlCachedAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> IsWsdlCachedWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> SaveTemplateAsync(string templateName, JmsConnectorProperties jmsConnectorProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a JMS connector settings template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> SaveTemplateWithHttpInfoAsync(string templateName, JmsConnectorProperties jmsConnectorProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> SendTestEmailAsync(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> SendTestEmailWithHttpInfoAsync(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestConnectionAsync(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestConnectionWithHttpInfoAsync(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestConnection1Async(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestConnection1WithHttpInfoAsync(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestConnection2Async(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestConnection2WithHttpInfoAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a file can be read from the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestReadAsync(string channelId, string channelName, FileReceiverProperties fileReceiverProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a file can be read from the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestReadWithHttpInfoAsync(string channelId, string channelName, FileReceiverProperties fileReceiverProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestWriteAsync(string channelId, string channelName, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestWriteWithHttpInfoAsync(string channelId, string channelName, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        System.Threading.Tasks.Task<ConnectionTestResponse> TestWrite1Async(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests whether a file can be written to the specified directory.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionTestResponse>> TestWrite1WithHttpInfoAsync(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorServicesApi : IConnectorServicesApiSync, IConnectorServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectorServicesApi : IConnectorServicesApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorServicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorServicesApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectorServicesApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConnectorServicesApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>Object</returns>
        public Object CacheWsdlFromUrl(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> localVarResponse = CacheWsdlFromUrlWithHttpInfo(channelId, channelName, webServiceDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ApiResponse of Object</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> CacheWsdlFromUrlWithHttpInfo(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }

            // verify the required parameter 'webServiceDispatcherProperties' is set
            if (webServiceDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'webServiceDispatcherProperties' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = webServiceDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connectors/ws/_cacheWsdlFromUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheWsdlFromUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CacheWsdlFromUrlAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> localVarResponse = await CacheWsdlFromUrlWithHttpInfoAsync(channelId, channelName, webServiceDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads the WSDL at the specified URL and caches the web service definition tree. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> CacheWsdlFromUrlWithHttpInfoAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }

            // verify the required parameter 'webServiceDispatcherProperties' is set
            if (webServiceDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'webServiceDispatcherProperties' when calling ConnectorServicesApi->CacheWsdlFromUrl");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = webServiceDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connectors/ws/_cacheWsdlFromUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CacheWsdlFromUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DeleteTemplate(string templateName)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = DeleteTemplateWithHttpInfo(templateName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> DeleteTemplateWithHttpInfo(string templateName)
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->DeleteTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<string>>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DeleteTemplateAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = await DeleteTemplateWithHttpInfoAsync(templateName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>>> DeleteTemplateWithHttpInfoAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->DeleteTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<string>>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <returns>string</returns>
        public string GenerateEnvelope(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = GenerateEnvelopeWithHttpInfo(channelId, channelName, wsdlUrl, username, password, service, port, operation, buildOptional);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> GenerateEnvelopeWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GenerateEnvelope");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GenerateEnvelope");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GenerateEnvelope");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (service != null)
            {
                localVarRequestOptions.FormParameters.Add("service", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(service)); // form parameter
            }
            if (port != null)
            {
                localVarRequestOptions.FormParameters.Add("port", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(port)); // form parameter
            }
            if (operation != null)
            {
                localVarRequestOptions.FormParameters.Add("operation", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(operation)); // form parameter
            }
            if (buildOptional != null)
            {
                localVarRequestOptions.FormParameters.Add("buildOptional", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(buildOptional)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/connectors/ws/_generateEnvelope", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateEnvelope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GenerateEnvelopeAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await GenerateEnvelopeWithHttpInfoAsync(channelId, channelName, wsdlUrl, username, password, service, port, operation, buildOptional, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SOAP envelope for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="buildOptional">Whether to include optional fields in the envelope. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> GenerateEnvelopeWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), bool? buildOptional = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GenerateEnvelope");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GenerateEnvelope");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GenerateEnvelope");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (service != null)
            {
                localVarRequestOptions.FormParameters.Add("service", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(service)); // form parameter
            }
            if (port != null)
            {
                localVarRequestOptions.FormParameters.Add("port", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(port)); // form parameter
            }
            if (operation != null)
            {
                localVarRequestOptions.FormParameters.Add("operation", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(operation)); // form parameter
            }
            if (buildOptional != null)
            {
                localVarRequestOptions.FormParameters.Add("buildOptional", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(buildOptional)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/connectors/ws/_generateEnvelope", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateEnvelope", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>DefinitionServiceMap</returns>
        public DefinitionServiceMap GetDefinition(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<DefinitionServiceMap> localVarResponse = GetDefinitionWithHttpInfo(channelId, channelName, wsdlUrl, username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>ApiResponse of DefinitionServiceMap</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<DefinitionServiceMap> GetDefinitionWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetDefinition");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetDefinition");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GetDefinition");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DefinitionServiceMap>("/connectors/ws/_getDefinition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefinitionServiceMap</returns>
        public async System.Threading.Tasks.Task<DefinitionServiceMap> GetDefinitionAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<DefinitionServiceMap> localVarResponse = await GetDefinitionWithHttpInfoAsync(channelId, channelName, wsdlUrl, username, password, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the definition service map corresponding to the specified WSDL. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefinitionServiceMap)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<DefinitionServiceMap>> GetDefinitionWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetDefinition");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetDefinition");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GetDefinition");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DefinitionServiceMap>("/connectors/ws/_getDefinition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <returns>string</returns>
        public string GetSoapAction(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = GetSoapActionWithHttpInfo(channelId, channelName, wsdlUrl, username, password, service, port, operation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> GetSoapActionWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetSoapAction");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetSoapAction");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GetSoapAction");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (service != null)
            {
                localVarRequestOptions.FormParameters.Add("service", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(service)); // form parameter
            }
            if (port != null)
            {
                localVarRequestOptions.FormParameters.Add("port", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(port)); // form parameter
            }
            if (operation != null)
            {
                localVarRequestOptions.FormParameters.Add("operation", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(operation)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/connectors/ws/_getSoapAction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSoapAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSoapActionAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await GetSoapActionWithHttpInfoAsync(channelId, channelName, wsdlUrl, username, password, service, port, operation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the default SOAP Action for a given WSDL operation. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="service">The service name for the WSDL operation. (optional)</param>
        /// <param name="port">The port / endpoint name for the service. (optional)</param>
        /// <param name="operation">The name of the operation to generate an envelope for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> GetSoapActionWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), string service = default(string), string port = default(string), string operation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetSoapAction");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetSoapAction");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->GetSoapAction");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (service != null)
            {
                localVarRequestOptions.FormParameters.Add("service", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(service)); // form parameter
            }
            if (port != null)
            {
                localVarRequestOptions.FormParameters.Add("port", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(port)); // form parameter
            }
            if (operation != null)
            {
                localVarRequestOptions.FormParameters.Add("operation", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(operation)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/connectors/ws/_getSoapAction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSoapAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes a query to retrieve database table metadata. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <returns>List&lt;Table&gt;</returns>
        public List<Table> GetTables(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Table>> localVarResponse = GetTablesWithHttpInfo(channelId, channelName, driver, url, username, password, tableNamePattern, selectLimit, resourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Executes a query to retrieve database table metadata. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <returns>ApiResponse of List&lt;Table&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Table>> GetTablesWithHttpInfo(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'driver' is set
            if (driver == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'driver' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'url' when calling ConnectorServicesApi->GetTables");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "driver", driver));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (tableNamePattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "tableNamePattern", tableNamePattern));
            }
            if (selectLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "selectLimit", selectLimit));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "resourceId", resourceId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Table>>("/connectors/jdbc/_getTables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes a query to retrieve database table metadata. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Table&gt;</returns>
        public async System.Threading.Tasks.Task<List<Table>> GetTablesAsync(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Table>> localVarResponse = await GetTablesWithHttpInfoAsync(channelId, channelName, driver, url, username, password, tableNamePattern, selectLimit, resourceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Executes a query to retrieve database table metadata. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="driver">The JDBC driver class to use. (ex: org.postgresql.Driver)</param>
        /// <param name="url">The JDBC connection URL to use. (ex: jdbc:postgresql://localhost:5432/mirthdb)</param>
        /// <param name="username">The username to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="password">The password to authenticate with. (optional, default to &quot;&quot;)</param>
        /// <param name="tableNamePattern">If specified, filters by table name. Wildcards (* or %) are allowed. (optional)</param>
        /// <param name="selectLimit">A simple query to use to retrieve database metadata information. (optional, default to &quot;SELECT * FROM ? LIMIT 1&quot;)</param>
        /// <param name="resourceId">Library resource IDs to use, if a custom driver is necessary. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Table&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Table>>> GetTablesWithHttpInfoAsync(string channelId, string channelName, string driver, string url, string username = default(string), string password = default(string), List<string> tableNamePattern = default(List<string>), string selectLimit = default(string), List<string> resourceId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'driver' is set
            if (driver == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'driver' when calling ConnectorServicesApi->GetTables");
            }

            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'url' when calling ConnectorServicesApi->GetTables");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "driver", driver));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (tableNamePattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "tableNamePattern", tableNamePattern));
            }
            if (selectLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "selectLimit", selectLimit));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "resourceId", resourceId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Table>>("/connectors/jdbc/_getTables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>JmsConnectorProperties</returns>
        public JmsConnectorProperties GetTemplate(string templateName)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<JmsConnectorProperties> localVarResponse = GetTemplateWithHttpInfo(templateName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <returns>ApiResponse of JmsConnectorProperties</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<JmsConnectorProperties> GetTemplateWithHttpInfo(string templateName)
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->GetTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JmsConnectorProperties>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JmsConnectorProperties</returns>
        public async System.Threading.Tasks.Task<JmsConnectorProperties> GetTemplateAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<JmsConnectorProperties> localVarResponse = await GetTemplateWithHttpInfoAsync(templateName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JmsConnectorProperties)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<JmsConnectorProperties>> GetTemplateWithHttpInfoAsync(string templateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->GetTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JmsConnectorProperties>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves JMS connector settings templates. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        public Dictionary<string, JmsConnectorProperties> GetTemplates()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, JmsConnectorProperties>> localVarResponse = GetTemplatesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves JMS connector settings templates. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, JmsConnectorProperties>> GetTemplatesWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, JmsConnectorProperties>>("/connectors/jms/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves JMS connector settings templates. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, JmsConnectorProperties&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, JmsConnectorProperties>> GetTemplatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, JmsConnectorProperties>> localVarResponse = await GetTemplatesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves JMS connector settings templates. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, JmsConnectorProperties&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, JmsConnectorProperties>>> GetTemplatesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, JmsConnectorProperties>>("/connectors/jms/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>bool</returns>
        public bool IsWsdlCached(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = IsWsdlCachedWithHttpInfo(channelId, channelName, wsdlUrl, username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> IsWsdlCachedWithHttpInfo(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->IsWsdlCached");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->IsWsdlCached");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->IsWsdlCached");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/connectors/ws/_isWsdlCached", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsWsdlCached", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> IsWsdlCachedAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await IsWsdlCachedWithHttpInfoAsync(channelId, channelName, wsdlUrl, username, password, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns true if the definition tree for the WSDL is cached by the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="wsdlUrl">The WSDL URL to check.</param>
        /// <param name="username">Username used to authenticate to the web server. (optional)</param>
        /// <param name="password">Password used to authenticate to the web server. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> IsWsdlCachedWithHttpInfoAsync(string channelId, string channelName, string wsdlUrl, string username = default(string), string password = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->IsWsdlCached");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->IsWsdlCached");
            }

            // verify the required parameter 'wsdlUrl' is set
            if (wsdlUrl == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'wsdlUrl' when calling ConnectorServicesApi->IsWsdlCached");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            localVarRequestOptions.FormParameters.Add("channelName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelName)); // form parameter
            localVarRequestOptions.FormParameters.Add("wsdlUrl", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(wsdlUrl)); // form parameter
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(password)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/connectors/ws/_isWsdlCached", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsWsdlCached", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> SaveTemplate(string templateName, JmsConnectorProperties jmsConnectorProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = SaveTemplateWithHttpInfo(templateName, jmsConnectorProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> SaveTemplateWithHttpInfo(string templateName, JmsConnectorProperties jmsConnectorProperties)
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->SaveTemplate");
            }

            // verify the required parameter 'jmsConnectorProperties' is set
            if (jmsConnectorProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'jmsConnectorProperties' when calling ConnectorServicesApi->SaveTemplate");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = jmsConnectorProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<string>>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> SaveTemplateAsync(string templateName, JmsConnectorProperties jmsConnectorProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>> localVarResponse = await SaveTemplateWithHttpInfoAsync(templateName, jmsConnectorProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a JMS connector settings template. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName">The name of the template.</param>
        /// <param name="jmsConnectorProperties">The JMS connector properties to save.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<string>>> SaveTemplateWithHttpInfoAsync(string templateName, JmsConnectorProperties jmsConnectorProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'templateName' when calling ConnectorServicesApi->SaveTemplate");
            }

            // verify the required parameter 'jmsConnectorProperties' is set
            if (jmsConnectorProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'jmsConnectorProperties' when calling ConnectorServicesApi->SaveTemplate");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("templateName", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(templateName)); // path parameter
            localVarRequestOptions.Data = jmsConnectorProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<string>>("/connectors/jms/templates/{templateName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse SendTestEmail(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = SendTestEmailWithHttpInfo(channelId, channelName, smtpDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> SendTestEmailWithHttpInfo(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->SendTestEmail");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->SendTestEmail");
            }

            // verify the required parameter 'smtpDispatcherProperties' is set
            if (smtpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'smtpDispatcherProperties' when calling ConnectorServicesApi->SendTestEmail");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = smtpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/smtp/_sendTestEmail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> SendTestEmailAsync(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await SendTestEmailWithHttpInfoAsync(channelId, channelName, smtpDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sends a test e-mail, replacing any connector properties first. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="smtpDispatcherProperties">The SMTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> SendTestEmailWithHttpInfoAsync(string channelId, string channelName, SmtpDispatcherProperties smtpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->SendTestEmail");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->SendTestEmail");
            }

            // verify the required parameter 'smtpDispatcherProperties' is set
            if (smtpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'smtpDispatcherProperties' when calling ConnectorServicesApi->SendTestEmail");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = smtpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/smtp/_sendTestEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestConnection(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestConnectionWithHttpInfo(channelId, channelName, httpDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestConnectionWithHttpInfo(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection");
            }

            // verify the required parameter 'httpDispatcherProperties' is set
            if (httpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'httpDispatcherProperties' when calling ConnectorServicesApi->TestConnection");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = httpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/http/_testConnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestConnectionAsync(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestConnectionWithHttpInfoAsync(channelId, channelName, httpDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="httpDispatcherProperties">The HTTP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestConnectionWithHttpInfoAsync(string channelId, string channelName, HttpDispatcherProperties httpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection");
            }

            // verify the required parameter 'httpDispatcherProperties' is set
            if (httpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'httpDispatcherProperties' when calling ConnectorServicesApi->TestConnection");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = httpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/http/_testConnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestConnection1(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestConnection1WithHttpInfo(channelId, channelName, tcpDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestConnection1WithHttpInfo(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection1");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection1");
            }

            // verify the required parameter 'tcpDispatcherProperties' is set
            if (tcpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'tcpDispatcherProperties' when calling ConnectorServicesApi->TestConnection1");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = tcpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/tcp/_testConnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestConnection1Async(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestConnection1WithHttpInfoAsync(channelId, channelName, tcpDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="tcpDispatcherProperties">The TCP Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestConnection1WithHttpInfoAsync(string channelId, string channelName, TcpDispatcherProperties tcpDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection1");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection1");
            }

            // verify the required parameter 'tcpDispatcherProperties' is set
            if (tcpDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'tcpDispatcherProperties' when calling ConnectorServicesApi->TestConnection1");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = tcpDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/tcp/_testConnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestConnection2(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestConnection2WithHttpInfo(channelId, channelName, webServiceDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestConnection2WithHttpInfo(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection2");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection2");
            }

            // verify the required parameter 'webServiceDispatcherProperties' is set
            if (webServiceDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'webServiceDispatcherProperties' when calling ConnectorServicesApi->TestConnection2");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = webServiceDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/ws/_testConnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestConnection2Async(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestConnection2WithHttpInfoAsync(channelId, channelName, webServiceDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a connection can be successfully established to the destination endpoint. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="webServiceDispatcherProperties">The Web Service Sender properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestConnection2WithHttpInfoAsync(string channelId, string channelName, WebServiceDispatcherProperties webServiceDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestConnection2");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestConnection2");
            }

            // verify the required parameter 'webServiceDispatcherProperties' is set
            if (webServiceDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'webServiceDispatcherProperties' when calling ConnectorServicesApi->TestConnection2");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = webServiceDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/ws/_testConnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnection2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be read from the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestRead(string channelId, string channelName, FileReceiverProperties fileReceiverProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestReadWithHttpInfo(channelId, channelName, fileReceiverProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be read from the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestReadWithHttpInfo(string channelId, string channelName, FileReceiverProperties fileReceiverProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestRead");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestRead");
            }

            // verify the required parameter 'fileReceiverProperties' is set
            if (fileReceiverProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'fileReceiverProperties' when calling ConnectorServicesApi->TestRead");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = fileReceiverProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/file/_testRead", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be read from the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestReadAsync(string channelId, string channelName, FileReceiverProperties fileReceiverProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestReadWithHttpInfoAsync(channelId, channelName, fileReceiverProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be read from the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileReceiverProperties">The File Reader properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestReadWithHttpInfoAsync(string channelId, string channelName, FileReceiverProperties fileReceiverProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestRead");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestRead");
            }

            // verify the required parameter 'fileReceiverProperties' is set
            if (fileReceiverProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'fileReceiverProperties' when calling ConnectorServicesApi->TestRead");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = fileReceiverProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/file/_testRead", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestWrite(string channelId, string channelName, string body)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestWriteWithHttpInfo(channelId, channelName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestWriteWithHttpInfo(string channelId, string channelName, string body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestWrite");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling ConnectorServicesApi->TestWrite");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/doc/_testWrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestWriteAsync(string channelId, string channelName, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestWriteWithHttpInfoAsync(channelId, channelName, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="body">The directory to test writing to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestWriteWithHttpInfoAsync(string channelId, string channelName, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestWrite");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestWrite");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'body' when calling ConnectorServicesApi->TestWrite");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = body;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/doc/_testWrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <returns>ConnectionTestResponse</returns>
        public ConnectionTestResponse TestWrite1(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = TestWrite1WithHttpInfo(channelId, channelName, fileDispatcherProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <returns>ApiResponse of ConnectionTestResponse</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> TestWrite1WithHttpInfo(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestWrite1");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestWrite1");
            }

            // verify the required parameter 'fileDispatcherProperties' is set
            if (fileDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'fileDispatcherProperties' when calling ConnectorServicesApi->TestWrite1");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = fileDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectionTestResponse>("/connectors/file/_testWrite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWrite1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionTestResponse</returns>
        public async System.Threading.Tasks.Task<ConnectionTestResponse> TestWrite1Async(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse> localVarResponse = await TestWrite1WithHttpInfoAsync(channelId, channelName, fileDispatcherProperties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests whether a file can be written to the specified directory. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="fileDispatcherProperties">The File Writer properties to use.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionTestResponse)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ConnectionTestResponse>> TestWrite1WithHttpInfoAsync(string channelId, string channelName, FileDispatcherProperties fileDispatcherProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ConnectorServicesApi->TestWrite1");
            }

            // verify the required parameter 'channelName' is set
            if (channelName == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelName' when calling ConnectorServicesApi->TestWrite1");
            }

            // verify the required parameter 'fileDispatcherProperties' is set
            if (fileDispatcherProperties == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'fileDispatcherProperties' when calling ConnectorServicesApi->TestWrite1");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "channelName", channelName));
            localVarRequestOptions.Data = fileDispatcherProperties;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectionTestResponse>("/connectors/file/_testWrite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWrite1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
