/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ErrorContent
    /// </summary>
    [DataContract(Name = "ErrorContent")]
    public partial class ErrorContent : IEquatable<ErrorContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorContent" /> class.
        /// </summary>
        /// <param name="encrypted">encrypted.</param>
        /// <param name="content">content.</param>
        /// <param name="persisted">persisted.</param>
        public ErrorContent(bool encrypted = default(bool), string content = default(string), bool persisted = default(bool))
        {
            this.Encrypted = encrypted;
            this.Content = content;
            this.Persisted = persisted;
        }

        /// <summary>
        /// Gets or Sets Encrypted
        /// </summary>
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Persisted
        /// </summary>
        [DataMember(Name = "persisted", EmitDefaultValue = true)]
        public bool Persisted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorContent {\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Persisted: ").Append(Persisted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorContent);
        }

        /// <summary>
        /// Returns true if ErrorContent instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Encrypted == input.Encrypted ||
                    this.Encrypted.Equals(input.Encrypted)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Persisted == input.Persisted ||
                    this.Persisted.Equals(input.Persisted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Encrypted.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Persisted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
