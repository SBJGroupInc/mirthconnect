/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// DashboardStatus
    /// </summary>
    [DataContract(Name = "DashboardStatus")]
    public partial class DashboardStatus : IEquatable<DashboardStatus>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Undeployed for value: Undeployed
            /// </summary>
            [EnumMember(Value = "Undeployed")]
            Undeployed = 1,

            /// <summary>
            /// Enum Deploying for value: Deploying
            /// </summary>
            [EnumMember(Value = "Deploying")]
            Deploying = 2,

            /// <summary>
            /// Enum Undeploying for value: Undeploying
            /// </summary>
            [EnumMember(Value = "Undeploying")]
            Undeploying = 3,

            /// <summary>
            /// Enum Starting for value: Starting
            /// </summary>
            [EnumMember(Value = "Starting")]
            Starting = 4,

            /// <summary>
            /// Enum Started for value: Started
            /// </summary>
            [EnumMember(Value = "Started")]
            Started = 5,

            /// <summary>
            /// Enum Pausing for value: Pausing
            /// </summary>
            [EnumMember(Value = "Pausing")]
            Pausing = 6,

            /// <summary>
            /// Enum Paused for value: Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            Paused = 7,

            /// <summary>
            /// Enum Stopping for value: Stopping
            /// </summary>
            [EnumMember(Value = "Stopping")]
            Stopping = 8,

            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 9,

            /// <summary>
            /// Enum Syncing for value: Syncing
            /// </summary>
            [EnumMember(Value = "Syncing")]
            Syncing = 10,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 11

        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Defines StatusType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusTypeEnum
        {
            /// <summary>
            /// Enum CHANNEL for value: CHANNEL
            /// </summary>
            [EnumMember(Value = "CHANNEL")]
            CHANNEL = 1,

            /// <summary>
            /// Enum CHAIN for value: CHAIN
            /// </summary>
            [EnumMember(Value = "CHAIN")]
            CHAIN = 2,

            /// <summary>
            /// Enum SOURCECONNECTOR for value: SOURCE_CONNECTOR
            /// </summary>
            [EnumMember(Value = "SOURCE_CONNECTOR")]
            SOURCECONNECTOR = 3,

            /// <summary>
            /// Enum DESTINATIONCONNECTOR for value: DESTINATION_CONNECTOR
            /// </summary>
            [EnumMember(Value = "DESTINATION_CONNECTOR")]
            DESTINATIONCONNECTOR = 4

        }


        /// <summary>
        /// Gets or Sets StatusType
        /// </summary>
        [DataMember(Name = "statusType", EmitDefaultValue = false)]
        public StatusTypeEnum? StatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardStatus" /> class.
        /// </summary>
        /// <param name="channelId">channelId.</param>
        /// <param name="name">name.</param>
        /// <param name="state">state.</param>
        /// <param name="deployedRevisionDelta">deployedRevisionDelta.</param>
        /// <param name="deployedDate">deployedDate.</param>
        /// <param name="codeTemplatesChanged">codeTemplatesChanged.</param>
        /// <param name="statistics">statistics.</param>
        /// <param name="lifetimeStatistics">lifetimeStatistics.</param>
        /// <param name="metaDataId">metaDataId.</param>
        /// <param name="queueEnabled">queueEnabled.</param>
        /// <param name="queued">queued.</param>
        /// <param name="waitForPrevious">waitForPrevious.</param>
        /// <param name="statusType">statusType.</param>
        /// <param name="key">key.</param>
        public DashboardStatus(string channelId = default(string), string name = default(string), StateEnum? state = default(StateEnum?), int deployedRevisionDelta = default(int), DateTime deployedDate = default(DateTime), bool codeTemplatesChanged = default(bool), Dictionary<string, long> statistics = default(Dictionary<string, long>), Dictionary<string, long> lifetimeStatistics = default(Dictionary<string, long>), int metaDataId = default(int), bool queueEnabled = default(bool), long queued = default(long), bool waitForPrevious = default(bool), StatusTypeEnum? statusType = default(StatusTypeEnum?), string key = default(string))
        {
            this.ChannelId = channelId;
            this.Name = name;
            this.State = state;
            this.DeployedRevisionDelta = deployedRevisionDelta;
            this.DeployedDate = deployedDate;
            this.CodeTemplatesChanged = codeTemplatesChanged;
            this.Statistics = statistics;
            this.LifetimeStatistics = lifetimeStatistics;
            this.MetaDataId = metaDataId;
            this.QueueEnabled = queueEnabled;
            this.Queued = queued;
            this.WaitForPrevious = waitForPrevious;
            this.StatusType = statusType;
            this.Key = key;
        }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name = "channelId", EmitDefaultValue = false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DeployedRevisionDelta
        /// </summary>
        [DataMember(Name = "deployedRevisionDelta", EmitDefaultValue = false)]
        public int DeployedRevisionDelta { get; set; }

        /// <summary>
        /// Gets or Sets DeployedDate
        /// </summary>
        [DataMember(Name = "deployedDate", EmitDefaultValue = false)]
        public DateTime DeployedDate { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplatesChanged
        /// </summary>
        [DataMember(Name = "codeTemplatesChanged", EmitDefaultValue = true)]
        public bool CodeTemplatesChanged { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public Dictionary<string, long> Statistics { get; set; }

        /// <summary>
        /// Gets or Sets LifetimeStatistics
        /// </summary>
        [DataMember(Name = "lifetimeStatistics", EmitDefaultValue = false)]
        public Dictionary<string, long> LifetimeStatistics { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataId
        /// </summary>
        [DataMember(Name = "metaDataId", EmitDefaultValue = false)]
        public int MetaDataId { get; set; }

        /// <summary>
        /// Gets or Sets QueueEnabled
        /// </summary>
        [DataMember(Name = "queueEnabled", EmitDefaultValue = true)]
        public bool QueueEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name = "queued", EmitDefaultValue = false)]
        public long Queued { get; set; }

        /// <summary>
        /// Gets or Sets WaitForPrevious
        /// </summary>
        [DataMember(Name = "waitForPrevious", EmitDefaultValue = true)]
        public bool WaitForPrevious { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DashboardStatus {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DeployedRevisionDelta: ").Append(DeployedRevisionDelta).Append("\n");
            sb.Append("  DeployedDate: ").Append(DeployedDate).Append("\n");
            sb.Append("  CodeTemplatesChanged: ").Append(CodeTemplatesChanged).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  LifetimeStatistics: ").Append(LifetimeStatistics).Append("\n");
            sb.Append("  MetaDataId: ").Append(MetaDataId).Append("\n");
            sb.Append("  QueueEnabled: ").Append(QueueEnabled).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  WaitForPrevious: ").Append(WaitForPrevious).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardStatus);
        }

        /// <summary>
        /// Returns true if DashboardStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.DeployedRevisionDelta == input.DeployedRevisionDelta ||
                    this.DeployedRevisionDelta.Equals(input.DeployedRevisionDelta)
                ) && 
                (
                    this.DeployedDate == input.DeployedDate ||
                    (this.DeployedDate != null &&
                    this.DeployedDate.Equals(input.DeployedDate))
                ) && 
                (
                    this.CodeTemplatesChanged == input.CodeTemplatesChanged ||
                    this.CodeTemplatesChanged.Equals(input.CodeTemplatesChanged)
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    this.Statistics != null &&
                    input.Statistics != null &&
                    this.Statistics.SequenceEqual(input.Statistics)
                ) && 
                (
                    this.LifetimeStatistics == input.LifetimeStatistics ||
                    this.LifetimeStatistics != null &&
                    input.LifetimeStatistics != null &&
                    this.LifetimeStatistics.SequenceEqual(input.LifetimeStatistics)
                ) && 
                (
                    this.MetaDataId == input.MetaDataId ||
                    this.MetaDataId.Equals(input.MetaDataId)
                ) && 
                (
                    this.QueueEnabled == input.QueueEnabled ||
                    this.QueueEnabled.Equals(input.QueueEnabled)
                ) && 
                (
                    this.Queued == input.Queued ||
                    this.Queued.Equals(input.Queued)
                ) && 
                (
                    this.WaitForPrevious == input.WaitForPrevious ||
                    this.WaitForPrevious.Equals(input.WaitForPrevious)
                ) && 
                (
                    this.StatusType == input.StatusType ||
                    this.StatusType.Equals(input.StatusType)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.DeployedRevisionDelta.GetHashCode();
                if (this.DeployedDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeployedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CodeTemplatesChanged.GetHashCode();
                if (this.Statistics != null)
                {
                    hashCode = (hashCode * 59) + this.Statistics.GetHashCode();
                }
                if (this.LifetimeStatistics != null)
                {
                    hashCode = (hashCode * 59) + this.LifetimeStatistics.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MetaDataId.GetHashCode();
                hashCode = (hashCode * 59) + this.QueueEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Queued.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitForPrevious.GetHashCode();
                hashCode = (hashCode * 59) + this.StatusType.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
