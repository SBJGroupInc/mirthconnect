/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// FileReceiverProperties
    /// </summary>
    [DataContract(Name = "FileReceiverProperties")]
    public partial class FileReceiverProperties : IEquatable<FileReceiverProperties>, IValidatableObject
    {
        /// <summary>
        /// Defines Scheme
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,

            /// <summary>
            /// Enum Ftp for value: ftp
            /// </summary>
            [EnumMember(Value = "ftp")]
            Ftp = 2,

            /// <summary>
            /// Enum Sftp for value: sftp
            /// </summary>
            [EnumMember(Value = "sftp")]
            Sftp = 3,

            /// <summary>
            /// Enum AmazonS3 for value: Amazon S3
            /// </summary>
            [EnumMember(Value = "Amazon S3")]
            AmazonS3 = 4,

            /// <summary>
            /// Enum Smb for value: smb
            /// </summary>
            [EnumMember(Value = "smb")]
            Smb = 5,

            /// <summary>
            /// Enum Webdav for value: webdav
            /// </summary>
            [EnumMember(Value = "webdav")]
            Webdav = 6

        }


        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [DataMember(Name = "scheme", EmitDefaultValue = false)]
        public SchemeEnum? Scheme { get; set; }
        /// <summary>
        /// Defines AfterProcessingAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AfterProcessingActionEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Move for value: Move
            /// </summary>
            [EnumMember(Value = "Move")]
            Move = 2,

            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 3,

            /// <summary>
            /// Enum AfterProcessingAction for value: After Processing Action
            /// </summary>
            [EnumMember(Value = "After Processing Action")]
            AfterProcessingAction = 4

        }


        /// <summary>
        /// Gets or Sets AfterProcessingAction
        /// </summary>
        [DataMember(Name = "afterProcessingAction", EmitDefaultValue = false)]
        public AfterProcessingActionEnum? AfterProcessingAction { get; set; }
        /// <summary>
        /// Defines ErrorReadingAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorReadingActionEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Move for value: Move
            /// </summary>
            [EnumMember(Value = "Move")]
            Move = 2,

            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 3,

            /// <summary>
            /// Enum AfterProcessingAction for value: After Processing Action
            /// </summary>
            [EnumMember(Value = "After Processing Action")]
            AfterProcessingAction = 4

        }


        /// <summary>
        /// Gets or Sets ErrorReadingAction
        /// </summary>
        [DataMember(Name = "errorReadingAction", EmitDefaultValue = false)]
        public ErrorReadingActionEnum? ErrorReadingAction { get; set; }
        /// <summary>
        /// Defines ErrorResponseAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorResponseActionEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Move for value: Move
            /// </summary>
            [EnumMember(Value = "Move")]
            Move = 2,

            /// <summary>
            /// Enum Delete for value: Delete
            /// </summary>
            [EnumMember(Value = "Delete")]
            Delete = 3,

            /// <summary>
            /// Enum AfterProcessingAction for value: After Processing Action
            /// </summary>
            [EnumMember(Value = "After Processing Action")]
            AfterProcessingAction = 4

        }


        /// <summary>
        /// Gets or Sets ErrorResponseAction
        /// </summary>
        [DataMember(Name = "errorResponseAction", EmitDefaultValue = false)]
        public ErrorResponseActionEnum? ErrorResponseAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileReceiverProperties" /> class.
        /// </summary>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="pollConnectorProperties">pollConnectorProperties.</param>
        /// <param name="sourceConnectorProperties">sourceConnectorProperties.</param>
        /// <param name="scheme">scheme.</param>
        /// <param name="schemeProperties">schemeProperties.</param>
        /// <param name="host">host.</param>
        /// <param name="fileFilter">fileFilter.</param>
        /// <param name="regex">regex.</param>
        /// <param name="directoryRecursion">directoryRecursion.</param>
        /// <param name="ignoreDot">ignoreDot.</param>
        /// <param name="anonymous">anonymous.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="secure">secure.</param>
        /// <param name="passive">passive.</param>
        /// <param name="validateConnection">validateConnection.</param>
        /// <param name="afterProcessingAction">afterProcessingAction.</param>
        /// <param name="moveToDirectory">moveToDirectory.</param>
        /// <param name="moveToFileName">moveToFileName.</param>
        /// <param name="errorReadingAction">errorReadingAction.</param>
        /// <param name="errorResponseAction">errorResponseAction.</param>
        /// <param name="errorMoveToDirectory">errorMoveToDirectory.</param>
        /// <param name="errorMoveToFileName">errorMoveToFileName.</param>
        /// <param name="checkFileAge">checkFileAge.</param>
        /// <param name="fileAge">fileAge.</param>
        /// <param name="fileSizeMinimum">fileSizeMinimum.</param>
        /// <param name="fileSizeMaximum">fileSizeMaximum.</param>
        /// <param name="ignoreFileSizeMaximum">ignoreFileSizeMaximum.</param>
        /// <param name="sortBy">sortBy.</param>
        /// <param name="binary">binary.</param>
        /// <param name="charsetEncoding">charsetEncoding.</param>
        /// <param name="name">name.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public FileReceiverProperties(List<ConnectorPluginProperties> pluginProperties = default(List<ConnectorPluginProperties>), PollConnectorProperties pollConnectorProperties = default(PollConnectorProperties), SourceConnectorProperties sourceConnectorProperties = default(SourceConnectorProperties), SchemeEnum? scheme = default(SchemeEnum?), SchemeProperties schemeProperties = default(SchemeProperties), string host = default(string), string fileFilter = default(string), bool regex = default(bool), bool directoryRecursion = default(bool), bool ignoreDot = default(bool), bool anonymous = default(bool), string username = default(string), string password = default(string), string timeout = default(string), bool secure = default(bool), bool passive = default(bool), bool validateConnection = default(bool), AfterProcessingActionEnum? afterProcessingAction = default(AfterProcessingActionEnum?), string moveToDirectory = default(string), string moveToFileName = default(string), ErrorReadingActionEnum? errorReadingAction = default(ErrorReadingActionEnum?), ErrorResponseActionEnum? errorResponseAction = default(ErrorResponseActionEnum?), string errorMoveToDirectory = default(string), string errorMoveToFileName = default(string), bool checkFileAge = default(bool), string fileAge = default(string), string fileSizeMinimum = default(string), string fileSizeMaximum = default(string), bool ignoreFileSizeMaximum = default(bool), string sortBy = default(string), bool binary = default(bool), string charsetEncoding = default(string), string name = default(string), string protocol = default(string), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.PluginProperties = pluginProperties;
            this.PollConnectorProperties = pollConnectorProperties;
            this.SourceConnectorProperties = sourceConnectorProperties;
            this.Scheme = scheme;
            this.SchemeProperties = schemeProperties;
            this.Host = host;
            this.FileFilter = fileFilter;
            this.Regex = regex;
            this.DirectoryRecursion = directoryRecursion;
            this.IgnoreDot = ignoreDot;
            this.Anonymous = anonymous;
            this.Username = username;
            this.Password = password;
            this.Timeout = timeout;
            this.Secure = secure;
            this.Passive = passive;
            this.ValidateConnection = validateConnection;
            this.AfterProcessingAction = afterProcessingAction;
            this.MoveToDirectory = moveToDirectory;
            this.MoveToFileName = moveToFileName;
            this.ErrorReadingAction = errorReadingAction;
            this.ErrorResponseAction = errorResponseAction;
            this.ErrorMoveToDirectory = errorMoveToDirectory;
            this.ErrorMoveToFileName = errorMoveToFileName;
            this.CheckFileAge = checkFileAge;
            this.FileAge = fileAge;
            this.FileSizeMinimum = fileSizeMinimum;
            this.FileSizeMaximum = fileSizeMaximum;
            this.IgnoreFileSizeMaximum = ignoreFileSizeMaximum;
            this.SortBy = sortBy;
            this.Binary = binary;
            this.CharsetEncoding = charsetEncoding;
            this.Name = name;
            this.Protocol = protocol;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public List<ConnectorPluginProperties> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets PollConnectorProperties
        /// </summary>
        [DataMember(Name = "pollConnectorProperties", EmitDefaultValue = false)]
        public PollConnectorProperties PollConnectorProperties { get; set; }

        /// <summary>
        /// Gets or Sets SourceConnectorProperties
        /// </summary>
        [DataMember(Name = "sourceConnectorProperties", EmitDefaultValue = false)]
        public SourceConnectorProperties SourceConnectorProperties { get; set; }

        /// <summary>
        /// Gets or Sets SchemeProperties
        /// </summary>
        [DataMember(Name = "schemeProperties", EmitDefaultValue = false)]
        public SchemeProperties SchemeProperties { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets FileFilter
        /// </summary>
        [DataMember(Name = "fileFilter", EmitDefaultValue = false)]
        public string FileFilter { get; set; }

        /// <summary>
        /// Gets or Sets Regex
        /// </summary>
        [DataMember(Name = "regex", EmitDefaultValue = true)]
        public bool Regex { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryRecursion
        /// </summary>
        [DataMember(Name = "directoryRecursion", EmitDefaultValue = true)]
        public bool DirectoryRecursion { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreDot
        /// </summary>
        [DataMember(Name = "ignoreDot", EmitDefaultValue = true)]
        public bool IgnoreDot { get; set; }

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [DataMember(Name = "anonymous", EmitDefaultValue = true)]
        public bool Anonymous { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name = "secure", EmitDefaultValue = true)]
        public bool Secure { get; set; }

        /// <summary>
        /// Gets or Sets Passive
        /// </summary>
        [DataMember(Name = "passive", EmitDefaultValue = true)]
        public bool Passive { get; set; }

        /// <summary>
        /// Gets or Sets ValidateConnection
        /// </summary>
        [DataMember(Name = "validateConnection", EmitDefaultValue = true)]
        public bool ValidateConnection { get; set; }

        /// <summary>
        /// Gets or Sets MoveToDirectory
        /// </summary>
        [DataMember(Name = "moveToDirectory", EmitDefaultValue = false)]
        public string MoveToDirectory { get; set; }

        /// <summary>
        /// Gets or Sets MoveToFileName
        /// </summary>
        [DataMember(Name = "moveToFileName", EmitDefaultValue = false)]
        public string MoveToFileName { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMoveToDirectory
        /// </summary>
        [DataMember(Name = "errorMoveToDirectory", EmitDefaultValue = false)]
        public string ErrorMoveToDirectory { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMoveToFileName
        /// </summary>
        [DataMember(Name = "errorMoveToFileName", EmitDefaultValue = false)]
        public string ErrorMoveToFileName { get; set; }

        /// <summary>
        /// Gets or Sets CheckFileAge
        /// </summary>
        [DataMember(Name = "checkFileAge", EmitDefaultValue = true)]
        public bool CheckFileAge { get; set; }

        /// <summary>
        /// Gets or Sets FileAge
        /// </summary>
        [DataMember(Name = "fileAge", EmitDefaultValue = false)]
        public string FileAge { get; set; }

        /// <summary>
        /// Gets or Sets FileSizeMinimum
        /// </summary>
        [DataMember(Name = "fileSizeMinimum", EmitDefaultValue = false)]
        public string FileSizeMinimum { get; set; }

        /// <summary>
        /// Gets or Sets FileSizeMaximum
        /// </summary>
        [DataMember(Name = "fileSizeMaximum", EmitDefaultValue = false)]
        public string FileSizeMaximum { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreFileSizeMaximum
        /// </summary>
        [DataMember(Name = "ignoreFileSizeMaximum", EmitDefaultValue = true)]
        public bool IgnoreFileSizeMaximum { get; set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sortBy", EmitDefaultValue = false)]
        public string SortBy { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = true)]
        public bool Binary { get; set; }

        /// <summary>
        /// Gets or Sets CharsetEncoding
        /// </summary>
        [DataMember(Name = "charsetEncoding", EmitDefaultValue = false)]
        public string CharsetEncoding { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileReceiverProperties {\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  PollConnectorProperties: ").Append(PollConnectorProperties).Append("\n");
            sb.Append("  SourceConnectorProperties: ").Append(SourceConnectorProperties).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  SchemeProperties: ").Append(SchemeProperties).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  FileFilter: ").Append(FileFilter).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("  DirectoryRecursion: ").Append(DirectoryRecursion).Append("\n");
            sb.Append("  IgnoreDot: ").Append(IgnoreDot).Append("\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  Passive: ").Append(Passive).Append("\n");
            sb.Append("  ValidateConnection: ").Append(ValidateConnection).Append("\n");
            sb.Append("  AfterProcessingAction: ").Append(AfterProcessingAction).Append("\n");
            sb.Append("  MoveToDirectory: ").Append(MoveToDirectory).Append("\n");
            sb.Append("  MoveToFileName: ").Append(MoveToFileName).Append("\n");
            sb.Append("  ErrorReadingAction: ").Append(ErrorReadingAction).Append("\n");
            sb.Append("  ErrorResponseAction: ").Append(ErrorResponseAction).Append("\n");
            sb.Append("  ErrorMoveToDirectory: ").Append(ErrorMoveToDirectory).Append("\n");
            sb.Append("  ErrorMoveToFileName: ").Append(ErrorMoveToFileName).Append("\n");
            sb.Append("  CheckFileAge: ").Append(CheckFileAge).Append("\n");
            sb.Append("  FileAge: ").Append(FileAge).Append("\n");
            sb.Append("  FileSizeMinimum: ").Append(FileSizeMinimum).Append("\n");
            sb.Append("  FileSizeMaximum: ").Append(FileSizeMaximum).Append("\n");
            sb.Append("  IgnoreFileSizeMaximum: ").Append(IgnoreFileSizeMaximum).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  CharsetEncoding: ").Append(CharsetEncoding).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileReceiverProperties);
        }

        /// <summary>
        /// Returns true if FileReceiverProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of FileReceiverProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileReceiverProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.PollConnectorProperties == input.PollConnectorProperties ||
                    (this.PollConnectorProperties != null &&
                    this.PollConnectorProperties.Equals(input.PollConnectorProperties))
                ) && 
                (
                    this.SourceConnectorProperties == input.SourceConnectorProperties ||
                    (this.SourceConnectorProperties != null &&
                    this.SourceConnectorProperties.Equals(input.SourceConnectorProperties))
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    this.Scheme.Equals(input.Scheme)
                ) && 
                (
                    this.SchemeProperties == input.SchemeProperties ||
                    (this.SchemeProperties != null &&
                    this.SchemeProperties.Equals(input.SchemeProperties))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.FileFilter == input.FileFilter ||
                    (this.FileFilter != null &&
                    this.FileFilter.Equals(input.FileFilter))
                ) && 
                (
                    this.Regex == input.Regex ||
                    this.Regex.Equals(input.Regex)
                ) && 
                (
                    this.DirectoryRecursion == input.DirectoryRecursion ||
                    this.DirectoryRecursion.Equals(input.DirectoryRecursion)
                ) && 
                (
                    this.IgnoreDot == input.IgnoreDot ||
                    this.IgnoreDot.Equals(input.IgnoreDot)
                ) && 
                (
                    this.Anonymous == input.Anonymous ||
                    this.Anonymous.Equals(input.Anonymous)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.Secure == input.Secure ||
                    this.Secure.Equals(input.Secure)
                ) && 
                (
                    this.Passive == input.Passive ||
                    this.Passive.Equals(input.Passive)
                ) && 
                (
                    this.ValidateConnection == input.ValidateConnection ||
                    this.ValidateConnection.Equals(input.ValidateConnection)
                ) && 
                (
                    this.AfterProcessingAction == input.AfterProcessingAction ||
                    this.AfterProcessingAction.Equals(input.AfterProcessingAction)
                ) && 
                (
                    this.MoveToDirectory == input.MoveToDirectory ||
                    (this.MoveToDirectory != null &&
                    this.MoveToDirectory.Equals(input.MoveToDirectory))
                ) && 
                (
                    this.MoveToFileName == input.MoveToFileName ||
                    (this.MoveToFileName != null &&
                    this.MoveToFileName.Equals(input.MoveToFileName))
                ) && 
                (
                    this.ErrorReadingAction == input.ErrorReadingAction ||
                    this.ErrorReadingAction.Equals(input.ErrorReadingAction)
                ) && 
                (
                    this.ErrorResponseAction == input.ErrorResponseAction ||
                    this.ErrorResponseAction.Equals(input.ErrorResponseAction)
                ) && 
                (
                    this.ErrorMoveToDirectory == input.ErrorMoveToDirectory ||
                    (this.ErrorMoveToDirectory != null &&
                    this.ErrorMoveToDirectory.Equals(input.ErrorMoveToDirectory))
                ) && 
                (
                    this.ErrorMoveToFileName == input.ErrorMoveToFileName ||
                    (this.ErrorMoveToFileName != null &&
                    this.ErrorMoveToFileName.Equals(input.ErrorMoveToFileName))
                ) && 
                (
                    this.CheckFileAge == input.CheckFileAge ||
                    this.CheckFileAge.Equals(input.CheckFileAge)
                ) && 
                (
                    this.FileAge == input.FileAge ||
                    (this.FileAge != null &&
                    this.FileAge.Equals(input.FileAge))
                ) && 
                (
                    this.FileSizeMinimum == input.FileSizeMinimum ||
                    (this.FileSizeMinimum != null &&
                    this.FileSizeMinimum.Equals(input.FileSizeMinimum))
                ) && 
                (
                    this.FileSizeMaximum == input.FileSizeMaximum ||
                    (this.FileSizeMaximum != null &&
                    this.FileSizeMaximum.Equals(input.FileSizeMaximum))
                ) && 
                (
                    this.IgnoreFileSizeMaximum == input.IgnoreFileSizeMaximum ||
                    this.IgnoreFileSizeMaximum.Equals(input.IgnoreFileSizeMaximum)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    (this.SortBy != null &&
                    this.SortBy.Equals(input.SortBy))
                ) && 
                (
                    this.Binary == input.Binary ||
                    this.Binary.Equals(input.Binary)
                ) && 
                (
                    this.CharsetEncoding == input.CharsetEncoding ||
                    (this.CharsetEncoding != null &&
                    this.CharsetEncoding.Equals(input.CharsetEncoding))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                if (this.PollConnectorProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PollConnectorProperties.GetHashCode();
                }
                if (this.SourceConnectorProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SourceConnectorProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scheme.GetHashCode();
                if (this.SchemeProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SchemeProperties.GetHashCode();
                }
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                if (this.FileFilter != null)
                {
                    hashCode = (hashCode * 59) + this.FileFilter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Regex.GetHashCode();
                hashCode = (hashCode * 59) + this.DirectoryRecursion.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreDot.GetHashCode();
                hashCode = (hashCode * 59) + this.Anonymous.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Timeout != null)
                {
                    hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Secure.GetHashCode();
                hashCode = (hashCode * 59) + this.Passive.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidateConnection.GetHashCode();
                hashCode = (hashCode * 59) + this.AfterProcessingAction.GetHashCode();
                if (this.MoveToDirectory != null)
                {
                    hashCode = (hashCode * 59) + this.MoveToDirectory.GetHashCode();
                }
                if (this.MoveToFileName != null)
                {
                    hashCode = (hashCode * 59) + this.MoveToFileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorReadingAction.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorResponseAction.GetHashCode();
                if (this.ErrorMoveToDirectory != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMoveToDirectory.GetHashCode();
                }
                if (this.ErrorMoveToFileName != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMoveToFileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CheckFileAge.GetHashCode();
                if (this.FileAge != null)
                {
                    hashCode = (hashCode * 59) + this.FileAge.GetHashCode();
                }
                if (this.FileSizeMinimum != null)
                {
                    hashCode = (hashCode * 59) + this.FileSizeMinimum.GetHashCode();
                }
                if (this.FileSizeMaximum != null)
                {
                    hashCode = (hashCode * 59) + this.FileSizeMaximum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreFileSizeMaximum.GetHashCode();
                if (this.SortBy != null)
                {
                    hashCode = (hashCode * 59) + this.SortBy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Binary.GetHashCode();
                if (this.CharsetEncoding != null)
                {
                    hashCode = (hashCode * 59) + this.CharsetEncoding.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
