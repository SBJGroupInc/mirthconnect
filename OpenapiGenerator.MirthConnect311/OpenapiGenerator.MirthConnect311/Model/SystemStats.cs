/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// SystemStats
    /// </summary>
    [DataContract(Name = "SystemStats")]
    public partial class SystemStats : IEquatable<SystemStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemStats" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="cpuUsagePct">cpuUsagePct.</param>
        /// <param name="allocatedMemoryBytes">allocatedMemoryBytes.</param>
        /// <param name="freeMemoryBytes">freeMemoryBytes.</param>
        /// <param name="maxMemoryBytes">maxMemoryBytes.</param>
        /// <param name="diskFreeBytes">diskFreeBytes.</param>
        /// <param name="diskTotalBytes">diskTotalBytes.</param>
        public SystemStats(DateTime timestamp = default(DateTime), double cpuUsagePct = default(double), long allocatedMemoryBytes = default(long), long freeMemoryBytes = default(long), long maxMemoryBytes = default(long), long diskFreeBytes = default(long), long diskTotalBytes = default(long))
        {
            this.Timestamp = timestamp;
            this.CpuUsagePct = cpuUsagePct;
            this.AllocatedMemoryBytes = allocatedMemoryBytes;
            this.FreeMemoryBytes = freeMemoryBytes;
            this.MaxMemoryBytes = maxMemoryBytes;
            this.DiskFreeBytes = diskFreeBytes;
            this.DiskTotalBytes = diskTotalBytes;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets CpuUsagePct
        /// </summary>
        [DataMember(Name = "cpuUsagePct", EmitDefaultValue = false)]
        public double CpuUsagePct { get; set; }

        /// <summary>
        /// Gets or Sets AllocatedMemoryBytes
        /// </summary>
        [DataMember(Name = "allocatedMemoryBytes", EmitDefaultValue = false)]
        public long AllocatedMemoryBytes { get; set; }

        /// <summary>
        /// Gets or Sets FreeMemoryBytes
        /// </summary>
        [DataMember(Name = "freeMemoryBytes", EmitDefaultValue = false)]
        public long FreeMemoryBytes { get; set; }

        /// <summary>
        /// Gets or Sets MaxMemoryBytes
        /// </summary>
        [DataMember(Name = "maxMemoryBytes", EmitDefaultValue = false)]
        public long MaxMemoryBytes { get; set; }

        /// <summary>
        /// Gets or Sets DiskFreeBytes
        /// </summary>
        [DataMember(Name = "diskFreeBytes", EmitDefaultValue = false)]
        public long DiskFreeBytes { get; set; }

        /// <summary>
        /// Gets or Sets DiskTotalBytes
        /// </summary>
        [DataMember(Name = "diskTotalBytes", EmitDefaultValue = false)]
        public long DiskTotalBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemStats {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  CpuUsagePct: ").Append(CpuUsagePct).Append("\n");
            sb.Append("  AllocatedMemoryBytes: ").Append(AllocatedMemoryBytes).Append("\n");
            sb.Append("  FreeMemoryBytes: ").Append(FreeMemoryBytes).Append("\n");
            sb.Append("  MaxMemoryBytes: ").Append(MaxMemoryBytes).Append("\n");
            sb.Append("  DiskFreeBytes: ").Append(DiskFreeBytes).Append("\n");
            sb.Append("  DiskTotalBytes: ").Append(DiskTotalBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemStats);
        }

        /// <summary>
        /// Returns true if SystemStats instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemStats input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.CpuUsagePct == input.CpuUsagePct ||
                    this.CpuUsagePct.Equals(input.CpuUsagePct)
                ) && 
                (
                    this.AllocatedMemoryBytes == input.AllocatedMemoryBytes ||
                    this.AllocatedMemoryBytes.Equals(input.AllocatedMemoryBytes)
                ) && 
                (
                    this.FreeMemoryBytes == input.FreeMemoryBytes ||
                    this.FreeMemoryBytes.Equals(input.FreeMemoryBytes)
                ) && 
                (
                    this.MaxMemoryBytes == input.MaxMemoryBytes ||
                    this.MaxMemoryBytes.Equals(input.MaxMemoryBytes)
                ) && 
                (
                    this.DiskFreeBytes == input.DiskFreeBytes ||
                    this.DiskFreeBytes.Equals(input.DiskFreeBytes)
                ) && 
                (
                    this.DiskTotalBytes == input.DiskTotalBytes ||
                    this.DiskTotalBytes.Equals(input.DiskTotalBytes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CpuUsagePct.GetHashCode();
                hashCode = (hashCode * 59) + this.AllocatedMemoryBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeMemoryBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxMemoryBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.DiskFreeBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.DiskTotalBytes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
