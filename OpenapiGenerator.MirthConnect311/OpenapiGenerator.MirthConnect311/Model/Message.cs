/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// Message
    /// </summary>
    [DataContract(Name = "Message")]
    public partial class Message : IEquatable<Message>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="messageId">messageId.</param>
        /// <param name="serverId">serverId.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="receivedDate">receivedDate.</param>
        /// <param name="processed">processed.</param>
        /// <param name="originalId">originalId.</param>
        /// <param name="importId">importId.</param>
        /// <param name="importChannelId">importChannelId.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="connectorMessages">connectorMessages.</param>
        /// <param name="mergedConnectorMessage">mergedConnectorMessage.</param>
        public Message(long messageId = default(long), string serverId = default(string), string channelId = default(string), DateTime receivedDate = default(DateTime), bool processed = default(bool), long originalId = default(long), long importId = default(long), string importChannelId = default(string), List<Attachment> attachments = default(List<Attachment>), Dictionary<string, ConnectorMessage> connectorMessages = default(Dictionary<string, ConnectorMessage>), ConnectorMessage mergedConnectorMessage = default(ConnectorMessage))
        {
            this.MessageId = messageId;
            this.ServerId = serverId;
            this.ChannelId = channelId;
            this.ReceivedDate = receivedDate;
            this.Processed = processed;
            this.OriginalId = originalId;
            this.ImportId = importId;
            this.ImportChannelId = importChannelId;
            this.Attachments = attachments;
            this.ConnectorMessages = connectorMessages;
            this.MergedConnectorMessage = mergedConnectorMessage;
        }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public long MessageId { get; set; }

        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name = "serverId", EmitDefaultValue = false)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name = "channelId", EmitDefaultValue = false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedDate
        /// </summary>
        [DataMember(Name = "receivedDate", EmitDefaultValue = false)]
        public DateTime ReceivedDate { get; set; }

        /// <summary>
        /// Gets or Sets Processed
        /// </summary>
        [DataMember(Name = "processed", EmitDefaultValue = true)]
        public bool Processed { get; set; }

        /// <summary>
        /// Gets or Sets OriginalId
        /// </summary>
        [DataMember(Name = "originalId", EmitDefaultValue = false)]
        public long OriginalId { get; set; }

        /// <summary>
        /// Gets or Sets ImportId
        /// </summary>
        [DataMember(Name = "importId", EmitDefaultValue = false)]
        public long ImportId { get; set; }

        /// <summary>
        /// Gets or Sets ImportChannelId
        /// </summary>
        [DataMember(Name = "importChannelId", EmitDefaultValue = false)]
        public string ImportChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorMessages
        /// </summary>
        [DataMember(Name = "connectorMessages", EmitDefaultValue = false)]
        public Dictionary<string, ConnectorMessage> ConnectorMessages { get; set; }

        /// <summary>
        /// Gets or Sets MergedConnectorMessage
        /// </summary>
        [DataMember(Name = "mergedConnectorMessage", EmitDefaultValue = false)]
        public ConnectorMessage MergedConnectorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  OriginalId: ").Append(OriginalId).Append("\n");
            sb.Append("  ImportId: ").Append(ImportId).Append("\n");
            sb.Append("  ImportChannelId: ").Append(ImportChannelId).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ConnectorMessages: ").Append(ConnectorMessages).Append("\n");
            sb.Append("  MergedConnectorMessage: ").Append(MergedConnectorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Message);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="input">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MessageId == input.MessageId ||
                    this.MessageId.Equals(input.MessageId)
                ) && 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.Processed == input.Processed ||
                    this.Processed.Equals(input.Processed)
                ) && 
                (
                    this.OriginalId == input.OriginalId ||
                    this.OriginalId.Equals(input.OriginalId)
                ) && 
                (
                    this.ImportId == input.ImportId ||
                    this.ImportId.Equals(input.ImportId)
                ) && 
                (
                    this.ImportChannelId == input.ImportChannelId ||
                    (this.ImportChannelId != null &&
                    this.ImportChannelId.Equals(input.ImportChannelId))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.ConnectorMessages == input.ConnectorMessages ||
                    this.ConnectorMessages != null &&
                    input.ConnectorMessages != null &&
                    this.ConnectorMessages.SequenceEqual(input.ConnectorMessages)
                ) && 
                (
                    this.MergedConnectorMessage == input.MergedConnectorMessage ||
                    (this.MergedConnectorMessage != null &&
                    this.MergedConnectorMessage.Equals(input.MergedConnectorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MessageId.GetHashCode();
                if (this.ServerId != null)
                {
                    hashCode = (hashCode * 59) + this.ServerId.GetHashCode();
                }
                if (this.ChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                }
                if (this.ReceivedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Processed.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalId.GetHashCode();
                hashCode = (hashCode * 59) + this.ImportId.GetHashCode();
                if (this.ImportChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.ImportChannelId.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                if (this.ConnectorMessages != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectorMessages.GetHashCode();
                }
                if (this.MergedConnectorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.MergedConnectorMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
