/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// PasswordRequirements
    /// </summary>
    [DataContract(Name = "PasswordRequirements")]
    public partial class PasswordRequirements : IEquatable<PasswordRequirements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordRequirements" /> class.
        /// </summary>
        /// <param name="minLength">minLength.</param>
        /// <param name="minUpper">minUpper.</param>
        /// <param name="minLower">minLower.</param>
        /// <param name="minNumeric">minNumeric.</param>
        /// <param name="minSpecial">minSpecial.</param>
        /// <param name="retryLimit">retryLimit.</param>
        /// <param name="lockoutPeriod">lockoutPeriod.</param>
        /// <param name="expiration">expiration.</param>
        /// <param name="gracePeriod">gracePeriod.</param>
        /// <param name="reusePeriod">reusePeriod.</param>
        /// <param name="reuseLimit">reuseLimit.</param>
        public PasswordRequirements(int minLength = default(int), int minUpper = default(int), int minLower = default(int), int minNumeric = default(int), int minSpecial = default(int), int retryLimit = default(int), int lockoutPeriod = default(int), int expiration = default(int), int gracePeriod = default(int), int reusePeriod = default(int), int reuseLimit = default(int))
        {
            this.MinLength = minLength;
            this.MinUpper = minUpper;
            this.MinLower = minLower;
            this.MinNumeric = minNumeric;
            this.MinSpecial = minSpecial;
            this.RetryLimit = retryLimit;
            this.LockoutPeriod = lockoutPeriod;
            this.Expiration = expiration;
            this.GracePeriod = gracePeriod;
            this.ReusePeriod = reusePeriod;
            this.ReuseLimit = reuseLimit;
        }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name = "minLength", EmitDefaultValue = false)]
        public int MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MinUpper
        /// </summary>
        [DataMember(Name = "minUpper", EmitDefaultValue = false)]
        public int MinUpper { get; set; }

        /// <summary>
        /// Gets or Sets MinLower
        /// </summary>
        [DataMember(Name = "minLower", EmitDefaultValue = false)]
        public int MinLower { get; set; }

        /// <summary>
        /// Gets or Sets MinNumeric
        /// </summary>
        [DataMember(Name = "minNumeric", EmitDefaultValue = false)]
        public int MinNumeric { get; set; }

        /// <summary>
        /// Gets or Sets MinSpecial
        /// </summary>
        [DataMember(Name = "minSpecial", EmitDefaultValue = false)]
        public int MinSpecial { get; set; }

        /// <summary>
        /// Gets or Sets RetryLimit
        /// </summary>
        [DataMember(Name = "retryLimit", EmitDefaultValue = false)]
        public int RetryLimit { get; set; }

        /// <summary>
        /// Gets or Sets LockoutPeriod
        /// </summary>
        [DataMember(Name = "lockoutPeriod", EmitDefaultValue = false)]
        public int LockoutPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public int Expiration { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriod
        /// </summary>
        [DataMember(Name = "gracePeriod", EmitDefaultValue = false)]
        public int GracePeriod { get; set; }

        /// <summary>
        /// Gets or Sets ReusePeriod
        /// </summary>
        [DataMember(Name = "reusePeriod", EmitDefaultValue = false)]
        public int ReusePeriod { get; set; }

        /// <summary>
        /// Gets or Sets ReuseLimit
        /// </summary>
        [DataMember(Name = "reuseLimit", EmitDefaultValue = false)]
        public int ReuseLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordRequirements {\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MinUpper: ").Append(MinUpper).Append("\n");
            sb.Append("  MinLower: ").Append(MinLower).Append("\n");
            sb.Append("  MinNumeric: ").Append(MinNumeric).Append("\n");
            sb.Append("  MinSpecial: ").Append(MinSpecial).Append("\n");
            sb.Append("  RetryLimit: ").Append(RetryLimit).Append("\n");
            sb.Append("  LockoutPeriod: ").Append(LockoutPeriod).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  ReusePeriod: ").Append(ReusePeriod).Append("\n");
            sb.Append("  ReuseLimit: ").Append(ReuseLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordRequirements);
        }

        /// <summary>
        /// Returns true if PasswordRequirements instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordRequirements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordRequirements input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MinLength == input.MinLength ||
                    this.MinLength.Equals(input.MinLength)
                ) && 
                (
                    this.MinUpper == input.MinUpper ||
                    this.MinUpper.Equals(input.MinUpper)
                ) && 
                (
                    this.MinLower == input.MinLower ||
                    this.MinLower.Equals(input.MinLower)
                ) && 
                (
                    this.MinNumeric == input.MinNumeric ||
                    this.MinNumeric.Equals(input.MinNumeric)
                ) && 
                (
                    this.MinSpecial == input.MinSpecial ||
                    this.MinSpecial.Equals(input.MinSpecial)
                ) && 
                (
                    this.RetryLimit == input.RetryLimit ||
                    this.RetryLimit.Equals(input.RetryLimit)
                ) && 
                (
                    this.LockoutPeriod == input.LockoutPeriod ||
                    this.LockoutPeriod.Equals(input.LockoutPeriod)
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    this.Expiration.Equals(input.Expiration)
                ) && 
                (
                    this.GracePeriod == input.GracePeriod ||
                    this.GracePeriod.Equals(input.GracePeriod)
                ) && 
                (
                    this.ReusePeriod == input.ReusePeriod ||
                    this.ReusePeriod.Equals(input.ReusePeriod)
                ) && 
                (
                    this.ReuseLimit == input.ReuseLimit ||
                    this.ReuseLimit.Equals(input.ReuseLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MinLength.GetHashCode();
                hashCode = (hashCode * 59) + this.MinUpper.GetHashCode();
                hashCode = (hashCode * 59) + this.MinLower.GetHashCode();
                hashCode = (hashCode * 59) + this.MinNumeric.GetHashCode();
                hashCode = (hashCode * 59) + this.MinSpecial.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.LockoutPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.Expiration.GetHashCode();
                hashCode = (hashCode * 59) + this.GracePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.ReusePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.ReuseLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
