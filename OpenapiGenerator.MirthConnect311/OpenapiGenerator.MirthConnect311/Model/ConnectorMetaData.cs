/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ConnectorMetaData
    /// </summary>
    [DataContract(Name = "ConnectorMetaData")]
    public partial class ConnectorMetaData : IEquatable<ConnectorMetaData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SOURCE for value: SOURCE
            /// </summary>
            [EnumMember(Value = "SOURCE")]
            SOURCE = 1,

            /// <summary>
            /// Enum DESTINATION for value: DESTINATION
            /// </summary>
            [EnumMember(Value = "DESTINATION")]
            DESTINATION = 2

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorMetaData" /> class.
        /// </summary>
        /// <param name="path">path.</param>
        /// <param name="name">name.</param>
        /// <param name="author">author.</param>
        /// <param name="mirthVersion">mirthVersion.</param>
        /// <param name="pluginVersion">pluginVersion.</param>
        /// <param name="url">url.</param>
        /// <param name="description">description.</param>
        /// <param name="apiProviders">apiProviders.</param>
        /// <param name="libraries">libraries.</param>
        /// <param name="templateClassName">templateClassName.</param>
        /// <param name="userutilPackages">userutilPackages.</param>
        /// <param name="notify">notify.</param>
        /// <param name="serverClassName">serverClassName.</param>
        /// <param name="sharedClassName">sharedClassName.</param>
        /// <param name="clientClassName">clientClassName.</param>
        /// <param name="transformers">transformers.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="type">type.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public ConnectorMetaData(string path = default(string), string name = default(string), string author = default(string), string mirthVersion = default(string), string pluginVersion = default(string), string url = default(string), string description = default(string), List<ApiProvider> apiProviders = default(List<ApiProvider>), List<ExtensionLibrary> libraries = default(List<ExtensionLibrary>), string templateClassName = default(string), List<string> userutilPackages = default(List<string>), bool notify = default(bool), string serverClassName = default(string), string sharedClassName = default(string), string clientClassName = default(string), string transformers = default(string), string protocol = default(string), TypeEnum? type = default(TypeEnum?), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.Path = path;
            this.Name = name;
            this.Author = author;
            this.MirthVersion = mirthVersion;
            this.PluginVersion = pluginVersion;
            this.Url = url;
            this.Description = description;
            this.ApiProviders = apiProviders;
            this.Libraries = libraries;
            this.TemplateClassName = templateClassName;
            this.UserutilPackages = userutilPackages;
            this.Notify = notify;
            this.ServerClassName = serverClassName;
            this.SharedClassName = sharedClassName;
            this.ClientClassName = clientClassName;
            this.Transformers = transformers;
            this.Protocol = protocol;
            this.Type = type;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets MirthVersion
        /// </summary>
        [DataMember(Name = "mirthVersion", EmitDefaultValue = false)]
        public string MirthVersion { get; set; }

        /// <summary>
        /// Gets or Sets PluginVersion
        /// </summary>
        [DataMember(Name = "pluginVersion", EmitDefaultValue = false)]
        public string PluginVersion { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ApiProviders
        /// </summary>
        [DataMember(Name = "apiProviders", EmitDefaultValue = false)]
        public List<ApiProvider> ApiProviders { get; set; }

        /// <summary>
        /// Gets or Sets Libraries
        /// </summary>
        [DataMember(Name = "libraries", EmitDefaultValue = false)]
        public List<ExtensionLibrary> Libraries { get; set; }

        /// <summary>
        /// Gets or Sets TemplateClassName
        /// </summary>
        [DataMember(Name = "templateClassName", EmitDefaultValue = false)]
        public string TemplateClassName { get; set; }

        /// <summary>
        /// Gets or Sets UserutilPackages
        /// </summary>
        [DataMember(Name = "userutilPackages", EmitDefaultValue = false)]
        public List<string> UserutilPackages { get; set; }

        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name = "notify", EmitDefaultValue = true)]
        public bool Notify { get; set; }

        /// <summary>
        /// Gets or Sets ServerClassName
        /// </summary>
        [DataMember(Name = "serverClassName", EmitDefaultValue = false)]
        public string ServerClassName { get; set; }

        /// <summary>
        /// Gets or Sets SharedClassName
        /// </summary>
        [DataMember(Name = "sharedClassName", EmitDefaultValue = false)]
        public string SharedClassName { get; set; }

        /// <summary>
        /// Gets or Sets ClientClassName
        /// </summary>
        [DataMember(Name = "clientClassName", EmitDefaultValue = false)]
        public string ClientClassName { get; set; }

        /// <summary>
        /// Gets or Sets Transformers
        /// </summary>
        [DataMember(Name = "transformers", EmitDefaultValue = false)]
        public string Transformers { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorMetaData {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  MirthVersion: ").Append(MirthVersion).Append("\n");
            sb.Append("  PluginVersion: ").Append(PluginVersion).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ApiProviders: ").Append(ApiProviders).Append("\n");
            sb.Append("  Libraries: ").Append(Libraries).Append("\n");
            sb.Append("  TemplateClassName: ").Append(TemplateClassName).Append("\n");
            sb.Append("  UserutilPackages: ").Append(UserutilPackages).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  ServerClassName: ").Append(ServerClassName).Append("\n");
            sb.Append("  SharedClassName: ").Append(SharedClassName).Append("\n");
            sb.Append("  ClientClassName: ").Append(ClientClassName).Append("\n");
            sb.Append("  Transformers: ").Append(Transformers).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorMetaData);
        }

        /// <summary>
        /// Returns true if ConnectorMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorMetaData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.MirthVersion == input.MirthVersion ||
                    (this.MirthVersion != null &&
                    this.MirthVersion.Equals(input.MirthVersion))
                ) && 
                (
                    this.PluginVersion == input.PluginVersion ||
                    (this.PluginVersion != null &&
                    this.PluginVersion.Equals(input.PluginVersion))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ApiProviders == input.ApiProviders ||
                    this.ApiProviders != null &&
                    input.ApiProviders != null &&
                    this.ApiProviders.SequenceEqual(input.ApiProviders)
                ) && 
                (
                    this.Libraries == input.Libraries ||
                    this.Libraries != null &&
                    input.Libraries != null &&
                    this.Libraries.SequenceEqual(input.Libraries)
                ) && 
                (
                    this.TemplateClassName == input.TemplateClassName ||
                    (this.TemplateClassName != null &&
                    this.TemplateClassName.Equals(input.TemplateClassName))
                ) && 
                (
                    this.UserutilPackages == input.UserutilPackages ||
                    this.UserutilPackages != null &&
                    input.UserutilPackages != null &&
                    this.UserutilPackages.SequenceEqual(input.UserutilPackages)
                ) && 
                (
                    this.Notify == input.Notify ||
                    this.Notify.Equals(input.Notify)
                ) && 
                (
                    this.ServerClassName == input.ServerClassName ||
                    (this.ServerClassName != null &&
                    this.ServerClassName.Equals(input.ServerClassName))
                ) && 
                (
                    this.SharedClassName == input.SharedClassName ||
                    (this.SharedClassName != null &&
                    this.SharedClassName.Equals(input.SharedClassName))
                ) && 
                (
                    this.ClientClassName == input.ClientClassName ||
                    (this.ClientClassName != null &&
                    this.ClientClassName.Equals(input.ClientClassName))
                ) && 
                (
                    this.Transformers == input.Transformers ||
                    (this.Transformers != null &&
                    this.Transformers.Equals(input.Transformers))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.MirthVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MirthVersion.GetHashCode();
                }
                if (this.PluginVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PluginVersion.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ApiProviders != null)
                {
                    hashCode = (hashCode * 59) + this.ApiProviders.GetHashCode();
                }
                if (this.Libraries != null)
                {
                    hashCode = (hashCode * 59) + this.Libraries.GetHashCode();
                }
                if (this.TemplateClassName != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateClassName.GetHashCode();
                }
                if (this.UserutilPackages != null)
                {
                    hashCode = (hashCode * 59) + this.UserutilPackages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Notify.GetHashCode();
                if (this.ServerClassName != null)
                {
                    hashCode = (hashCode * 59) + this.ServerClassName.GetHashCode();
                }
                if (this.SharedClassName != null)
                {
                    hashCode = (hashCode * 59) + this.SharedClassName.GetHashCode();
                }
                if (this.ClientClassName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientClassName.GetHashCode();
                }
                if (this.Transformers != null)
                {
                    hashCode = (hashCode * 59) + this.Transformers.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
