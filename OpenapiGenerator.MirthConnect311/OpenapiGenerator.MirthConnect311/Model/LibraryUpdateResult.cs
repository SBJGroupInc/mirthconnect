/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// LibraryUpdateResult
    /// </summary>
    [DataContract(Name = "LibraryUpdateResult")]
    public partial class LibraryUpdateResult : IEquatable<LibraryUpdateResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryUpdateResult" /> class.
        /// </summary>
        /// <param name="newRevision">newRevision.</param>
        /// <param name="newLastModified">newLastModified.</param>
        public LibraryUpdateResult(int newRevision = default(int), DateTime newLastModified = default(DateTime))
        {
            this.NewRevision = newRevision;
            this.NewLastModified = newLastModified;
        }

        /// <summary>
        /// Gets or Sets NewRevision
        /// </summary>
        [DataMember(Name = "newRevision", EmitDefaultValue = false)]
        public int NewRevision { get; set; }

        /// <summary>
        /// Gets or Sets NewLastModified
        /// </summary>
        [DataMember(Name = "newLastModified", EmitDefaultValue = false)]
        public DateTime NewLastModified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryUpdateResult {\n");
            sb.Append("  NewRevision: ").Append(NewRevision).Append("\n");
            sb.Append("  NewLastModified: ").Append(NewLastModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryUpdateResult);
        }

        /// <summary>
        /// Returns true if LibraryUpdateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryUpdateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryUpdateResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NewRevision == input.NewRevision ||
                    this.NewRevision.Equals(input.NewRevision)
                ) && 
                (
                    this.NewLastModified == input.NewLastModified ||
                    (this.NewLastModified != null &&
                    this.NewLastModified.Equals(input.NewLastModified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NewRevision.GetHashCode();
                if (this.NewLastModified != null)
                {
                    hashCode = (hashCode * 59) + this.NewLastModified.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
