/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ChannelStatistics
    /// </summary>
    [DataContract(Name = "ChannelStatistics")]
    public partial class ChannelStatistics : IEquatable<ChannelStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStatistics" /> class.
        /// </summary>
        /// <param name="serverId">serverId.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="received">received.</param>
        /// <param name="sent">sent.</param>
        /// <param name="error">error.</param>
        /// <param name="filtered">filtered.</param>
        /// <param name="queued">queued.</param>
        public ChannelStatistics(string serverId = default(string), string channelId = default(string), long received = default(long), long sent = default(long), long error = default(long), long filtered = default(long), long queued = default(long))
        {
            this.ServerId = serverId;
            this.ChannelId = channelId;
            this.Received = received;
            this.Sent = sent;
            this.Error = error;
            this.Filtered = filtered;
            this.Queued = queued;
        }

        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name = "serverId", EmitDefaultValue = false)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name = "channelId", EmitDefaultValue = false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name = "received", EmitDefaultValue = false)]
        public long Received { get; set; }

        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        [DataMember(Name = "sent", EmitDefaultValue = false)]
        public long Sent { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public long Error { get; set; }

        /// <summary>
        /// Gets or Sets Filtered
        /// </summary>
        [DataMember(Name = "filtered", EmitDefaultValue = false)]
        public long Filtered { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name = "queued", EmitDefaultValue = false)]
        public long Queued { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelStatistics {\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Filtered: ").Append(Filtered).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelStatistics);
        }

        /// <summary>
        /// Returns true if ChannelStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Received == input.Received ||
                    this.Received.Equals(input.Received)
                ) && 
                (
                    this.Sent == input.Sent ||
                    this.Sent.Equals(input.Sent)
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error.Equals(input.Error)
                ) && 
                (
                    this.Filtered == input.Filtered ||
                    this.Filtered.Equals(input.Filtered)
                ) && 
                (
                    this.Queued == input.Queued ||
                    this.Queued.Equals(input.Queued)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServerId != null)
                {
                    hashCode = (hashCode * 59) + this.ServerId.GetHashCode();
                }
                if (this.ChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Received.GetHashCode();
                hashCode = (hashCode * 59) + this.Sent.GetHashCode();
                hashCode = (hashCode * 59) + this.Error.GetHashCode();
                hashCode = (hashCode * 59) + this.Filtered.GetHashCode();
                hashCode = (hashCode * 59) + this.Queued.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
