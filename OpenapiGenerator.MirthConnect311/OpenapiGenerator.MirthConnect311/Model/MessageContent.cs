/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// MessageContent
    /// </summary>
    [DataContract(Name = "MessageContent")]
    public partial class MessageContent : IEquatable<MessageContent>, IValidatableObject
    {
        /// <summary>
        /// Defines ContentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum Raw for value: Raw
            /// </summary>
            [EnumMember(Value = "Raw")]
            Raw = 1,

            /// <summary>
            /// Enum ProcessedRaw for value: Processed Raw
            /// </summary>
            [EnumMember(Value = "Processed Raw")]
            ProcessedRaw = 2,

            /// <summary>
            /// Enum Transformed for value: Transformed
            /// </summary>
            [EnumMember(Value = "Transformed")]
            Transformed = 3,

            /// <summary>
            /// Enum Encoded for value: Encoded
            /// </summary>
            [EnumMember(Value = "Encoded")]
            Encoded = 4,

            /// <summary>
            /// Enum Sent for value: Sent
            /// </summary>
            [EnumMember(Value = "Sent")]
            Sent = 5,

            /// <summary>
            /// Enum Response for value: Response
            /// </summary>
            [EnumMember(Value = "Response")]
            Response = 6,

            /// <summary>
            /// Enum ResponseTransformed for value: Response Transformed
            /// </summary>
            [EnumMember(Value = "Response Transformed")]
            ResponseTransformed = 7,

            /// <summary>
            /// Enum ProcessedResponse for value: Processed Response
            /// </summary>
            [EnumMember(Value = "Processed Response")]
            ProcessedResponse = 8,

            /// <summary>
            /// Enum ConnectorMap for value: Connector Map
            /// </summary>
            [EnumMember(Value = "Connector Map")]
            ConnectorMap = 9,

            /// <summary>
            /// Enum ChannelMap for value: Channel Map
            /// </summary>
            [EnumMember(Value = "Channel Map")]
            ChannelMap = 10,

            /// <summary>
            /// Enum ResponseMap for value: Response Map
            /// </summary>
            [EnumMember(Value = "Response Map")]
            ResponseMap = 11,

            /// <summary>
            /// Enum ProcessingError for value: Processing Error
            /// </summary>
            [EnumMember(Value = "Processing Error")]
            ProcessingError = 12,

            /// <summary>
            /// Enum PostprocessorError for value: Postprocessor Error
            /// </summary>
            [EnumMember(Value = "Postprocessor Error")]
            PostprocessorError = 13,

            /// <summary>
            /// Enum ResponseError for value: Response Error
            /// </summary>
            [EnumMember(Value = "Response Error")]
            ResponseError = 14,

            /// <summary>
            /// Enum SourceMap for value: Source Map
            /// </summary>
            [EnumMember(Value = "Source Map")]
            SourceMap = 15

        }


        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public ContentTypeEnum? ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContent" /> class.
        /// </summary>
        /// <param name="encrypted">encrypted.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="metaDataId">metaDataId.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="content">content.</param>
        /// <param name="dataType">dataType.</param>
        public MessageContent(bool encrypted = default(bool), string channelId = default(string), long messageId = default(long), int metaDataId = default(int), ContentTypeEnum? contentType = default(ContentTypeEnum?), string content = default(string), string dataType = default(string))
        {
            this.Encrypted = encrypted;
            this.ChannelId = channelId;
            this.MessageId = messageId;
            this.MetaDataId = metaDataId;
            this.ContentType = contentType;
            this.Content = content;
            this.DataType = dataType;
        }

        /// <summary>
        /// Gets or Sets Encrypted
        /// </summary>
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name = "channelId", EmitDefaultValue = false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public long MessageId { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataId
        /// </summary>
        [DataMember(Name = "metaDataId", EmitDefaultValue = false)]
        public int MetaDataId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageContent {\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MetaDataId: ").Append(MetaDataId).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageContent);
        }

        /// <summary>
        /// Returns true if MessageContent instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Encrypted == input.Encrypted ||
                    this.Encrypted.Equals(input.Encrypted)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    this.MessageId.Equals(input.MessageId)
                ) && 
                (
                    this.MetaDataId == input.MetaDataId ||
                    this.MetaDataId.Equals(input.MetaDataId)
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    this.ContentType.Equals(input.ContentType)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Encrypted.GetHashCode();
                if (this.ChannelId != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MessageId.GetHashCode();
                hashCode = (hashCode * 59) + this.MetaDataId.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
