/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// MessageFilter
    /// </summary>
    [DataContract(Name = "MessageFilter")]
    public partial class MessageFilter : IEquatable<MessageFilter>, IValidatableObject
    {
        /// <summary>
        /// Defines Statuses
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusesEnum
        {
            /// <summary>
            /// Enum RECEIVED for value: RECEIVED
            /// </summary>
            [EnumMember(Value = "RECEIVED")]
            RECEIVED = 1,

            /// <summary>
            /// Enum FILTERED for value: FILTERED
            /// </summary>
            [EnumMember(Value = "FILTERED")]
            FILTERED = 2,

            /// <summary>
            /// Enum TRANSFORMED for value: TRANSFORMED
            /// </summary>
            [EnumMember(Value = "TRANSFORMED")]
            TRANSFORMED = 3,

            /// <summary>
            /// Enum SENT for value: SENT
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENT = 4,

            /// <summary>
            /// Enum QUEUED for value: QUEUED
            /// </summary>
            [EnumMember(Value = "QUEUED")]
            QUEUED = 5,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 6,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 7

        }



        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<StatusesEnum> Statuses { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageFilter" /> class.
        /// </summary>
        /// <param name="maxMessageId">maxMessageId.</param>
        /// <param name="minMessageId">minMessageId.</param>
        /// <param name="originalIdUpper">originalIdUpper.</param>
        /// <param name="originalIdLower">originalIdLower.</param>
        /// <param name="importIdUpper">importIdUpper.</param>
        /// <param name="importIdLower">importIdLower.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="textSearch">textSearch.</param>
        /// <param name="textSearchRegex">textSearchRegex.</param>
        /// <param name="statuses">statuses.</param>
        /// <param name="includedMetaDataIds">includedMetaDataIds.</param>
        /// <param name="excludedMetaDataIds">excludedMetaDataIds.</param>
        /// <param name="serverId">serverId.</param>
        /// <param name="contentSearch">contentSearch.</param>
        /// <param name="metaDataSearch">metaDataSearch.</param>
        /// <param name="textSearchMetaDataColumns">textSearchMetaDataColumns.</param>
        /// <param name="sendAttemptsLower">sendAttemptsLower.</param>
        /// <param name="sendAttemptsUpper">sendAttemptsUpper.</param>
        /// <param name="attachment">attachment.</param>
        /// <param name="error">error.</param>
        public MessageFilter(long maxMessageId = default(long), long minMessageId = default(long), long originalIdUpper = default(long), long originalIdLower = default(long), long importIdUpper = default(long), long importIdLower = default(long), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), string textSearch = default(string), bool textSearchRegex = default(bool), List<StatusesEnum> statuses = default(List<StatusesEnum>), List<int> includedMetaDataIds = default(List<int>), List<int> excludedMetaDataIds = default(List<int>), string serverId = default(string), List<ContentSearchElement> contentSearch = default(List<ContentSearchElement>), List<MetaDataSearchElement> metaDataSearch = default(List<MetaDataSearchElement>), List<string> textSearchMetaDataColumns = default(List<string>), int sendAttemptsLower = default(int), int sendAttemptsUpper = default(int), bool attachment = default(bool), bool error = default(bool))
        {
            this.MaxMessageId = maxMessageId;
            this.MinMessageId = minMessageId;
            this.OriginalIdUpper = originalIdUpper;
            this.OriginalIdLower = originalIdLower;
            this.ImportIdUpper = importIdUpper;
            this.ImportIdLower = importIdLower;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.TextSearch = textSearch;
            this.TextSearchRegex = textSearchRegex;
            this.Statuses = statuses;
            this.IncludedMetaDataIds = includedMetaDataIds;
            this.ExcludedMetaDataIds = excludedMetaDataIds;
            this.ServerId = serverId;
            this.ContentSearch = contentSearch;
            this.MetaDataSearch = metaDataSearch;
            this.TextSearchMetaDataColumns = textSearchMetaDataColumns;
            this.SendAttemptsLower = sendAttemptsLower;
            this.SendAttemptsUpper = sendAttemptsUpper;
            this.Attachment = attachment;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets MaxMessageId
        /// </summary>
        [DataMember(Name = "maxMessageId", EmitDefaultValue = false)]
        public long MaxMessageId { get; set; }

        /// <summary>
        /// Gets or Sets MinMessageId
        /// </summary>
        [DataMember(Name = "minMessageId", EmitDefaultValue = false)]
        public long MinMessageId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalIdUpper
        /// </summary>
        [DataMember(Name = "originalIdUpper", EmitDefaultValue = false)]
        public long OriginalIdUpper { get; set; }

        /// <summary>
        /// Gets or Sets OriginalIdLower
        /// </summary>
        [DataMember(Name = "originalIdLower", EmitDefaultValue = false)]
        public long OriginalIdLower { get; set; }

        /// <summary>
        /// Gets or Sets ImportIdUpper
        /// </summary>
        [DataMember(Name = "importIdUpper", EmitDefaultValue = false)]
        public long ImportIdUpper { get; set; }

        /// <summary>
        /// Gets or Sets ImportIdLower
        /// </summary>
        [DataMember(Name = "importIdLower", EmitDefaultValue = false)]
        public long ImportIdLower { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets TextSearch
        /// </summary>
        [DataMember(Name = "textSearch", EmitDefaultValue = false)]
        public string TextSearch { get; set; }

        /// <summary>
        /// Gets or Sets TextSearchRegex
        /// </summary>
        [DataMember(Name = "textSearchRegex", EmitDefaultValue = true)]
        public bool TextSearchRegex { get; set; }

        /// <summary>
        /// Gets or Sets IncludedMetaDataIds
        /// </summary>
        [DataMember(Name = "includedMetaDataIds", EmitDefaultValue = false)]
        public List<int> IncludedMetaDataIds { get; set; }

        /// <summary>
        /// Gets or Sets ExcludedMetaDataIds
        /// </summary>
        [DataMember(Name = "excludedMetaDataIds", EmitDefaultValue = false)]
        public List<int> ExcludedMetaDataIds { get; set; }

        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name = "serverId", EmitDefaultValue = false)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or Sets ContentSearch
        /// </summary>
        [DataMember(Name = "contentSearch", EmitDefaultValue = false)]
        public List<ContentSearchElement> ContentSearch { get; set; }

        /// <summary>
        /// Gets or Sets MetaDataSearch
        /// </summary>
        [DataMember(Name = "metaDataSearch", EmitDefaultValue = false)]
        public List<MetaDataSearchElement> MetaDataSearch { get; set; }

        /// <summary>
        /// Gets or Sets TextSearchMetaDataColumns
        /// </summary>
        [DataMember(Name = "textSearchMetaDataColumns", EmitDefaultValue = false)]
        public List<string> TextSearchMetaDataColumns { get; set; }

        /// <summary>
        /// Gets or Sets SendAttemptsLower
        /// </summary>
        [DataMember(Name = "sendAttemptsLower", EmitDefaultValue = false)]
        public int SendAttemptsLower { get; set; }

        /// <summary>
        /// Gets or Sets SendAttemptsUpper
        /// </summary>
        [DataMember(Name = "sendAttemptsUpper", EmitDefaultValue = false)]
        public int SendAttemptsUpper { get; set; }

        /// <summary>
        /// Gets or Sets Attachment
        /// </summary>
        [DataMember(Name = "attachment", EmitDefaultValue = true)]
        public bool Attachment { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public bool Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageFilter {\n");
            sb.Append("  MaxMessageId: ").Append(MaxMessageId).Append("\n");
            sb.Append("  MinMessageId: ").Append(MinMessageId).Append("\n");
            sb.Append("  OriginalIdUpper: ").Append(OriginalIdUpper).Append("\n");
            sb.Append("  OriginalIdLower: ").Append(OriginalIdLower).Append("\n");
            sb.Append("  ImportIdUpper: ").Append(ImportIdUpper).Append("\n");
            sb.Append("  ImportIdLower: ").Append(ImportIdLower).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TextSearch: ").Append(TextSearch).Append("\n");
            sb.Append("  TextSearchRegex: ").Append(TextSearchRegex).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  IncludedMetaDataIds: ").Append(IncludedMetaDataIds).Append("\n");
            sb.Append("  ExcludedMetaDataIds: ").Append(ExcludedMetaDataIds).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ContentSearch: ").Append(ContentSearch).Append("\n");
            sb.Append("  MetaDataSearch: ").Append(MetaDataSearch).Append("\n");
            sb.Append("  TextSearchMetaDataColumns: ").Append(TextSearchMetaDataColumns).Append("\n");
            sb.Append("  SendAttemptsLower: ").Append(SendAttemptsLower).Append("\n");
            sb.Append("  SendAttemptsUpper: ").Append(SendAttemptsUpper).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageFilter);
        }

        /// <summary>
        /// Returns true if MessageFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxMessageId == input.MaxMessageId ||
                    this.MaxMessageId.Equals(input.MaxMessageId)
                ) && 
                (
                    this.MinMessageId == input.MinMessageId ||
                    this.MinMessageId.Equals(input.MinMessageId)
                ) && 
                (
                    this.OriginalIdUpper == input.OriginalIdUpper ||
                    this.OriginalIdUpper.Equals(input.OriginalIdUpper)
                ) && 
                (
                    this.OriginalIdLower == input.OriginalIdLower ||
                    this.OriginalIdLower.Equals(input.OriginalIdLower)
                ) && 
                (
                    this.ImportIdUpper == input.ImportIdUpper ||
                    this.ImportIdUpper.Equals(input.ImportIdUpper)
                ) && 
                (
                    this.ImportIdLower == input.ImportIdLower ||
                    this.ImportIdLower.Equals(input.ImportIdLower)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TextSearch == input.TextSearch ||
                    (this.TextSearch != null &&
                    this.TextSearch.Equals(input.TextSearch))
                ) && 
                (
                    this.TextSearchRegex == input.TextSearchRegex ||
                    this.TextSearchRegex.Equals(input.TextSearchRegex)
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.IncludedMetaDataIds == input.IncludedMetaDataIds ||
                    this.IncludedMetaDataIds != null &&
                    input.IncludedMetaDataIds != null &&
                    this.IncludedMetaDataIds.SequenceEqual(input.IncludedMetaDataIds)
                ) && 
                (
                    this.ExcludedMetaDataIds == input.ExcludedMetaDataIds ||
                    this.ExcludedMetaDataIds != null &&
                    input.ExcludedMetaDataIds != null &&
                    this.ExcludedMetaDataIds.SequenceEqual(input.ExcludedMetaDataIds)
                ) && 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.ContentSearch == input.ContentSearch ||
                    this.ContentSearch != null &&
                    input.ContentSearch != null &&
                    this.ContentSearch.SequenceEqual(input.ContentSearch)
                ) && 
                (
                    this.MetaDataSearch == input.MetaDataSearch ||
                    this.MetaDataSearch != null &&
                    input.MetaDataSearch != null &&
                    this.MetaDataSearch.SequenceEqual(input.MetaDataSearch)
                ) && 
                (
                    this.TextSearchMetaDataColumns == input.TextSearchMetaDataColumns ||
                    this.TextSearchMetaDataColumns != null &&
                    input.TextSearchMetaDataColumns != null &&
                    this.TextSearchMetaDataColumns.SequenceEqual(input.TextSearchMetaDataColumns)
                ) && 
                (
                    this.SendAttemptsLower == input.SendAttemptsLower ||
                    this.SendAttemptsLower.Equals(input.SendAttemptsLower)
                ) && 
                (
                    this.SendAttemptsUpper == input.SendAttemptsUpper ||
                    this.SendAttemptsUpper.Equals(input.SendAttemptsUpper)
                ) && 
                (
                    this.Attachment == input.Attachment ||
                    this.Attachment.Equals(input.Attachment)
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error.Equals(input.Error)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxMessageId.GetHashCode();
                hashCode = (hashCode * 59) + this.MinMessageId.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalIdUpper.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalIdLower.GetHashCode();
                hashCode = (hashCode * 59) + this.ImportIdUpper.GetHashCode();
                hashCode = (hashCode * 59) + this.ImportIdLower.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.TextSearch != null)
                {
                    hashCode = (hashCode * 59) + this.TextSearch.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TextSearchRegex.GetHashCode();
                hashCode = (hashCode * 59) + this.Statuses.GetHashCode();
                if (this.IncludedMetaDataIds != null)
                {
                    hashCode = (hashCode * 59) + this.IncludedMetaDataIds.GetHashCode();
                }
                if (this.ExcludedMetaDataIds != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludedMetaDataIds.GetHashCode();
                }
                if (this.ServerId != null)
                {
                    hashCode = (hashCode * 59) + this.ServerId.GetHashCode();
                }
                if (this.ContentSearch != null)
                {
                    hashCode = (hashCode * 59) + this.ContentSearch.GetHashCode();
                }
                if (this.MetaDataSearch != null)
                {
                    hashCode = (hashCode * 59) + this.MetaDataSearch.GetHashCode();
                }
                if (this.TextSearchMetaDataColumns != null)
                {
                    hashCode = (hashCode * 59) + this.TextSearchMetaDataColumns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SendAttemptsLower.GetHashCode();
                hashCode = (hashCode * 59) + this.SendAttemptsUpper.GetHashCode();
                hashCode = (hashCode * 59) + this.Attachment.GetHashCode();
                hashCode = (hashCode * 59) + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
