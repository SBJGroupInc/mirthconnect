/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ChannelHeader
    /// </summary>
    [DataContract(Name = "ChannelHeader")]
    public partial class ChannelHeader : IEquatable<ChannelHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelHeader" /> class.
        /// </summary>
        /// <param name="revision">revision.</param>
        /// <param name="deployedDate">deployedDate.</param>
        /// <param name="codeTemplatesChanged">codeTemplatesChanged.</param>
        public ChannelHeader(int revision = default(int), DateTime deployedDate = default(DateTime), bool codeTemplatesChanged = default(bool))
        {
            this.Revision = revision;
            this.DeployedDate = deployedDate;
            this.CodeTemplatesChanged = codeTemplatesChanged;
        }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or Sets DeployedDate
        /// </summary>
        [DataMember(Name = "deployedDate", EmitDefaultValue = false)]
        public DateTime DeployedDate { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplatesChanged
        /// </summary>
        [DataMember(Name = "codeTemplatesChanged", EmitDefaultValue = true)]
        public bool CodeTemplatesChanged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelHeader {\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  DeployedDate: ").Append(DeployedDate).Append("\n");
            sb.Append("  CodeTemplatesChanged: ").Append(CodeTemplatesChanged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelHeader);
        }

        /// <summary>
        /// Returns true if ChannelHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.DeployedDate == input.DeployedDate ||
                    (this.DeployedDate != null &&
                    this.DeployedDate.Equals(input.DeployedDate))
                ) && 
                (
                    this.CodeTemplatesChanged == input.CodeTemplatesChanged ||
                    this.CodeTemplatesChanged.Equals(input.CodeTemplatesChanged)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                if (this.DeployedDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeployedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CodeTemplatesChanged.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
