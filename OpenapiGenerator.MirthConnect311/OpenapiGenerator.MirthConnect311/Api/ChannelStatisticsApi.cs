/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ClearAllStatistics();

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearAllStatisticsWithHttpInfo();
        /// <summary>
        /// Clears the statistics for the given channels and/or connectors.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <returns></returns>
        void ClearStatistics(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?));

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearStatisticsWithHttpInfo(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?));
        /// <summary>
        /// Returns the Statistics for all channels.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <returns>List&lt;ChannelStatistics&gt;</returns>
        List<ChannelStatistics> GetStatistics(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?));

        /// <summary>
        /// Returns the Statistics for all channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelStatistics&gt;</returns>
        ApiResponse<List<ChannelStatistics>> GetStatisticsWithHttpInfo(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?));
        /// <summary>
        /// Returns the Statistics for the channel with the specified id.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <returns>ChannelStatistics</returns>
        ChannelStatistics GetStatistics1(string channelId);

        /// <summary>
        /// Returns the Statistics for the channel with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        ApiResponse<ChannelStatistics> GetStatistics1WithHttpInfo(string channelId);
        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <returns>List&lt;ChannelStatistics&gt;</returns>
        List<ChannelStatistics> GetStatisticsPost(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?));

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelStatistics&gt;</returns>
        ApiResponse<List<ChannelStatistics>> GetStatisticsPostWithHttpInfo(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearAllStatisticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearAllStatisticsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clears the statistics for the given channels and/or connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearStatisticsAsync(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearStatisticsWithHttpInfoAsync(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the Statistics for all channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelStatistics&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelStatistics>> GetStatisticsAsync(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the Statistics for all channels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelStatistics>>> GetStatisticsWithHttpInfoAsync(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the Statistics for the channel with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelStatistics</returns>
        System.Threading.Tasks.Task<ChannelStatistics> GetStatistics1Async(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the Statistics for the channel with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStatistics>> GetStatistics1WithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelStatistics&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelStatistics>> GetStatisticsPostAsync(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelStatistics&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelStatistics>>> GetStatisticsPostWithHttpInfoAsync(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelStatisticsApi : IChannelStatisticsApiSync, IChannelStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelStatisticsApi : IChannelStatisticsApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelStatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelStatisticsApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelStatisticsApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelStatisticsApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ClearAllStatistics()
        {
            ClearAllStatisticsWithHttpInfo();
        }

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> ClearAllStatisticsWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/_clearAllStatistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAllStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearAllStatisticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearAllStatisticsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clears all statistics (including lifetime) for all channels/connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> ClearAllStatisticsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/_clearAllStatistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAllStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <returns></returns>
        public void ClearStatistics(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?))
        {
            ClearStatisticsWithHttpInfo(requestBody, received, filtered, sent, error);
        }

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> ClearStatisticsWithHttpInfo(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelStatisticsApi->ClearStatistics");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (received != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "received", received));
            }
            if (filtered != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "filtered", filtered));
            }
            if (sent != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "sent", sent));
            }
            if (error != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "error", error));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/_clearStatistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearStatisticsAsync(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearStatisticsWithHttpInfoAsync(requestBody, received, filtered, sent, error, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clears the statistics for the given channels and/or connectors. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.</param>
        /// <param name="received">If true, received stats will be cleared. (optional)</param>
        /// <param name="filtered">If true, filtered stats will be cleared. (optional)</param>
        /// <param name="sent">If true, sent stats will be cleared. (optional)</param>
        /// <param name="error">If true, error stats will be cleared. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> ClearStatisticsWithHttpInfoAsync(Dictionary<string, List<int>> requestBody, bool? received = default(bool?), bool? filtered = default(bool?), bool? sent = default(bool?), bool? error = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelStatisticsApi->ClearStatistics");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (received != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "received", received));
            }
            if (filtered != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "filtered", filtered));
            }
            if (sent != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "sent", sent));
            }
            if (error != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "error", error));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/_clearStatistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for all channels. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <returns>List&lt;ChannelStatistics&gt;</returns>
        public List<ChannelStatistics> GetStatistics(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> localVarResponse = GetStatisticsWithHttpInfo(channelId, includeUndeployed, includeMetadataId, excludeMetadataId, aggregateStats);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for all channels. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelStatistics&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> GetStatisticsWithHttpInfo(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));
            }
            if (includeUndeployed != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeUndeployed", includeUndeployed));
            }
            if (includeMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "includeMetadataId", includeMetadataId));
            }
            if (excludeMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "excludeMetadataId", excludeMetadataId));
            }
            if (aggregateStats != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "aggregateStats", aggregateStats));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChannelStatistics>>("/channels/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for all channels. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelStatistics>> GetStatisticsAsync(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> localVarResponse = await GetStatisticsWithHttpInfoAsync(channelId, includeUndeployed, includeMetadataId, excludeMetadataId, aggregateStats, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for all channels. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="includeUndeployed">If true, statistics for undeployed channels will also be included. (optional)</param>
        /// <param name="includeMetadataId">The ids of connectors to include. Cannot include and exclude connectors. (optional)</param>
        /// <param name="excludeMetadataId">The ids of connectors to exclude. Cannot include and exclude connectors. (optional)</param>
        /// <param name="aggregateStats">If true, statistics will be aggregated into one result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>>> GetStatisticsWithHttpInfoAsync(List<string> channelId = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataId = default(List<int>), List<int> excludeMetadataId = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));
            }
            if (includeUndeployed != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeUndeployed", includeUndeployed));
            }
            if (includeMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "includeMetadataId", includeMetadataId));
            }
            if (excludeMetadataId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "excludeMetadataId", excludeMetadataId));
            }
            if (aggregateStats != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "aggregateStats", aggregateStats));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChannelStatistics>>("/channels/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for the channel with the specified id. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <returns>ChannelStatistics</returns>
        public ChannelStatistics GetStatistics1(string channelId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ChannelStatistics> localVarResponse = GetStatistics1WithHttpInfo(channelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for the channel with the specified id. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <returns>ApiResponse of ChannelStatistics</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ChannelStatistics> GetStatistics1WithHttpInfo(string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelStatisticsApi->GetStatistics1");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChannelStatistics>("/channels/{channelId}/statistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for the channel with the specified id. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChannelStatistics</returns>
        public async System.Threading.Tasks.Task<ChannelStatistics> GetStatistics1Async(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ChannelStatistics> localVarResponse = await GetStatistics1WithHttpInfoAsync(channelId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for the channel with the specified id. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve statistics for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChannelStatistics)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ChannelStatistics>> GetStatistics1WithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelStatisticsApi->GetStatistics1");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChannelStatistics>("/channels/{channelId}/statistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatistics1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <returns>List&lt;ChannelStatistics&gt;</returns>
        public List<ChannelStatistics> GetStatisticsPost(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> localVarResponse = GetStatisticsPostWithHttpInfo(channelIds, includeUndeployed, includeMetadataIds, excludeMetadataIds, aggregateStats);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ChannelStatistics&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> GetStatisticsPostWithHttpInfo(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelIds != null)
            {
                localVarRequestOptions.FormParameters.Add("channelIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelIds)); // form parameter
            }
            if (includeUndeployed != null)
            {
                localVarRequestOptions.FormParameters.Add("includeUndeployed", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(includeUndeployed)); // form parameter
            }
            if (includeMetadataIds != null)
            {
                localVarRequestOptions.FormParameters.Add("includeMetadataIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(includeMetadataIds)); // form parameter
            }
            if (excludeMetadataIds != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeMetadataIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(excludeMetadataIds)); // form parameter
            }
            if (aggregateStats != null)
            {
                localVarRequestOptions.FormParameters.Add("aggregateStats", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(aggregateStats)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ChannelStatistics>>("/channels/statistics/_getStatistics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelStatistics&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelStatistics>> GetStatisticsPostAsync(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>> localVarResponse = await GetStatisticsPostWithHttpInfoAsync(channelIds, includeUndeployed, includeMetadataIds, excludeMetadataIds, aggregateStats, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelIds"> (optional)</param>
        /// <param name="includeUndeployed"> (optional)</param>
        /// <param name="includeMetadataIds"> (optional)</param>
        /// <param name="excludeMetadataIds"> (optional)</param>
        /// <param name="aggregateStats"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelStatistics&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelStatistics>>> GetStatisticsPostWithHttpInfoAsync(List<string> channelIds = default(List<string>), bool? includeUndeployed = default(bool?), List<int> includeMetadataIds = default(List<int>), List<int> excludeMetadataIds = default(List<int>), bool? aggregateStats = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelIds != null)
            {
                localVarRequestOptions.FormParameters.Add("channelIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelIds)); // form parameter
            }
            if (includeUndeployed != null)
            {
                localVarRequestOptions.FormParameters.Add("includeUndeployed", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(includeUndeployed)); // form parameter
            }
            if (includeMetadataIds != null)
            {
                localVarRequestOptions.FormParameters.Add("includeMetadataIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(includeMetadataIds)); // form parameter
            }
            if (excludeMetadataIds != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeMetadataIds", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(excludeMetadataIds)); // form parameter
            }
            if (aggregateStats != null)
            {
                localVarRequestOptions.FormParameters.Add("aggregateStats", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(aggregateStats)); // form parameter
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ChannelStatistics>>("/channels/statistics/_getStatistics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
