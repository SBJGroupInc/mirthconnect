/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// CodeTemplateLibrarySaveResult
    /// </summary>
    [DataContract(Name = "CodeTemplateLibrarySaveResult")]
    public partial class CodeTemplateLibrarySaveResult : IEquatable<CodeTemplateLibrarySaveResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplateLibrarySaveResult" /> class.
        /// </summary>
        /// <param name="overrideNeeded">overrideNeeded.</param>
        /// <param name="librariesSuccess">librariesSuccess.</param>
        /// <param name="cause">cause.</param>
        /// <param name="libraryResults">libraryResults.</param>
        /// <param name="codeTemplateResults">codeTemplateResults.</param>
        public CodeTemplateLibrarySaveResult(bool overrideNeeded = default(bool), bool librariesSuccess = default(bool), CodeTemplateLibrarySaveResultCause cause = default(CodeTemplateLibrarySaveResultCause), Dictionary<string, LibraryUpdateResult> libraryResults = default(Dictionary<string, LibraryUpdateResult>), Dictionary<string, CodeTemplateUpdateResult> codeTemplateResults = default(Dictionary<string, CodeTemplateUpdateResult>))
        {
            this.OverrideNeeded = overrideNeeded;
            this.LibrariesSuccess = librariesSuccess;
            this.Cause = cause;
            this.LibraryResults = libraryResults;
            this.CodeTemplateResults = codeTemplateResults;
        }

        /// <summary>
        /// Gets or Sets OverrideNeeded
        /// </summary>
        [DataMember(Name = "overrideNeeded", EmitDefaultValue = true)]
        public bool OverrideNeeded { get; set; }

        /// <summary>
        /// Gets or Sets LibrariesSuccess
        /// </summary>
        [DataMember(Name = "librariesSuccess", EmitDefaultValue = true)]
        public bool LibrariesSuccess { get; set; }

        /// <summary>
        /// Gets or Sets Cause
        /// </summary>
        [DataMember(Name = "cause", EmitDefaultValue = false)]
        public CodeTemplateLibrarySaveResultCause Cause { get; set; }

        /// <summary>
        /// Gets or Sets LibraryResults
        /// </summary>
        [DataMember(Name = "libraryResults", EmitDefaultValue = false)]
        public Dictionary<string, LibraryUpdateResult> LibraryResults { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplateResults
        /// </summary>
        [DataMember(Name = "codeTemplateResults", EmitDefaultValue = false)]
        public Dictionary<string, CodeTemplateUpdateResult> CodeTemplateResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeTemplateLibrarySaveResult {\n");
            sb.Append("  OverrideNeeded: ").Append(OverrideNeeded).Append("\n");
            sb.Append("  LibrariesSuccess: ").Append(LibrariesSuccess).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  LibraryResults: ").Append(LibraryResults).Append("\n");
            sb.Append("  CodeTemplateResults: ").Append(CodeTemplateResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeTemplateLibrarySaveResult);
        }

        /// <summary>
        /// Returns true if CodeTemplateLibrarySaveResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeTemplateLibrarySaveResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeTemplateLibrarySaveResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OverrideNeeded == input.OverrideNeeded ||
                    this.OverrideNeeded.Equals(input.OverrideNeeded)
                ) && 
                (
                    this.LibrariesSuccess == input.LibrariesSuccess ||
                    this.LibrariesSuccess.Equals(input.LibrariesSuccess)
                ) && 
                (
                    this.Cause == input.Cause ||
                    (this.Cause != null &&
                    this.Cause.Equals(input.Cause))
                ) && 
                (
                    this.LibraryResults == input.LibraryResults ||
                    this.LibraryResults != null &&
                    input.LibraryResults != null &&
                    this.LibraryResults.SequenceEqual(input.LibraryResults)
                ) && 
                (
                    this.CodeTemplateResults == input.CodeTemplateResults ||
                    this.CodeTemplateResults != null &&
                    input.CodeTemplateResults != null &&
                    this.CodeTemplateResults.SequenceEqual(input.CodeTemplateResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OverrideNeeded.GetHashCode();
                hashCode = (hashCode * 59) + this.LibrariesSuccess.GetHashCode();
                if (this.Cause != null)
                {
                    hashCode = (hashCode * 59) + this.Cause.GetHashCode();
                }
                if (this.LibraryResults != null)
                {
                    hashCode = (hashCode * 59) + this.LibraryResults.GetHashCode();
                }
                if (this.CodeTemplateResults != null)
                {
                    hashCode = (hashCode * 59) + this.CodeTemplateResults.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
