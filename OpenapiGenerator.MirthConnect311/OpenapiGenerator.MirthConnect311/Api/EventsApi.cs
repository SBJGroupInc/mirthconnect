/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Exports all events to the application data directory on the server.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ExportAllEvents();

        /// <summary>
        /// Exports all events to the application data directory on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAllEventsWithHttpInfo();
        /// <summary>
        /// Retrieves an event by ID.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <returns>ServerEvent</returns>
        ServerEvent GetEvent(int eventId);

        /// <summary>
        /// Retrieves an event by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <returns>ApiResponse of ServerEvent</returns>
        ApiResponse<ServerEvent> GetEventWithHttpInfo(int eventId);
        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <returns>long</returns>
        long GetEventCount(EventFilter eventFilter);

        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <returns>ApiResponse of long</returns>
        ApiResponse<long> GetEventCountWithHttpInfo(EventFilter eventFilter);
        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <returns>long</returns>
        long GetEventCount1(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string));

        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <returns>ApiResponse of long</returns>
        ApiResponse<long> GetEventCount1WithHttpInfo(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string));
        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>List&lt;ServerEvent&gt;</returns>
        List<ServerEvent> GetEvents(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ServerEvent&gt;</returns>
        ApiResponse<List<ServerEvent>> GetEventsWithHttpInfo(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>List&lt;ServerEvent&gt;</returns>
        List<ServerEvent> GetEvents1(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ServerEvent&gt;</returns>
        ApiResponse<List<ServerEvent>> GetEvents1WithHttpInfo(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Returns the maximum event ID currently in the database.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>int</returns>
        int GetMaxEventId();

        /// <summary>
        /// Returns the maximum event ID currently in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetMaxEventIdWithHttpInfo();
        /// <summary>
        /// Remove all events.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <returns>string</returns>
        string RemoveAllEvents(bool? export = default(bool?));

        /// <summary>
        /// Remove all events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RemoveAllEventsWithHttpInfo(bool? export = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Exports all events to the application data directory on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAllEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Exports all events to the application data directory on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAllEventsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an event by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerEvent</returns>
        System.Threading.Tasks.Task<ServerEvent> GetEventAsync(int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an event by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerEvent>> GetEventWithHttpInfoAsync(int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        System.Threading.Tasks.Task<long> GetEventCountAsync(EventFilter eventFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        System.Threading.Tasks.Task<ApiResponse<long>> GetEventCountWithHttpInfoAsync(EventFilter eventFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        System.Threading.Tasks.Task<long> GetEventCount1Async(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count number for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        System.Threading.Tasks.Task<ApiResponse<long>> GetEventCount1WithHttpInfoAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ServerEvent>> GetEventsAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServerEvent>>> GetEventsWithHttpInfoAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ServerEvent>> GetEvents1Async(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for events by specific filter criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServerEvent>>> GetEvents1WithHttpInfoAsync(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the maximum event ID currently in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetMaxEventIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the maximum event ID currently in the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetMaxEventIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove all events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RemoveAllEventsAsync(bool? export = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove all events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RemoveAllEventsWithHttpInfoAsync(bool? export = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Exports all events to the application data directory on the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ExportAllEvents()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = ExportAllEventsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports all events to the application data directory on the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> ExportAllEventsWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/events/_export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAllEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports all events to the application data directory on the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAllEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await ExportAllEventsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports all events to the application data directory on the server. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> ExportAllEventsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/events/_export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAllEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an event by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <returns>ServerEvent</returns>
        public ServerEvent GetEvent(int eventId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ServerEvent> localVarResponse = GetEventWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an event by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <returns>ApiResponse of ServerEvent</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<ServerEvent> GetEventWithHttpInfo(int eventId)
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServerEvent>("/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an event by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerEvent</returns>
        public async System.Threading.Tasks.Task<ServerEvent> GetEventAsync(int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<ServerEvent> localVarResponse = await GetEventWithHttpInfoAsync(eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an event by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerEvent)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<ServerEvent>> GetEventWithHttpInfoAsync(int eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServerEvent>("/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <returns>long</returns>
        public long GetEventCount(EventFilter eventFilter)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> localVarResponse = GetEventCountWithHttpInfo(eventFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <returns>ApiResponse of long</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> GetEventCountWithHttpInfo(EventFilter eventFilter)
        {
            // verify the required parameter 'eventFilter' is set
            if (eventFilter == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'eventFilter' when calling EventsApi->GetEventCount");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventFilter;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<long>("/events/count/_search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        public async System.Threading.Tasks.Task<long> GetEventCountAsync(EventFilter eventFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> localVarResponse = await GetEventCountWithHttpInfoAsync(eventFilter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<long>> GetEventCountWithHttpInfoAsync(EventFilter eventFilter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventFilter' is set
            if (eventFilter == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'eventFilter' when calling EventsApi->GetEventCount");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventFilter;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<long>("/events/count/_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <returns>long</returns>
        public long GetEventCount1(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> localVarResponse = GetEventCount1WithHttpInfo(maxEventId, minEventId, level, startDate, endDate, name, outcome, userId, ipAddress, serverId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <returns>ApiResponse of long</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> GetEventCount1WithHttpInfo(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "maxEventId", maxEventId));
            }
            if (minEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "minEventId", minEventId));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "level", level));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (outcome != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "outcome", outcome));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (serverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "serverId", serverId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<long>("/events/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCount1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        public async System.Threading.Tasks.Task<long> GetEventCount1Async(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<long> localVarResponse = await GetEventCount1WithHttpInfoAsync(maxEventId, minEventId, level, startDate, endDate, name, outcome, userId, ipAddress, serverId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count number for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<long>> GetEventCount1WithHttpInfoAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "maxEventId", maxEventId));
            }
            if (minEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "minEventId", minEventId));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "level", level));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (outcome != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "outcome", outcome));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (serverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "serverId", serverId));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<long>("/events/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventCount1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>List&lt;ServerEvent&gt;</returns>
        public List<ServerEvent> GetEvents(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> localVarResponse = GetEventsWithHttpInfo(maxEventId, minEventId, level, startDate, endDate, name, outcome, userId, ipAddress, serverId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ServerEvent&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> GetEventsWithHttpInfo(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "maxEventId", maxEventId));
            }
            if (minEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "minEventId", minEventId));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "level", level));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (outcome != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "outcome", outcome));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (serverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "serverId", serverId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServerEvent>>("/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServerEvent>> GetEventsAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> localVarResponse = await GetEventsWithHttpInfoAsync(maxEventId, minEventId, level, startDate, endDate, name, outcome, userId, ipAddress, serverId, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxEventId">The maximum event ID to query. (optional)</param>
        /// <param name="minEventId">The minimum event ID to query. (optional)</param>
        /// <param name="level">The type of events to query. (optional)</param>
        /// <param name="startDate">The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700 (optional)</param>
        /// <param name="endDate">The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700 (optional)</param>
        /// <param name="name">Searches the event name for this string. (optional)</param>
        /// <param name="outcome">Searches on whether the event outcome was successful or not. (optional)</param>
        /// <param name="userId">The user ID to query events by. (optional)</param>
        /// <param name="ipAddress">The IP address that originated the event. (optional)</param>
        /// <param name="serverId">The ID of the server that the event was created from. (optional)</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>>> GetEventsWithHttpInfoAsync(int? maxEventId = default(int?), int? minEventId = default(int?), List<string> level = default(List<string>), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string name = default(string), string outcome = default(string), int? userId = default(int?), string ipAddress = default(string), string serverId = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "maxEventId", maxEventId));
            }
            if (minEventId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "minEventId", minEventId));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "level", level));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (outcome != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "outcome", outcome));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "userId", userId));
            }
            if (ipAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ipAddress", ipAddress));
            }
            if (serverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "serverId", serverId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServerEvent>>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>List&lt;ServerEvent&gt;</returns>
        public List<ServerEvent> GetEvents1(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> localVarResponse = GetEvents1WithHttpInfo(eventFilter, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <returns>ApiResponse of List&lt;ServerEvent&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> GetEvents1WithHttpInfo(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'eventFilter' is set
            if (eventFilter == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'eventFilter' when calling EventsApi->GetEvents1");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.Data = eventFilter;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ServerEvent>>("/events/_search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServerEvent>> GetEvents1Async(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>> localVarResponse = await GetEvents1WithHttpInfoAsync(eventFilter, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for events by specific filter criteria. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventFilter">The EventFilter object to use to query events by.</param>
        /// <param name="offset">Used for pagination, determines where to start in the search results. (optional, default to 0)</param>
        /// <param name="limit">Used for pagination, determines the maximum number of results to return. (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ServerEvent>>> GetEvents1WithHttpInfoAsync(EventFilter eventFilter, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventFilter' is set
            if (eventFilter == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'eventFilter' when calling EventsApi->GetEvents1");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.Data = eventFilter;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ServerEvent>>("/events/_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvents1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the maximum event ID currently in the database. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>int</returns>
        public int GetMaxEventId()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<int> localVarResponse = GetMaxEventIdWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the maximum event ID currently in the database. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of int</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<int> GetMaxEventIdWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/events/maxEventId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaxEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the maximum event ID currently in the database. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetMaxEventIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<int> localVarResponse = await GetMaxEventIdWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the maximum event ID currently in the database. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<int>> GetMaxEventIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/events/maxEventId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMaxEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all events. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <returns>string</returns>
        public string RemoveAllEvents(bool? export = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = RemoveAllEventsWithHttpInfo(export);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all events. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> RemoveAllEventsWithHttpInfo(bool? export = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (export != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "export", export));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<string>("/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove all events. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RemoveAllEventsAsync(bool? export = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<string> localVarResponse = await RemoveAllEventsWithHttpInfoAsync(export, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all events. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="export">If true, messages will be exported into the application data directory on the server before being removed. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<string>> RemoveAllEventsWithHttpInfoAsync(bool? export = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (export != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "export", export));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<string>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAllEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
