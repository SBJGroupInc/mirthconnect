/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// CodeTemplateLibrary
    /// </summary>
    [DataContract(Name = "CodeTemplateLibrary")]
    public partial class CodeTemplateLibrary : IEquatable<CodeTemplateLibrary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeTemplateLibrary" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="revision">revision.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="description">description.</param>
        /// <param name="includeNewChannels">includeNewChannels.</param>
        /// <param name="enabledChannelIds">enabledChannelIds.</param>
        /// <param name="disabledChannelIds">disabledChannelIds.</param>
        /// <param name="codeTemplates">codeTemplates.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public CodeTemplateLibrary(string id = default(string), string name = default(string), int revision = default(int), DateTime lastModified = default(DateTime), string description = default(string), bool includeNewChannels = default(bool), List<string> enabledChannelIds = default(List<string>), List<string> disabledChannelIds = default(List<string>), List<CodeTemplate> codeTemplates = default(List<CodeTemplate>), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.Name = name;
            this.Revision = revision;
            this.LastModified = lastModified;
            this.Description = description;
            this.IncludeNewChannels = includeNewChannels;
            this.EnabledChannelIds = enabledChannelIds;
            this.DisabledChannelIds = disabledChannelIds;
            this.CodeTemplates = codeTemplates;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IncludeNewChannels
        /// </summary>
        [DataMember(Name = "includeNewChannels", EmitDefaultValue = true)]
        public bool IncludeNewChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnabledChannelIds
        /// </summary>
        [DataMember(Name = "enabledChannelIds", EmitDefaultValue = false)]
        public List<string> EnabledChannelIds { get; set; }

        /// <summary>
        /// Gets or Sets DisabledChannelIds
        /// </summary>
        [DataMember(Name = "disabledChannelIds", EmitDefaultValue = false)]
        public List<string> DisabledChannelIds { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplates
        /// </summary>
        [DataMember(Name = "codeTemplates", EmitDefaultValue = false)]
        public List<CodeTemplate> CodeTemplates { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeTemplateLibrary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IncludeNewChannels: ").Append(IncludeNewChannels).Append("\n");
            sb.Append("  EnabledChannelIds: ").Append(EnabledChannelIds).Append("\n");
            sb.Append("  DisabledChannelIds: ").Append(DisabledChannelIds).Append("\n");
            sb.Append("  CodeTemplates: ").Append(CodeTemplates).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeTemplateLibrary);
        }

        /// <summary>
        /// Returns true if CodeTemplateLibrary instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeTemplateLibrary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeTemplateLibrary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IncludeNewChannels == input.IncludeNewChannels ||
                    this.IncludeNewChannels.Equals(input.IncludeNewChannels)
                ) && 
                (
                    this.EnabledChannelIds == input.EnabledChannelIds ||
                    this.EnabledChannelIds != null &&
                    input.EnabledChannelIds != null &&
                    this.EnabledChannelIds.SequenceEqual(input.EnabledChannelIds)
                ) && 
                (
                    this.DisabledChannelIds == input.DisabledChannelIds ||
                    this.DisabledChannelIds != null &&
                    input.DisabledChannelIds != null &&
                    this.DisabledChannelIds.SequenceEqual(input.DisabledChannelIds)
                ) && 
                (
                    this.CodeTemplates == input.CodeTemplates ||
                    this.CodeTemplates != null &&
                    input.CodeTemplates != null &&
                    this.CodeTemplates.SequenceEqual(input.CodeTemplates)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                if (this.LastModified != null)
                {
                    hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeNewChannels.GetHashCode();
                if (this.EnabledChannelIds != null)
                {
                    hashCode = (hashCode * 59) + this.EnabledChannelIds.GetHashCode();
                }
                if (this.DisabledChannelIds != null)
                {
                    hashCode = (hashCode * 59) + this.DisabledChannelIds.GetHashCode();
                }
                if (this.CodeTemplates != null)
                {
                    hashCode = (hashCode * 59) + this.CodeTemplates.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
