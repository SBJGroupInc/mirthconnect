/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ChannelExportData
    /// </summary>
    [DataContract(Name = "ChannelExportData")]
    public partial class ChannelExportData : IEquatable<ChannelExportData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelExportData" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="codeTemplateLibraries">codeTemplateLibraries.</param>
        /// <param name="dependentIds">dependentIds.</param>
        /// <param name="dependencyIds">dependencyIds.</param>
        /// <param name="channelTags">channelTags.</param>
        /// <param name="purgedProperties">purgedProperties.</param>
        public ChannelExportData(ChannelMetadata metadata = default(ChannelMetadata), List<CodeTemplateLibrary> codeTemplateLibraries = default(List<CodeTemplateLibrary>), List<string> dependentIds = default(List<string>), List<string> dependencyIds = default(List<string>), List<ChannelTag> channelTags = default(List<ChannelTag>), Dictionary<string, Object> purgedProperties = default(Dictionary<string, Object>))
        {
            this.Metadata = metadata;
            this.CodeTemplateLibraries = codeTemplateLibraries;
            this.DependentIds = dependentIds;
            this.DependencyIds = dependencyIds;
            this.ChannelTags = channelTags;
            this.PurgedProperties = purgedProperties;
        }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public ChannelMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplateLibraries
        /// </summary>
        [DataMember(Name = "codeTemplateLibraries", EmitDefaultValue = false)]
        public List<CodeTemplateLibrary> CodeTemplateLibraries { get; set; }

        /// <summary>
        /// Gets or Sets DependentIds
        /// </summary>
        [DataMember(Name = "dependentIds", EmitDefaultValue = false)]
        public List<string> DependentIds { get; set; }

        /// <summary>
        /// Gets or Sets DependencyIds
        /// </summary>
        [DataMember(Name = "dependencyIds", EmitDefaultValue = false)]
        public List<string> DependencyIds { get; set; }

        /// <summary>
        /// Gets or Sets ChannelTags
        /// </summary>
        [DataMember(Name = "channelTags", EmitDefaultValue = false)]
        public List<ChannelTag> ChannelTags { get; set; }

        /// <summary>
        /// Gets or Sets PurgedProperties
        /// </summary>
        [DataMember(Name = "purgedProperties", EmitDefaultValue = false)]
        public Dictionary<string, Object> PurgedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelExportData {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CodeTemplateLibraries: ").Append(CodeTemplateLibraries).Append("\n");
            sb.Append("  DependentIds: ").Append(DependentIds).Append("\n");
            sb.Append("  DependencyIds: ").Append(DependencyIds).Append("\n");
            sb.Append("  ChannelTags: ").Append(ChannelTags).Append("\n");
            sb.Append("  PurgedProperties: ").Append(PurgedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelExportData);
        }

        /// <summary>
        /// Returns true if ChannelExportData instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelExportData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelExportData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.CodeTemplateLibraries == input.CodeTemplateLibraries ||
                    this.CodeTemplateLibraries != null &&
                    input.CodeTemplateLibraries != null &&
                    this.CodeTemplateLibraries.SequenceEqual(input.CodeTemplateLibraries)
                ) && 
                (
                    this.DependentIds == input.DependentIds ||
                    this.DependentIds != null &&
                    input.DependentIds != null &&
                    this.DependentIds.SequenceEqual(input.DependentIds)
                ) && 
                (
                    this.DependencyIds == input.DependencyIds ||
                    this.DependencyIds != null &&
                    input.DependencyIds != null &&
                    this.DependencyIds.SequenceEqual(input.DependencyIds)
                ) && 
                (
                    this.ChannelTags == input.ChannelTags ||
                    this.ChannelTags != null &&
                    input.ChannelTags != null &&
                    this.ChannelTags.SequenceEqual(input.ChannelTags)
                ) && 
                (
                    this.PurgedProperties == input.PurgedProperties ||
                    this.PurgedProperties != null &&
                    input.PurgedProperties != null &&
                    this.PurgedProperties.SequenceEqual(input.PurgedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.CodeTemplateLibraries != null)
                {
                    hashCode = (hashCode * 59) + this.CodeTemplateLibraries.GetHashCode();
                }
                if (this.DependentIds != null)
                {
                    hashCode = (hashCode * 59) + this.DependentIds.GetHashCode();
                }
                if (this.DependencyIds != null)
                {
                    hashCode = (hashCode * 59) + this.DependencyIds.GetHashCode();
                }
                if (this.ChannelTags != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelTags.GetHashCode();
                }
                if (this.PurgedProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PurgedProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
