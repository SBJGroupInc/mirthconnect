/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenapiGenerator.MirthConnect311.Client;
using OpenapiGenerator.MirthConnect311.Model;

namespace OpenapiGenerator.MirthConnect311.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <returns>bool</returns>
        bool CreateChannel(Channel channel);

        /// <summary>
        /// Creates a new channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> CreateChannelWithHttpInfo(Channel channel);
        /// <summary>
        /// Retrieve a single channel by ID.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>Channel</returns>
        Channel GetChannel(string channelId, bool? includeCodeTemplateLibraries = default(bool?));

        /// <summary>
        /// Retrieve a single channel by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> GetChannelWithHttpInfo(string channelId, bool? includeCodeTemplateLibraries = default(bool?));
        /// <summary>
        /// Returns a map of all channel IDs and names.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetChannelIdsAndNames();

        /// <summary>
        /// Returns a map of all channel IDs and names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetChannelIdsAndNamesWithHttpInfo();
        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <returns>List&lt;ChannelSummary&gt;</returns>
        List<ChannelSummary> GetChannelSummary(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody);

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <returns>ApiResponse of List&lt;ChannelSummary&gt;</returns>
        ApiResponse<List<ChannelSummary>> GetChannelSummaryWithHttpInfo(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody);
        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> GetChannels(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?));

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> GetChannelsWithHttpInfo(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?));
        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> GetChannelsPost(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>));

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> GetChannelsPostWithHttpInfo(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>));
        /// <summary>
        /// Returns all connector names for a channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetConnectorNames(string channelId);

        /// <summary>
        /// Returns all connector names for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetConnectorNamesWithHttpInfo(string channelId);
        /// <summary>
        /// Returns all metadata columns for a channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>List&lt;MetaDataColumn&gt;</returns>
        List<MetaDataColumn> GetMetaDataColumns(string channelId);

        /// <summary>
        /// Returns all metadata columns for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of List&lt;MetaDataColumn&gt;</returns>
        ApiResponse<List<MetaDataColumn>> GetMetaDataColumnsWithHttpInfo(string channelId);
        /// <summary>
        /// Removes the channel with the specified ID.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <returns></returns>
        void RemoveChannel(string channelId);

        /// <summary>
        /// Removes the channel with the specified ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChannelWithHttpInfo(string channelId);
        /// <summary>
        /// Removes the channels with the specified IDs.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <returns></returns>
        void RemoveChannels(List<string> channelId);

        /// <summary>
        /// Removes the channels with the specified IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChannelsWithHttpInfo(List<string> channelId);
        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <returns></returns>
        void RemoveChannelsPost(List<string> requestBody);

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChannelsPostWithHttpInfo(List<string> requestBody);
        /// <summary>
        /// Enables/disables the specified channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <returns></returns>
        void SetChannelEnabled(string channelId, bool enabled);

        /// <summary>
        /// Enables/disables the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetChannelEnabledWithHttpInfo(string channelId, bool enabled);
        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns></returns>
        void SetChannelEnabled1(bool enabled, List<string> channelId = default(List<string>));

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetChannelEnabled1WithHttpInfo(bool enabled, List<string> channelId = default(List<string>));
        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns></returns>
        void SetChannelInitialState(string initialState, List<string> channelId = default(List<string>));

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetChannelInitialStateWithHttpInfo(string initialState, List<string> channelId = default(List<string>));
        /// <summary>
        /// Sets the initial state for a single channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <returns></returns>
        void SetChannelInitialState1(string channelId, string initialState);

        /// <summary>
        /// Sets the initial state for a single channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetChannelInitialState1WithHttpInfo(string channelId, string initialState);
        /// <summary>
        /// Updates the specified channel.
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        bool UpdateChannel(string channelId, Channel channel, bool? _override = default(bool?));

        /// <summary>
        /// Updates the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateChannelWithHttpInfo(string channelId, Channel channel, bool? _override = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> CreateChannelAsync(Channel channel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> CreateChannelWithHttpInfoAsync(Channel channel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a single channel by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> GetChannelAsync(string channelId, bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a single channel by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> GetChannelWithHttpInfoAsync(string channelId, bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a map of all channel IDs and names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetChannelIdsAndNamesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a map of all channel IDs and names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetChannelIdsAndNamesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelSummary&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelSummary>> GetChannelSummaryAsync(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelSummary>>> GetChannelSummaryWithHttpInfoAsync(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> GetChannelsAsync(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> GetChannelsWithHttpInfoAsync(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> GetChannelsPostAsync(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> GetChannelsPostWithHttpInfoAsync(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all connector names for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetConnectorNamesAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all connector names for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetConnectorNamesWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all metadata columns for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MetaDataColumn&gt;</returns>
        System.Threading.Tasks.Task<List<MetaDataColumn>> GetMetaDataColumnsAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all metadata columns for a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MetaDataColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MetaDataColumn>>> GetMetaDataColumnsWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the channel with the specified ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChannelAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the channel with the specified ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChannelWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the channels with the specified IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChannelsAsync(List<string> channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the channels with the specified IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChannelsWithHttpInfoAsync(List<string> channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChannelsPostAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChannelsPostWithHttpInfoAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enables/disables the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetChannelEnabledAsync(string channelId, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enables/disables the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelEnabledWithHttpInfoAsync(string channelId, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetChannelEnabled1Async(bool enabled, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelEnabled1WithHttpInfoAsync(bool enabled, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetChannelInitialStateAsync(string initialState, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelInitialStateWithHttpInfoAsync(string initialState, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the initial state for a single channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetChannelInitialState1Async(string channelId, string initialState, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the initial state for a single channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelInitialState1WithHttpInfoAsync(string channelId, string initialState, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateChannelAsync(string channelId, Channel channel, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the specified channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateChannelWithHttpInfoAsync(string channelId, Channel channel, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApi : IChannelsApiSync, IChannelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsApi : IChannelsApi
    {
        private OpenapiGenerator.MirthConnect311.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi(string basePath)
        {
            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                new OpenapiGenerator.MirthConnect311.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsApi(OpenapiGenerator.MirthConnect311.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenapiGenerator.MirthConnect311.Client.Configuration.MergeConfigurations(
                OpenapiGenerator.MirthConnect311.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenapiGenerator.MirthConnect311.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelsApi(OpenapiGenerator.MirthConnect311.Client.ISynchronousClient client, OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient asyncClient, OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenapiGenerator.MirthConnect311.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenapiGenerator.MirthConnect311.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenapiGenerator.MirthConnect311.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <returns>bool</returns>
        public bool CreateChannel(Channel channel)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = CreateChannelWithHttpInfo(channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> CreateChannelWithHttpInfo(Channel channel)
        {
            // verify the required parameter 'channel' is set
            if (channel == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channel' when calling ChannelsApi->CreateChannel");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = channel;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/channels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> CreateChannelAsync(Channel channel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await CreateChannelWithHttpInfoAsync(channel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channel">The Channel object to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> CreateChannelWithHttpInfoAsync(Channel channel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channel' is set
            if (channel == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channel' when calling ChannelsApi->CreateChannel");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = channel;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/channels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single channel by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>Channel</returns>
        public Channel GetChannel(string channelId, bool? includeCodeTemplateLibraries = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Channel> localVarResponse = GetChannelWithHttpInfo(channelId, includeCodeTemplateLibraries);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single channel by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>ApiResponse of Channel</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Channel> GetChannelWithHttpInfo(string channelId, bool? includeCodeTemplateLibraries = default(bool?))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannel");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Channel>("/channels/{channelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a single channel by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> GetChannelAsync(string channelId, bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Channel> localVarResponse = await GetChannelWithHttpInfoAsync(channelId, includeCodeTemplateLibraries, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a single channel by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to retrieve.</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Channel>> GetChannelWithHttpInfoAsync(string channelId, bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetChannel");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Channel>("/channels/{channelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a map of all channel IDs and names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetChannelIdsAndNames()
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetChannelIdsAndNamesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a map of all channel IDs and names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> GetChannelIdsAndNamesWithHttpInfo()
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/channels/idsAndNames", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelIdsAndNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a map of all channel IDs and names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetChannelIdsAndNamesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetChannelIdsAndNamesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a map of all channel IDs and names. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>>> GetChannelIdsAndNamesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/channels/idsAndNames", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelIdsAndNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <returns>List&lt;ChannelSummary&gt;</returns>
        public List<ChannelSummary> GetChannelSummary(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelSummary>> localVarResponse = GetChannelSummaryWithHttpInfo(ignoreNewChannels, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <returns>ApiResponse of List&lt;ChannelSummary&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelSummary>> GetChannelSummaryWithHttpInfo(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelsApi->GetChannelSummary");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ignoreNewChannels", ignoreNewChannels));
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ChannelSummary>>("/channels/_getSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChannelSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelSummary>> GetChannelSummaryAsync(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelSummary>> localVarResponse = await GetChannelSummaryWithHttpInfoAsync(ignoreNewChannels, requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreNewChannels">If true, summaries will only be returned for channels in the map&#39;s entry set.</param>
        /// <param name="requestBody">A map of ChannelHeader objects telling the server the state of the client-side channel cache.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<ChannelSummary>>> GetChannelSummaryWithHttpInfoAsync(bool ignoreNewChannels, Dictionary<string, ChannelHeader> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelsApi->GetChannelSummary");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "ignoreNewChannels", ignoreNewChannels));
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ChannelSummary>>("/channels/_getSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> GetChannels(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> localVarResponse = GetChannelsWithHttpInfo(channelId, pollingOnly, includeCodeTemplateLibraries);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> GetChannelsWithHttpInfo(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));
            }
            if (pollingOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "pollingOnly", pollingOnly));
            }
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Channel>>("/channels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> GetChannelsAsync(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> localVarResponse = await GetChannelsWithHttpInfoAsync(channelId, pollingOnly, includeCodeTemplateLibraries, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>>> GetChannelsWithHttpInfoAsync(List<string> channelId = default(List<string>), bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));
            }
            if (pollingOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "pollingOnly", pollingOnly));
            }
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Channel>>("/channels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> GetChannelsPost(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> localVarResponse = GetChannelsPostWithHttpInfo(pollingOnly, includeCodeTemplateLibraries, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> GetChannelsPostWithHttpInfo(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pollingOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "pollingOnly", pollingOnly));
            }
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Channel>>("/channels/_getChannels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> GetChannelsPostAsync(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>> localVarResponse = await GetChannelsPostWithHttpInfoAsync(pollingOnly, includeCodeTemplateLibraries, requestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pollingOnly">If true, only channels with polling source connectors will be returned. (optional)</param>
        /// <param name="includeCodeTemplateLibraries">If true, code template libraries will be included in the channel. (optional)</param>
        /// <param name="requestBody">The IDs of the channels to retrieve. If absent, all channels will be retrieved. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<Channel>>> GetChannelsPostWithHttpInfoAsync(bool? pollingOnly = default(bool?), bool? includeCodeTemplateLibraries = default(bool?), List<string> requestBody = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pollingOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "pollingOnly", pollingOnly));
            }
            if (includeCodeTemplateLibraries != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "includeCodeTemplateLibraries", includeCodeTemplateLibraries));
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Channel>>("/channels/_getChannels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all connector names for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetConnectorNames(string channelId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetConnectorNamesWithHttpInfo(channelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all connector names for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> GetConnectorNamesWithHttpInfo(string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetConnectorNames");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/channels/{channelId}/connectorNames", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all connector names for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetConnectorNamesAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetConnectorNamesWithHttpInfoAsync(channelId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all connector names for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Dictionary<string, string>>> GetConnectorNamesWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetConnectorNames");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/channels/{channelId}/connectorNames", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all metadata columns for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>List&lt;MetaDataColumn&gt;</returns>
        public List<MetaDataColumn> GetMetaDataColumns(string channelId)
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<MetaDataColumn>> localVarResponse = GetMetaDataColumnsWithHttpInfo(channelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all metadata columns for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of List&lt;MetaDataColumn&gt;</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<MetaDataColumn>> GetMetaDataColumnsWithHttpInfo(string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetMetaDataColumns");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MetaDataColumn>>("/channels/{channelId}/metaDataColumns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaDataColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all metadata columns for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MetaDataColumn&gt;</returns>
        public async System.Threading.Tasks.Task<List<MetaDataColumn>> GetMetaDataColumnsAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<MetaDataColumn>> localVarResponse = await GetMetaDataColumnsWithHttpInfoAsync(channelId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all metadata columns for a channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MetaDataColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<List<MetaDataColumn>>> GetMetaDataColumnsWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->GetMetaDataColumns");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MetaDataColumn>>("/channels/{channelId}/metaDataColumns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaDataColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channel with the specified ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <returns></returns>
        public void RemoveChannel(string channelId)
        {
            RemoveChannelWithHttpInfo(channelId);
        }

        /// <summary>
        /// Removes the channel with the specified ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> RemoveChannelWithHttpInfo(string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->RemoveChannel");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/channels/{channelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channel with the specified ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChannelAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveChannelWithHttpInfoAsync(channelId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the channel with the specified ID. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> RemoveChannelWithHttpInfoAsync(string channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->RemoveChannel");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/channels/{channelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channels with the specified IDs. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <returns></returns>
        public void RemoveChannels(List<string> channelId)
        {
            RemoveChannelsWithHttpInfo(channelId);
        }

        /// <summary>
        /// Removes the channels with the specified IDs. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> RemoveChannelsWithHttpInfo(List<string> channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->RemoveChannels");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/channels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channels with the specified IDs. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChannelsAsync(List<string> channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveChannelsWithHttpInfoAsync(channelId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the channels with the specified IDs. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> RemoveChannelsWithHttpInfoAsync(List<string> channelId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->RemoveChannels");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("multi", "channelId", channelId));

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/channels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <returns></returns>
        public void RemoveChannelsPost(List<string> requestBody)
        {
            RemoveChannelsPostWithHttpInfo(requestBody);
        }

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> RemoveChannelsPostWithHttpInfo(List<string> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelsApi->RemoveChannelsPost");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/_removeChannels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChannelsPostAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveChannelsPostWithHttpInfoAsync(requestBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">The IDs of the channels to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> RemoveChannelsPostWithHttpInfoAsync(List<string> requestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ChannelsApi->RemoveChannelsPost");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/_removeChannels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables/disables the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <returns></returns>
        public void SetChannelEnabled(string channelId, bool enabled)
        {
            SetChannelEnabledWithHttpInfo(channelId, enabled);
        }

        /// <summary>
        /// Enables/disables the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetChannelEnabledWithHttpInfo(string channelId, bool enabled)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->SetChannelEnabled");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("enabled", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(enabled)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/{channelId}/enabled/{enabled}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelEnabled", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables/disables the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetChannelEnabledAsync(string channelId, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetChannelEnabledWithHttpInfoAsync(channelId, enabled, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Enables/disables the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="enabled">The enabled flag (true/false) to set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetChannelEnabledWithHttpInfoAsync(string channelId, bool enabled, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->SetChannelEnabled");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("enabled", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(enabled)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/{channelId}/enabled/{enabled}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelEnabled", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns></returns>
        public void SetChannelEnabled1(bool enabled, List<string> channelId = default(List<string>))
        {
            SetChannelEnabled1WithHttpInfo(enabled, channelId);
        }

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetChannelEnabled1WithHttpInfo(bool enabled, List<string> channelId = default(List<string>))
        {
            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("enabled", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(enabled)); // form parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/_setEnabled", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelEnabled1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetChannelEnabled1Async(bool enabled, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetChannelEnabled1WithHttpInfoAsync(enabled, channelId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Enables/disables the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enabled"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetChannelEnabled1WithHttpInfoAsync(bool enabled, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("enabled", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(enabled)); // form parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/_setEnabled", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelEnabled1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns></returns>
        public void SetChannelInitialState(string initialState, List<string> channelId = default(List<string>))
        {
            SetChannelInitialStateWithHttpInfo(initialState, channelId);
        }

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetChannelInitialStateWithHttpInfo(string initialState, List<string> channelId = default(List<string>))
        {
            // verify the required parameter 'initialState' is set
            if (initialState == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'initialState' when calling ChannelsApi->SetChannelInitialState");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("initialState", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(initialState)); // form parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/_setInitialState", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelInitialState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetChannelInitialStateAsync(string initialState, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetChannelInitialStateWithHttpInfoAsync(initialState, channelId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sets the initial state for the specified channels. (\&quot;Try it Out\&quot; only works when submitting an array containing one element for this endpoint, but the descriptions are valid. If you want to modify multiple items at once, please use another tool for testing.) 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialState"></param>
        /// <param name="channelId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetChannelInitialStateWithHttpInfoAsync(string initialState, List<string> channelId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'initialState' is set
            if (initialState == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'initialState' when calling ChannelsApi->SetChannelInitialState");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (channelId != null)
            {
                localVarRequestOptions.FormParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("initialState", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(initialState)); // form parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/_setInitialState", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelInitialState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the initial state for a single channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <returns></returns>
        public void SetChannelInitialState1(string channelId, string initialState)
        {
            SetChannelInitialState1WithHttpInfo(channelId, initialState);
        }

        /// <summary>
        /// Sets the initial state for a single channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object> SetChannelInitialState1WithHttpInfo(string channelId, string initialState)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->SetChannelInitialState1");
            }

            // verify the required parameter 'initialState' is set
            if (initialState == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'initialState' when calling ChannelsApi->SetChannelInitialState1");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("initialState", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(initialState)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/channels/{channelId}/initialState/{initialState}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelInitialState1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the initial state for a single channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetChannelInitialState1Async(string channelId, string initialState, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetChannelInitialState1WithHttpInfoAsync(channelId, initialState, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sets the initial state for a single channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="initialState">The initial state of the channel.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<Object>> SetChannelInitialState1WithHttpInfoAsync(string channelId, string initialState, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->SetChannelInitialState1");
            }

            // verify the required parameter 'initialState' is set
            if (initialState == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'initialState' when calling ChannelsApi->SetChannelInitialState1");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("initialState", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(initialState)); // path parameter

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/channels/{channelId}/initialState/{initialState}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetChannelInitialState1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>bool</returns>
        public bool UpdateChannel(string channelId, Channel channel, bool? _override = default(bool?))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = UpdateChannelWithHttpInfo(channelId, channel, _override);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <returns>ApiResponse of bool</returns>
        public OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> UpdateChannelWithHttpInfo(string channelId, Channel channel, bool? _override = default(bool?))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->UpdateChannel");
            }

            // verify the required parameter 'channel' is set
            if (channel == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channel' when calling ChannelsApi->UpdateChannel");
            }

            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = channel;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<bool>("/channels/{channelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateChannelAsync(string channelId, Channel channel, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool> localVarResponse = await UpdateChannelWithHttpInfoAsync(channelId, channel, _override, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified channel. 
        /// </summary>
        /// <exception cref="OpenapiGenerator.MirthConnect311.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel to update.</param>
        /// <param name="channel">The Channel object to update with.</param>
        /// <param name="_override">If true, the channel will be updated even if a different revision exists on the server. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<OpenapiGenerator.MirthConnect311.Client.ApiResponse<bool>> UpdateChannelWithHttpInfoAsync(string channelId, Channel channel, bool? _override = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->UpdateChannel");
            }

            // verify the required parameter 'channel' is set
            if (channel == null)
            {
                throw new OpenapiGenerator.MirthConnect311.Client.ApiException(400, "Missing required parameter 'channel' when calling ChannelsApi->UpdateChannel");
            }


            OpenapiGenerator.MirthConnect311.Client.RequestOptions localVarRequestOptions = new OpenapiGenerator.MirthConnect311.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OpenapiGenerator.MirthConnect311.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (_override != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenapiGenerator.MirthConnect311.Client.ClientUtils.ParameterToMultiMap("", "override", _override));
            }
            localVarRequestOptions.Data = channel;

            // authentication (cookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JSESSIONID")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JSESSIONID", this.Configuration.GetApiKeyWithPrefix("JSESSIONID")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<bool>("/channels/{channelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChannel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
