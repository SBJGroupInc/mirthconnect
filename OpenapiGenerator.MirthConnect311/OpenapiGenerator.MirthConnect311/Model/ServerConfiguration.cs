/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// ServerConfiguration
    /// </summary>
    [DataContract(Name = "ServerConfiguration")]
    public partial class ServerConfiguration : IEquatable<ServerConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfiguration" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="channelGroups">channelGroups.</param>
        /// <param name="channels">channels.</param>
        /// <param name="channelTags">channelTags.</param>
        /// <param name="users">users.</param>
        /// <param name="alerts">alerts.</param>
        /// <param name="codeTemplateLibraries">codeTemplateLibraries.</param>
        /// <param name="serverSettings">serverSettings.</param>
        /// <param name="updateSettings">updateSettings.</param>
        /// <param name="globalScripts">globalScripts.</param>
        /// <param name="pluginProperties">pluginProperties.</param>
        /// <param name="resourceProperties">resourceProperties.</param>
        /// <param name="channelDependencies">channelDependencies.</param>
        /// <param name="configurationMap">configurationMap.</param>
        public ServerConfiguration(string date = default(string), List<ChannelGroup> channelGroups = default(List<ChannelGroup>), List<Channel> channels = default(List<Channel>), List<ChannelTag> channelTags = default(List<ChannelTag>), List<User> users = default(List<User>), List<AlertModel> alerts = default(List<AlertModel>), List<CodeTemplateLibrary> codeTemplateLibraries = default(List<CodeTemplateLibrary>), ServerSettings serverSettings = default(ServerSettings), UpdateSettings updateSettings = default(UpdateSettings), Dictionary<string, string> globalScripts = default(Dictionary<string, string>), Dictionary<string, Dictionary<string, string>> pluginProperties = default(Dictionary<string, Dictionary<string, string>>), ResourcePropertiesList resourceProperties = default(ResourcePropertiesList), List<ChannelDependency> channelDependencies = default(List<ChannelDependency>), Dictionary<string, ConfigurationProperty> configurationMap = default(Dictionary<string, ConfigurationProperty>))
        {
            this.Date = date;
            this.ChannelGroups = channelGroups;
            this.Channels = channels;
            this.ChannelTags = channelTags;
            this.Users = users;
            this.Alerts = alerts;
            this.CodeTemplateLibraries = codeTemplateLibraries;
            this.ServerSettings = serverSettings;
            this.UpdateSettings = updateSettings;
            this.GlobalScripts = globalScripts;
            this.PluginProperties = pluginProperties;
            this.ResourceProperties = resourceProperties;
            this.ChannelDependencies = channelDependencies;
            this.ConfigurationMap = configurationMap;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets ChannelGroups
        /// </summary>
        [DataMember(Name = "channelGroups", EmitDefaultValue = false)]
        public List<ChannelGroup> ChannelGroups { get; set; }

        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name = "channels", EmitDefaultValue = false)]
        public List<Channel> Channels { get; set; }

        /// <summary>
        /// Gets or Sets ChannelTags
        /// </summary>
        [DataMember(Name = "channelTags", EmitDefaultValue = false)]
        public List<ChannelTag> ChannelTags { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<User> Users { get; set; }

        /// <summary>
        /// Gets or Sets Alerts
        /// </summary>
        [DataMember(Name = "alerts", EmitDefaultValue = false)]
        public List<AlertModel> Alerts { get; set; }

        /// <summary>
        /// Gets or Sets CodeTemplateLibraries
        /// </summary>
        [DataMember(Name = "codeTemplateLibraries", EmitDefaultValue = false)]
        public List<CodeTemplateLibrary> CodeTemplateLibraries { get; set; }

        /// <summary>
        /// Gets or Sets ServerSettings
        /// </summary>
        [DataMember(Name = "serverSettings", EmitDefaultValue = false)]
        public ServerSettings ServerSettings { get; set; }

        /// <summary>
        /// Gets or Sets UpdateSettings
        /// </summary>
        [DataMember(Name = "updateSettings", EmitDefaultValue = false)]
        public UpdateSettings UpdateSettings { get; set; }

        /// <summary>
        /// Gets or Sets GlobalScripts
        /// </summary>
        [DataMember(Name = "globalScripts", EmitDefaultValue = false)]
        public Dictionary<string, string> GlobalScripts { get; set; }

        /// <summary>
        /// Gets or Sets PluginProperties
        /// </summary>
        [DataMember(Name = "pluginProperties", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, string>> PluginProperties { get; set; }

        /// <summary>
        /// Gets or Sets ResourceProperties
        /// </summary>
        [DataMember(Name = "resourceProperties", EmitDefaultValue = false)]
        public ResourcePropertiesList ResourceProperties { get; set; }

        /// <summary>
        /// Gets or Sets ChannelDependencies
        /// </summary>
        [DataMember(Name = "channelDependencies", EmitDefaultValue = false)]
        public List<ChannelDependency> ChannelDependencies { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationMap
        /// </summary>
        [DataMember(Name = "configurationMap", EmitDefaultValue = false)]
        public Dictionary<string, ConfigurationProperty> ConfigurationMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerConfiguration {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ChannelGroups: ").Append(ChannelGroups).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  ChannelTags: ").Append(ChannelTags).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Alerts: ").Append(Alerts).Append("\n");
            sb.Append("  CodeTemplateLibraries: ").Append(CodeTemplateLibraries).Append("\n");
            sb.Append("  ServerSettings: ").Append(ServerSettings).Append("\n");
            sb.Append("  UpdateSettings: ").Append(UpdateSettings).Append("\n");
            sb.Append("  GlobalScripts: ").Append(GlobalScripts).Append("\n");
            sb.Append("  PluginProperties: ").Append(PluginProperties).Append("\n");
            sb.Append("  ResourceProperties: ").Append(ResourceProperties).Append("\n");
            sb.Append("  ChannelDependencies: ").Append(ChannelDependencies).Append("\n");
            sb.Append("  ConfigurationMap: ").Append(ConfigurationMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerConfiguration);
        }

        /// <summary>
        /// Returns true if ServerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.ChannelGroups == input.ChannelGroups ||
                    this.ChannelGroups != null &&
                    input.ChannelGroups != null &&
                    this.ChannelGroups.SequenceEqual(input.ChannelGroups)
                ) && 
                (
                    this.Channels == input.Channels ||
                    this.Channels != null &&
                    input.Channels != null &&
                    this.Channels.SequenceEqual(input.Channels)
                ) && 
                (
                    this.ChannelTags == input.ChannelTags ||
                    this.ChannelTags != null &&
                    input.ChannelTags != null &&
                    this.ChannelTags.SequenceEqual(input.ChannelTags)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Alerts == input.Alerts ||
                    this.Alerts != null &&
                    input.Alerts != null &&
                    this.Alerts.SequenceEqual(input.Alerts)
                ) && 
                (
                    this.CodeTemplateLibraries == input.CodeTemplateLibraries ||
                    this.CodeTemplateLibraries != null &&
                    input.CodeTemplateLibraries != null &&
                    this.CodeTemplateLibraries.SequenceEqual(input.CodeTemplateLibraries)
                ) && 
                (
                    this.ServerSettings == input.ServerSettings ||
                    (this.ServerSettings != null &&
                    this.ServerSettings.Equals(input.ServerSettings))
                ) && 
                (
                    this.UpdateSettings == input.UpdateSettings ||
                    (this.UpdateSettings != null &&
                    this.UpdateSettings.Equals(input.UpdateSettings))
                ) && 
                (
                    this.GlobalScripts == input.GlobalScripts ||
                    this.GlobalScripts != null &&
                    input.GlobalScripts != null &&
                    this.GlobalScripts.SequenceEqual(input.GlobalScripts)
                ) && 
                (
                    this.PluginProperties == input.PluginProperties ||
                    this.PluginProperties != null &&
                    input.PluginProperties != null &&
                    this.PluginProperties.SequenceEqual(input.PluginProperties)
                ) && 
                (
                    this.ResourceProperties == input.ResourceProperties ||
                    (this.ResourceProperties != null &&
                    this.ResourceProperties.Equals(input.ResourceProperties))
                ) && 
                (
                    this.ChannelDependencies == input.ChannelDependencies ||
                    this.ChannelDependencies != null &&
                    input.ChannelDependencies != null &&
                    this.ChannelDependencies.SequenceEqual(input.ChannelDependencies)
                ) && 
                (
                    this.ConfigurationMap == input.ConfigurationMap ||
                    this.ConfigurationMap != null &&
                    input.ConfigurationMap != null &&
                    this.ConfigurationMap.SequenceEqual(input.ConfigurationMap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.ChannelGroups != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelGroups.GetHashCode();
                }
                if (this.Channels != null)
                {
                    hashCode = (hashCode * 59) + this.Channels.GetHashCode();
                }
                if (this.ChannelTags != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelTags.GetHashCode();
                }
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                if (this.Alerts != null)
                {
                    hashCode = (hashCode * 59) + this.Alerts.GetHashCode();
                }
                if (this.CodeTemplateLibraries != null)
                {
                    hashCode = (hashCode * 59) + this.CodeTemplateLibraries.GetHashCode();
                }
                if (this.ServerSettings != null)
                {
                    hashCode = (hashCode * 59) + this.ServerSettings.GetHashCode();
                }
                if (this.UpdateSettings != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateSettings.GetHashCode();
                }
                if (this.GlobalScripts != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalScripts.GetHashCode();
                }
                if (this.PluginProperties != null)
                {
                    hashCode = (hashCode * 59) + this.PluginProperties.GetHashCode();
                }
                if (this.ResourceProperties != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceProperties.GetHashCode();
                }
                if (this.ChannelDependencies != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelDependencies.GetHashCode();
                }
                if (this.ConfigurationMap != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationMap.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
