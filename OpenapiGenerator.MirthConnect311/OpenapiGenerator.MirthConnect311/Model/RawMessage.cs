/*
 * NextGen Connect Client API
 *
 * Swagger documentation for the NextGen Connect Client API.
 *
 * The version of the OpenAPI document: 3.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OpenapiGenerator.MirthConnect311.Client.OpenAPIDateConverter;

namespace OpenapiGenerator.MirthConnect311.Model
{
    /// <summary>
    /// RawMessage
    /// </summary>
    [DataContract(Name = "RawMessage")]
    public partial class RawMessage : IEquatable<RawMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RawMessage" /> class.
        /// </summary>
        /// <param name="overwrite">overwrite.</param>
        /// <param name="imported">imported.</param>
        /// <param name="originalMessageId">originalMessageId.</param>
        /// <param name="rawData">rawData.</param>
        /// <param name="rawBytes">rawBytes.</param>
        /// <param name="destinationMetaDataIds">destinationMetaDataIds.</param>
        /// <param name="sourceMap">sourceMap.</param>
        /// <param name="binary">binary.</param>
        /// <param name="attachments">attachments.</param>
        public RawMessage(bool overwrite = default(bool), bool imported = default(bool), long originalMessageId = default(long), string rawData = default(string), List<byte[]> rawBytes = default(List<byte[]>), List<int> destinationMetaDataIds = default(List<int>), Dictionary<string, Object> sourceMap = default(Dictionary<string, Object>), bool binary = default(bool), List<Attachment> attachments = default(List<Attachment>))
        {
            this.Overwrite = overwrite;
            this.Imported = imported;
            this.OriginalMessageId = originalMessageId;
            this.RawData = rawData;
            this.RawBytes = rawBytes;
            this.DestinationMetaDataIds = destinationMetaDataIds;
            this.SourceMap = sourceMap;
            this.Binary = binary;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Gets or Sets Overwrite
        /// </summary>
        [DataMember(Name = "overwrite", EmitDefaultValue = true)]
        public bool Overwrite { get; set; }

        /// <summary>
        /// Gets or Sets Imported
        /// </summary>
        [DataMember(Name = "imported", EmitDefaultValue = true)]
        public bool Imported { get; set; }

        /// <summary>
        /// Gets or Sets OriginalMessageId
        /// </summary>
        [DataMember(Name = "originalMessageId", EmitDefaultValue = false)]
        public long OriginalMessageId { get; set; }

        /// <summary>
        /// Gets or Sets RawData
        /// </summary>
        [DataMember(Name = "rawData", EmitDefaultValue = false)]
        public string RawData { get; set; }

        /// <summary>
        /// Gets or Sets RawBytes
        /// </summary>
        [DataMember(Name = "rawBytes", EmitDefaultValue = false)]
        public List<byte[]> RawBytes { get; set; }

        /// <summary>
        /// Gets or Sets DestinationMetaDataIds
        /// </summary>
        [DataMember(Name = "destinationMetaDataIds", EmitDefaultValue = false)]
        public List<int> DestinationMetaDataIds { get; set; }

        /// <summary>
        /// Gets or Sets SourceMap
        /// </summary>
        [DataMember(Name = "sourceMap", EmitDefaultValue = false)]
        public Dictionary<string, Object> SourceMap { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = true)]
        public bool Binary { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RawMessage {\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("  Imported: ").Append(Imported).Append("\n");
            sb.Append("  OriginalMessageId: ").Append(OriginalMessageId).Append("\n");
            sb.Append("  RawData: ").Append(RawData).Append("\n");
            sb.Append("  RawBytes: ").Append(RawBytes).Append("\n");
            sb.Append("  DestinationMetaDataIds: ").Append(DestinationMetaDataIds).Append("\n");
            sb.Append("  SourceMap: ").Append(SourceMap).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RawMessage);
        }

        /// <summary>
        /// Returns true if RawMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of RawMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RawMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Overwrite == input.Overwrite ||
                    this.Overwrite.Equals(input.Overwrite)
                ) && 
                (
                    this.Imported == input.Imported ||
                    this.Imported.Equals(input.Imported)
                ) && 
                (
                    this.OriginalMessageId == input.OriginalMessageId ||
                    this.OriginalMessageId.Equals(input.OriginalMessageId)
                ) && 
                (
                    this.RawData == input.RawData ||
                    (this.RawData != null &&
                    this.RawData.Equals(input.RawData))
                ) && 
                (
                    this.RawBytes == input.RawBytes ||
                    this.RawBytes != null &&
                    input.RawBytes != null &&
                    this.RawBytes.SequenceEqual(input.RawBytes)
                ) && 
                (
                    this.DestinationMetaDataIds == input.DestinationMetaDataIds ||
                    this.DestinationMetaDataIds != null &&
                    input.DestinationMetaDataIds != null &&
                    this.DestinationMetaDataIds.SequenceEqual(input.DestinationMetaDataIds)
                ) && 
                (
                    this.SourceMap == input.SourceMap ||
                    this.SourceMap != null &&
                    input.SourceMap != null &&
                    this.SourceMap.SequenceEqual(input.SourceMap)
                ) && 
                (
                    this.Binary == input.Binary ||
                    this.Binary.Equals(input.Binary)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Overwrite.GetHashCode();
                hashCode = (hashCode * 59) + this.Imported.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalMessageId.GetHashCode();
                if (this.RawData != null)
                {
                    hashCode = (hashCode * 59) + this.RawData.GetHashCode();
                }
                if (this.RawBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RawBytes.GetHashCode();
                }
                if (this.DestinationMetaDataIds != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationMetaDataIds.GetHashCode();
                }
                if (this.SourceMap != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Binary.GetHashCode();
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
